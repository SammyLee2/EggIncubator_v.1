
EggIncubatorFirst.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a018  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002724  0800a128  0800a128  0000b128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c84c  0800c84c  0000e1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c84c  0800c84c  0000d84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c854  0800c854  0000e1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c854  0800c854  0000d854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c858  0800c858  0000d858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800c85c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  200001fc  0800ca58  0000e1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  0800ca58  0000e904  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b75  00000000  00000000  0000e225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d34  00000000  00000000  0001ed9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  00022d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aff  00000000  00000000  00023b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146be  00000000  00000000  0003d633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa23  00000000  00000000  00051cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1714  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006314  00000000  00000000  000e1758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e7a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a110 	.word	0x0800a110

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800a110 	.word	0x0800a110

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <Ds18b20_Init_one_device>:
	return true;
}
#endif
//###########################################################################################
bool	Ds18b20_Init_one_device(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80011cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011d0:	4910      	ldr	r1, [pc, #64]	@ (8001214 <Ds18b20_Init_one_device+0x4c>)
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <Ds18b20_Init_one_device+0x50>)
 80011d4:	f000 fe6e 	bl	8001eb4 <OneWire_Init>
		if(!OneWire_First(&OneWire)){
 80011d8:	480f      	ldr	r0, [pc, #60]	@ (8001218 <Ds18b20_Init_one_device+0x50>)
 80011da:	f000 ff9a 	bl	8002112 <OneWire_First>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <Ds18b20_Init_one_device+0x20>
			return false;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e013      	b.n	8001210 <Ds18b20_Init_one_device+0x48>

		}

		OneWire_GetFullROM(&OneWire, my_ds18b20_Sensor.Address);
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <Ds18b20_Init_one_device+0x54>)
 80011ea:	480b      	ldr	r0, [pc, #44]	@ (8001218 <Ds18b20_Init_one_device+0x50>)
 80011ec:	f001 f898 	bl	8002320 <OneWire_GetFullROM>

		Ds18b20Delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f002 f9c9 	bl	8003588 <HAL_Delay>
    DS18B20_SetResolution(&OneWire, my_ds18b20_Sensor.Address, DS18B20_Resolution_11bits);
 80011f6:	220b      	movs	r2, #11
 80011f8:	4908      	ldr	r1, [pc, #32]	@ (800121c <Ds18b20_Init_one_device+0x54>)
 80011fa:	4807      	ldr	r0, [pc, #28]	@ (8001218 <Ds18b20_Init_one_device+0x50>)
 80011fc:	f000 f93e 	bl	800147c <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8001200:	2032      	movs	r0, #50	@ 0x32
 8001202:	f002 f9c1 	bl	8003588 <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire,  my_ds18b20_Sensor.Address);
 8001206:	4905      	ldr	r1, [pc, #20]	@ (800121c <Ds18b20_Init_one_device+0x54>)
 8001208:	4803      	ldr	r0, [pc, #12]	@ (8001218 <Ds18b20_Init_one_device+0x50>)
 800120a:	f000 f9cf 	bl	80015ac <DS18B20_DisableAlarmTemperature>

	return true;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010c00 	.word	0x40010c00
 8001218:	20000228 	.word	0x20000228
 800121c:	20000218 	.word	0x20000218

08001220 <Ds18b20_Simple_Convert>:



bool	Ds18b20_Simple_Convert(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	DS18B20_StartAll(&OneWire);
 8001224:	480f      	ldr	r0, [pc, #60]	@ (8001264 <Ds18b20_Simple_Convert+0x44>)
 8001226:	f000 f823 	bl	8001270 <DS18B20_StartAll>
	Ds18b20Delay(100);
 800122a:	2064      	movs	r0, #100	@ 0x64
 800122c:	f002 f9ac 	bl	8003588 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8001230:	e002      	b.n	8001238 <Ds18b20_Simple_Convert+0x18>

	{
		Ds18b20Delay(10);
 8001232:	200a      	movs	r0, #10
 8001234:	f002 f9a8 	bl	8003588 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8001238:	480a      	ldr	r0, [pc, #40]	@ (8001264 <Ds18b20_Simple_Convert+0x44>)
 800123a:	f000 fa12 	bl	8001662 <DS18B20_AllDone>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f6      	beq.n	8001232 <Ds18b20_Simple_Convert+0x12>
	}

	Ds18b20Delay(100);
 8001244:	2064      	movs	r0, #100	@ 0x64
 8001246:	f002 f99f 	bl	8003588 <HAL_Delay>
	my_ds18b20_Sensor.DataIsValid = DS18B20_Read(&OneWire, my_ds18b20_Sensor.Address, &my_ds18b20_Sensor.Temperature);
 800124a:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <Ds18b20_Simple_Convert+0x48>)
 800124c:	4907      	ldr	r1, [pc, #28]	@ (800126c <Ds18b20_Simple_Convert+0x4c>)
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <Ds18b20_Simple_Convert+0x44>)
 8001250:	f000 f822 	bl	8001298 <DS18B20_Read>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <Ds18b20_Simple_Convert+0x4c>)
 800125a:	731a      	strb	r2, [r3, #12]
	return true;
 800125c:	2301      	movs	r3, #1
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000228 	.word	0x20000228
 8001268:	20000220 	.word	0x20000220
 800126c:	20000218 	.word	0x20000218

08001270 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fe49 	bl	8001f10 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800127e:	21cc      	movs	r1, #204	@ 0xcc
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 ff07 	bl	8002094 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8001286:	2144      	movs	r1, #68	@ 0x44
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 ff03 	bl	8002094 <OneWire_WriteByte>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b08b      	sub	sp, #44	@ 0x2c
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 80012ae:	68b8      	ldr	r0, [r7, #8]
 80012b0:	f000 f96c 	bl	800158c <DS18B20_Is>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <DS18B20_Read+0x26>
		return false;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e0d8      	b.n	8001470 <DS18B20_Read+0x1d8>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 feaa 	bl	8002018 <OneWire_ReadBit>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e0d0      	b.n	8001470 <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 fe1e 	bl	8001f10 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f001 f803 	bl	80022e2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80012dc:	21be      	movs	r1, #190	@ 0xbe
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fed8 	bl	8002094 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	77fb      	strb	r3, [r7, #31]
 80012e8:	e00d      	b.n	8001306 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80012ea:	7ffc      	ldrb	r4, [r7, #31]
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f000 feef 	bl	80020d0 <OneWire_ReadByte>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80012fa:	443b      	add	r3, r7
 80012fc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8001300:	7ffb      	ldrb	r3, [r7, #31]
 8001302:	3301      	adds	r3, #1
 8001304:	77fb      	strb	r3, [r7, #31]
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	2b08      	cmp	r3, #8
 800130a:	d9ee      	bls.n	80012ea <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2108      	movs	r1, #8
 8001312:	4618      	mov	r0, r3
 8001314:	f001 f820 	bl	8002358 <OneWire_CRC8>
 8001318:	4603      	mov	r3, r0
 800131a:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 800131c:	7f3b      	ldrb	r3, [r7, #28]
 800131e:	7fba      	ldrb	r2, [r7, #30]
 8001320:	429a      	cmp	r2, r3
 8001322:	d001      	beq.n	8001328 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8001324:	2300      	movs	r3, #0
 8001326:	e0a3      	b.n	8001470 <DS18B20_Read+0x1d8>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8001328:	7d3b      	ldrb	r3, [r7, #20]
 800132a:	b21a      	sxth	r2, r3
 800132c:	7d7b      	ldrb	r3, [r7, #21]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 fde9 	bl	8001f10 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 800133e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001342:	2b00      	cmp	r3, #0
 8001344:	da05      	bge.n	8001352 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001346:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001348:	425b      	negs	r3, r3
 800134a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8001352:	7e3b      	ldrb	r3, [r7, #24]
 8001354:	115b      	asrs	r3, r3, #5
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3309      	adds	r3, #9
 8001360:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8001362:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	b29b      	uxth	r3, r3
 8001368:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 800136c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	b29b      	uxth	r3, r3
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	b25b      	sxtb	r3, r3
 8001376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800137a:	b25a      	sxtb	r2, r3
 800137c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001380:	4313      	orrs	r3, r2
 8001382:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	/* Store decimal digits */
	switch (resolution)
 8001386:	7f7b      	ldrb	r3, [r7, #29]
 8001388:	3b09      	subs	r3, #9
 800138a:	2b03      	cmp	r3, #3
 800138c:	d850      	bhi.n	8001430 <DS18B20_Read+0x198>
 800138e:	a201      	add	r2, pc, #4	@ (adr r2, 8001394 <DS18B20_Read+0xfc>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013c9 	.word	0x080013c9
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	08001411 	.word	0x08001411
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80013a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013a6:	08db      	lsrs	r3, r3, #3
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc94 	bl	8000cdc <__aeabi_i2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80013b8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80013bc:	6a38      	ldr	r0, [r7, #32]
 80013be:	f7ff fce1 	bl	8000d84 <__aeabi_fmul>
 80013c2:	4603      	mov	r3, r0
 80013c4:	623b      	str	r3, [r7, #32]
		break;
 80013c6:	e038      	b.n	800143a <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 80013c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc82 	bl	8000cdc <__aeabi_i2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 80013dc:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80013e0:	6a38      	ldr	r0, [r7, #32]
 80013e2:	f7ff fccf 	bl	8000d84 <__aeabi_fmul>
 80013e6:	4603      	mov	r3, r0
 80013e8:	623b      	str	r3, [r7, #32]
		 break;
 80013ea:	e026      	b.n	800143a <DS18B20_Read+0x1a2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 80013ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fc70 	bl	8000cdc <__aeabi_i2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8001400:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8001404:	6a38      	ldr	r0, [r7, #32]
 8001406:	f7ff fcbd 	bl	8000d84 <__aeabi_fmul>
 800140a:	4603      	mov	r3, r0
 800140c:	623b      	str	r3, [r7, #32]
		break;
 800140e:	e014      	b.n	800143a <DS18B20_Read+0x1a2>
		case 12:
			decimal = temperature & 0x0F;
 8001410:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fc60 	bl	8000cdc <__aeabi_i2f>
 800141c:	4603      	mov	r3, r0
 800141e:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8001420:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8001424:	6a38      	ldr	r0, [r7, #32]
 8001426:	f7ff fcad 	bl	8000d84 <__aeabi_fmul>
 800142a:	4603      	mov	r3, r0
 800142c:	623b      	str	r3, [r7, #32]
		 break;
 800142e:	e004      	b.n	800143a <DS18B20_Read+0x1a2>
		default:
			decimal = 0xFF;
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <DS18B20_Read+0x1e0>)
 8001432:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 800143a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc4c 	bl	8000cdc <__aeabi_i2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	6a38      	ldr	r0, [r7, #32]
 800144a:	f7ff fb93 	bl	8000b74 <__addsf3>
 800144e:	4603      	mov	r3, r0
 8001450:	623b      	str	r3, [r7, #32]
	if (minus)
 8001452:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8001456:	2b00      	cmp	r3, #0
 8001458:	d006      	beq.n	8001468 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 800145a:	6a39      	ldr	r1, [r7, #32]
 800145c:	f04f 0000 	mov.w	r0, #0
 8001460:	f7ff fb86 	bl	8000b70 <__aeabi_fsub>
 8001464:	4603      	mov	r3, r0
 8001466:	623b      	str	r3, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a3a      	ldr	r2, [r7, #32]
 800146c:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	372c      	adds	r7, #44	@ 0x2c
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	437f0000 	.word	0x437f0000

0800147c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	f000 f87e 	bl	800158c <DS18B20_Is>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <DS18B20_SetResolution+0x1e>
		return 0;
 8001496:	2300      	movs	r3, #0
 8001498:	e074      	b.n	8001584 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fd38 	bl	8001f10 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 ff1d 	bl	80022e2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80014a8:	21be      	movs	r1, #190	@ 0xbe
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 fdf2 	bl	8002094 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fe0d 	bl	80020d0 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 fe0a 	bl	80020d0 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 fe07 	bl	80020d0 <OneWire_ReadByte>
 80014c2:	4603      	mov	r3, r0
 80014c4:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 fe02 	bl	80020d0 <OneWire_ReadByte>
 80014cc:	4603      	mov	r3, r0
 80014ce:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fdfd 	bl	80020d0 <OneWire_ReadByte>
 80014d6:	4603      	mov	r3, r0
 80014d8:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b09      	cmp	r3, #9
 80014de:	d108      	bne.n	80014f2 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014e6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	f023 0320 	bic.w	r3, r3, #32
 80014ee:	75fb      	strb	r3, [r7, #23]
 80014f0:	e022      	b.n	8001538 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b0a      	cmp	r3, #10
 80014f6:	d108      	bne.n	800150a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014fe:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	f043 0320 	orr.w	r3, r3, #32
 8001506:	75fb      	strb	r3, [r7, #23]
 8001508:	e016      	b.n	8001538 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b0b      	cmp	r3, #11
 800150e:	d108      	bne.n	8001522 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001516:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	f023 0320 	bic.w	r3, r3, #32
 800151e:	75fb      	strb	r3, [r7, #23]
 8001520:	e00a      	b.n	8001538 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d107      	bne.n	8001538 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800152e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 fce9 	bl	8001f10 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f000 fece 	bl	80022e2 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001546:	214e      	movs	r1, #78	@ 0x4e
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 fda3 	bl	8002094 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800154e:	7dbb      	ldrb	r3, [r7, #22]
 8001550:	4619      	mov	r1, r3
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fd9e 	bl	8002094 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001558:	7d7b      	ldrb	r3, [r7, #21]
 800155a:	4619      	mov	r1, r3
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 fd99 	bl	8002094 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	4619      	mov	r1, r3
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fd94 	bl	8002094 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fccf 	bl	8001f10 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 feb4 	bl	80022e2 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800157a:	2148      	movs	r1, #72	@ 0x48
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fd89 	bl	8002094 <OneWire_WriteByte>

	return 1;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b28      	cmp	r3, #40	@ 0x28
 800159a:	d101      	bne.n	80015a0 <DS18B20_Is+0x14>
		return 1;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <DS18B20_Is+0x16>

	return 0;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 80015b6:	6838      	ldr	r0, [r7, #0]
 80015b8:	f7ff ffe8 	bl	800158c <DS18B20_Is>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e049      	b.n	800165a <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fca2 	bl	8001f10 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80015cc:	6839      	ldr	r1, [r7, #0]
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fe87 	bl	80022e2 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80015d4:	21be      	movs	r1, #190	@ 0xbe
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fd5c 	bl	8002094 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fd77 	bl	80020d0 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fd74 	bl	80020d0 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fd71 	bl	80020d0 <OneWire_ReadByte>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fd6c 	bl	80020d0 <OneWire_ReadByte>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fd67 	bl	80020d0 <OneWire_ReadByte>
 8001602:	4603      	mov	r3, r0
 8001604:	737b      	strb	r3, [r7, #13]

	th = 125;
 8001606:	237d      	movs	r3, #125	@ 0x7d
 8001608:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 800160a:	23c9      	movs	r3, #201	@ 0xc9
 800160c:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fc7e 	bl	8001f10 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 fe63 	bl	80022e2 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 800161c:	214e      	movs	r1, #78	@ 0x4e
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fd38 	bl	8002094 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fd33 	bl	8002094 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800162e:	7bbb      	ldrb	r3, [r7, #14]
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fd2e 	bl	8002094 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fd29 	bl	8002094 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fc64 	bl	8001f10 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001648:	6839      	ldr	r1, [r7, #0]
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fe49 	bl	80022e2 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8001650:	2148      	movs	r1, #72	@ 0x48
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fd1e 	bl	8002094 <OneWire_WriteByte>

	return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fcd4 	bl	8002018 <OneWire_ReadBit>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <lcd_init>:
#define bit(b) (1UL << (b))

static SPI_HandleTypeDef * m_hspi;


void lcd_init(SPI_HandleTypeDef * hspi){
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	m_hspi = hspi;
 8001684:	4a03      	ldr	r2, [pc, #12]	@ (8001694 <lcd_init+0x18>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	2000023c 	.word	0x2000023c

08001698 <setDigit>:
    0xF6     /* Segments to light for 9  */ //11110110
};


void setDigit(uint8_t row, uint8_t digit, int decimalPoint)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	603a      	str	r2, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	460b      	mov	r3, r1
 80016a6:	71bb      	strb	r3, [r7, #6]
	//3 1 0
	uint8_t rowSelector;
      uint8_t data;
      rowSelector = bit(3-row)<<4;
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f1c3 0303 	rsb	r3, r3, #3
 80016ae:	2201      	movs	r2, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	73fb      	strb	r3, [r7, #15]


      data =  ~  (hexDigitValue[ digit & 0xF]);
 80016bc:	79bb      	ldrb	r3, [r7, #6]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	4a16      	ldr	r2, [pc, #88]	@ (800171c <setDigit+0x84>)
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	73bb      	strb	r3, [r7, #14]
      if(decimalPoint){
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <setDigit+0x48>
    	  data &= 0xFE;
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	73bb      	strb	r3, [r7, #14]
      }

	     //HAL_SPI_Transmit(m_hspi, &digit, 1, 100);
	     HAL_SPI_Transmit(m_hspi, &data, 1, 100);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <setDigit+0x88>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f107 010e 	add.w	r1, r7, #14
 80016e8:	2364      	movs	r3, #100	@ 0x64
 80016ea:	2201      	movs	r2, #1
 80016ec:	f003 fb80 	bl	8004df0 <HAL_SPI_Transmit>

    	      // Now shift 4 row bits into the first 74HC595 and latch
    	      //digitalWrite(ST_CP, LOW);
//    	     HAL_SPI_Transmit(m_hspi, &row, 1, 100);
    	     HAL_SPI_Transmit(m_hspi, &rowSelector, 1, 100);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <setDigit+0x88>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	f107 010f 	add.w	r1, r7, #15
 80016f8:	2364      	movs	r3, #100	@ 0x64
 80016fa:	2201      	movs	r2, #1
 80016fc:	f003 fb78 	bl	8004df0 <HAL_SPI_Transmit>

    	     HAL_GPIO_WritePin(PA6_RCLK_GPIO_Port, PA6_RCLK_Pin, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	2140      	movs	r1, #64	@ 0x40
 8001704:	4807      	ldr	r0, [pc, #28]	@ (8001724 <setDigit+0x8c>)
 8001706:	f002 fa0c 	bl	8003b22 <HAL_GPIO_WritePin>


    	     HAL_GPIO_WritePin(PA6_RCLK_GPIO_Port, PA6_RCLK_Pin, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2140      	movs	r1, #64	@ 0x40
 800170e:	4805      	ldr	r0, [pc, #20]	@ (8001724 <setDigit+0x8c>)
 8001710:	f002 fa07 	bl	8003b22 <HAL_GPIO_WritePin>

      }
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	2000023c 	.word	0x2000023c
 8001724:	40010800 	.word	0x40010800

08001728 <displayTemperature>:
}
*/

static uint8_t m_tempercount = 0;

void displayTemperature(int temperature){
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
/*	n1 = (int) temperature % 10; //4
	n2 = (int) ((temperature % 100)) / 10; // 3
	n3 = (int) ((temperature)) / 100; //2
	n4 = (int) ((temperature)) / 1000; //1
*/
	n1 = (int) temperature % 10; //4
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4b56      	ldr	r3, [pc, #344]	@ (800188c <displayTemperature+0x164>)
 8001734:	fb83 1302 	smull	r1, r3, r3, r2
 8001738:	1099      	asrs	r1, r3, #2
 800173a:	17d3      	asrs	r3, r2, #31
 800173c:	1ac9      	subs	r1, r1, r3
 800173e:	460b      	mov	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
	n2 = (int) (temperature/10) % 10; //3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4f      	ldr	r2, [pc, #316]	@ (800188c <displayTemperature+0x164>)
 800174e:	fb82 1203 	smull	r1, r2, r2, r3
 8001752:	1092      	asrs	r2, r2, #2
 8001754:	17db      	asrs	r3, r3, #31
 8001756:	1ad2      	subs	r2, r2, r3
 8001758:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <displayTemperature+0x164>)
 800175a:	fb83 1302 	smull	r1, r3, r3, r2
 800175e:	1099      	asrs	r1, r3, #2
 8001760:	17d3      	asrs	r3, r2, #31
 8001762:	1ac9      	subs	r1, r1, r3
 8001764:	460b      	mov	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	613b      	str	r3, [r7, #16]
	n3 = (int) (temperature/100) % 10; //2
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a47      	ldr	r2, [pc, #284]	@ (8001890 <displayTemperature+0x168>)
 8001774:	fb82 1203 	smull	r1, r2, r2, r3
 8001778:	1152      	asrs	r2, r2, #5
 800177a:	17db      	asrs	r3, r3, #31
 800177c:	1ad2      	subs	r2, r2, r3
 800177e:	4b43      	ldr	r3, [pc, #268]	@ (800188c <displayTemperature+0x164>)
 8001780:	fb83 1302 	smull	r1, r3, r3, r2
 8001784:	1099      	asrs	r1, r3, #2
 8001786:	17d3      	asrs	r3, r2, #31
 8001788:	1ac9      	subs	r1, r1, r3
 800178a:	460b      	mov	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	60fb      	str	r3, [r7, #12]
	n4 = (int) (temperature/1000) % 10; // 1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a3e      	ldr	r2, [pc, #248]	@ (8001894 <displayTemperature+0x16c>)
 800179a:	fb82 1203 	smull	r1, r2, r2, r3
 800179e:	1192      	asrs	r2, r2, #6
 80017a0:	17db      	asrs	r3, r3, #31
 80017a2:	1ad2      	subs	r2, r2, r3
 80017a4:	4b39      	ldr	r3, [pc, #228]	@ (800188c <displayTemperature+0x164>)
 80017a6:	fb83 1302 	smull	r1, r3, r3, r2
 80017aa:	1099      	asrs	r1, r3, #2
 80017ac:	17d3      	asrs	r3, r2, #31
 80017ae:	1ac9      	subs	r1, r1, r3
 80017b0:	460b      	mov	r3, r1
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	60bb      	str	r3, [r7, #8]
	 	  setDigit(0, 1234%10,0);
	      setDigit(1, (1234/10)%10,0);
	      setDigit(2, (1234/100)%10,0);
	      setDigit(3, (1234/1000)%10,0);
*/
	switch (m_tempercount) {
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <displayTemperature+0x170>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d832      	bhi.n	800182a <displayTemperature+0x102>
 80017c4:	a201      	add	r2, pc, #4	@ (adr r2, 80017cc <displayTemperature+0xa4>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017ed 	.word	0x080017ed
 80017d4:	080017fd 	.word	0x080017fd
 80017d8:	08001813 	.word	0x08001813

	case 0:
		//	      setDigit(i, temperature % 10, 0); // display righmost 4 bits (1 digit)

		//send_port(_LED_0F[n1], 0b0001); //0
		setDigit(0, n1, 0);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff57 	bl	8001698 <setDigit>
		break;
 80017ea:	e023      	b.n	8001834 <displayTemperature+0x10c>
	case 1:
//		send_port(_LED_0F[n2] & 0x7F, 0b0010); //1
		setDigit(1, n2, 1);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2201      	movs	r2, #1
 80017f2:	4619      	mov	r1, r3
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff ff4f 	bl	8001698 <setDigit>
		break;
 80017fa:	e01b      	b.n	8001834 <displayTemperature+0x10c>
	case 2:
		if (temperature > 99) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b63      	cmp	r3, #99	@ 0x63
 8001800:	dd15      	ble.n	800182e <displayTemperature+0x106>
//얘가 문제같
			setDigit(2, n3, 0);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	2002      	movs	r0, #2
 800180c:	f7ff ff44 	bl	8001698 <setDigit>
			//send_port(_LED_0F[n3], 0b0100);
		}
		break;
 8001810:	e00d      	b.n	800182e <displayTemperature+0x106>
	case 3:
		if (temperature > 999) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001818:	db0b      	blt.n	8001832 <displayTemperature+0x10a>
			setDigit(3, n4, 0);
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2200      	movs	r2, #0
 8001820:	4619      	mov	r1, r3
 8001822:	2003      	movs	r0, #3
 8001824:	f7ff ff38 	bl	8001698 <setDigit>
			//send_port(_LED_0F[n4], 0b1000);
		}
		break;
 8001828:	e003      	b.n	8001832 <displayTemperature+0x10a>
	default:
		break;
 800182a:	bf00      	nop
 800182c:	e002      	b.n	8001834 <displayTemperature+0x10c>
		break;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <displayTemperature+0x10c>
		break;
 8001832:	bf00      	nop
	}

	m_tempercount++;
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <displayTemperature+0x170>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <displayTemperature+0x170>)
 800183e:	701a      	strb	r2, [r3, #0]

	if (temperature > 999 && m_tempercount >= 5) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001846:	db07      	blt.n	8001858 <displayTemperature+0x130>
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <displayTemperature+0x170>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d903      	bls.n	8001858 <displayTemperature+0x130>
		m_tempercount = 0;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <displayTemperature+0x170>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e015      	b.n	8001884 <displayTemperature+0x15c>
	}else if(temperature > 99 && m_tempercount >= 4){
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b63      	cmp	r3, #99	@ 0x63
 800185c:	dd07      	ble.n	800186e <displayTemperature+0x146>
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <displayTemperature+0x170>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d903      	bls.n	800186e <displayTemperature+0x146>
		m_tempercount = 0;
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <displayTemperature+0x170>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e00a      	b.n	8001884 <displayTemperature+0x15c>
	}else if(temperature <= 99 && m_tempercount >= 3){
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b63      	cmp	r3, #99	@ 0x63
 8001872:	dc07      	bgt.n	8001884 <displayTemperature+0x15c>
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <displayTemperature+0x170>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d903      	bls.n	8001884 <displayTemperature+0x15c>
		m_tempercount = 0;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <displayTemperature+0x170>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	}

}
 8001882:	e7ff      	b.n	8001884 <displayTemperature+0x15c>
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	66666667 	.word	0x66666667
 8001890:	51eb851f 	.word	0x51eb851f
 8001894:	10624dd3 	.word	0x10624dd3
 8001898:	20000240 	.word	0x20000240

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a2:	f001 fe0f 	bl	80034c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  static uint8_t heater_state = 0;
  //1814401 and 1814402 for time_Preparing is just a code.
  //0~1814400 is reserved since 21 x 24 x 60 x 60 is 181440
  uint32_t time_Preparing =1814401;
 80018a6:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <main+0x134>)
 80018a8:	60fb      	str	r3, [r7, #12]
  uint32_t startTime = HAL_GetTick()/1000;
 80018aa:	f001 fe63 	bl	8003574 <HAL_GetTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a48      	ldr	r2, [pc, #288]	@ (80019d4 <main+0x138>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	60bb      	str	r3, [r7, #8]

  uint32_t time_completed = 1814402;
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <main+0x13c>)
 80018bc:	607b      	str	r3, [r7, #4]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018be:	f000 f8a3 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c2:	f000 f9e7 	bl	8001c94 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018c6:	f000 f913 	bl	8001af0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80018ca:	f000 f997 	bl	8001bfc <MX_TIM2_Init>
  MX_TIM1_Init();
 80018ce:	f000 f945 	bl	8001b5c <MX_TIM1_Init>
  MX_I2C1_Init();
 80018d2:	f000 f8df 	bl	8001a94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Ds18b20_Init_one_device();
 80018d6:	f7ff fc77 	bl	80011c8 <Ds18b20_Init_one_device>
  ssd1306_egg_incubator_booting();
 80018da:	f001 f939 	bl	8002b50 <ssd1306_egg_incubator_booting>
  lcd_init(&hspi1);
 80018de:	483f      	ldr	r0, [pc, #252]	@ (80019dc <main+0x140>)
 80018e0:	f7ff fecc 	bl	800167c <lcd_init>
  HAL_TIM_Base_Start_IT(&htim1);
 80018e4:	483e      	ldr	r0, [pc, #248]	@ (80019e0 <main+0x144>)
 80018e6:	f003 fd07 	bl	80052f8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      switch (global_var_control) {
 80018ea:	4b3e      	ldr	r3, [pc, #248]	@ (80019e4 <main+0x148>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d056      	beq.n	80019a0 <main+0x104>
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	dcf9      	bgt.n	80018ea <main+0x4e>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <main+0x64>
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d017      	beq.n	800192e <main+0x92>
 80018fe:	e7f4      	b.n	80018ea <main+0x4e>
          case PREPARING:
              //Tasks to perform in Preparing state

        	  if(heater_state){
 8001900:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <main+0x14c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <main+0x7e>
        			  //turn the heater off if the heater is on in Preparing state
        			  HAL_GPIO_WritePin(GPIO_RELAY_GPIO_Port, GPIO_RELAY_Pin, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800190e:	4837      	ldr	r0, [pc, #220]	@ (80019ec <main+0x150>)
 8001910:	f002 f907 	bl	8003b22 <HAL_GPIO_WritePin>
        			  heater_state = 0;
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <main+0x14c>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
        		  }
        	  display_ssd1306(&time_Preparing, "Preparing", temperature, heater_state);
 800191a:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <main+0x154>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <main+0x14c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	f107 000c 	add.w	r0, r7, #12
 8001926:	4933      	ldr	r1, [pc, #204]	@ (80019f4 <main+0x158>)
 8001928:	f001 faba 	bl	8002ea0 <display_ssd1306>
              break;
 800192c:	e04e      	b.n	80019cc <main+0x130>
          case INCUBATING:
              //Tasks to perform in Incubating state

        	  Ds18b20_Simple_Convert();
 800192e:	f7ff fc77 	bl	8001220 <Ds18b20_Simple_Convert>
        	  temperature = my_ds18b20_Sensor.Temperature;
 8001932:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <main+0x15c>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4a2e      	ldr	r2, [pc, #184]	@ (80019f0 <main+0x154>)
 8001938:	6013      	str	r3, [r2, #0]

        	  if(heater_state){
 800193a:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <main+0x14c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <main+0xcc>
        		  if(temperature >38){
 8001942:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <main+0x154>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	492d      	ldr	r1, [pc, #180]	@ (80019fc <main+0x160>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fbd7 	bl	80010fc <__aeabi_fcmpgt>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01b      	beq.n	800198c <main+0xf0>
        			  //turn the heater off
        			  HAL_GPIO_WritePin(GPIO_RELAY_GPIO_Port, GPIO_RELAY_Pin, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800195a:	4824      	ldr	r0, [pc, #144]	@ (80019ec <main+0x150>)
 800195c:	f002 f8e1 	bl	8003b22 <HAL_GPIO_WritePin>
        			  heater_state = 0;
 8001960:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <main+0x14c>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	e011      	b.n	800198c <main+0xf0>
        		  }
        	  }else{
        		  if(temperature<38){
 8001968:	4b21      	ldr	r3, [pc, #132]	@ (80019f0 <main+0x154>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4923      	ldr	r1, [pc, #140]	@ (80019fc <main+0x160>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fba6 	bl	80010c0 <__aeabi_fcmplt>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <main+0xf0>
        			  //turn the heater on
        			  HAL_GPIO_WritePin(GPIO_RELAY_GPIO_Port, GPIO_RELAY_Pin, 1);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001980:	481a      	ldr	r0, [pc, #104]	@ (80019ec <main+0x150>)
 8001982:	f002 f8ce 	bl	8003b22 <HAL_GPIO_WritePin>
        			  heater_state = 1;
 8001986:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <main+0x14c>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
        		  }

        	  }
        	  display_ssd1306(&startTime, "Incubating", temperature, heater_state);
 800198c:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <main+0x154>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <main+0x14c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f107 0008 	add.w	r0, r7, #8
 8001998:	4919      	ldr	r1, [pc, #100]	@ (8001a00 <main+0x164>)
 800199a:	f001 fa81 	bl	8002ea0 <display_ssd1306>

              break;
 800199e:	e015      	b.n	80019cc <main+0x130>
          case COMPLETED:
              //Tasks to perform in Complete state
        	  //21 days in seconds, 21*60*60*24 = 1814400

        	  if(heater_state){
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <main+0x14c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <main+0x11e>
        			  //turn the heater off if the heater is on in Preparing state
        			  HAL_GPIO_WritePin(GPIO_RELAY_GPIO_Port, GPIO_RELAY_Pin, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ae:	480f      	ldr	r0, [pc, #60]	@ (80019ec <main+0x150>)
 80019b0:	f002 f8b7 	bl	8003b22 <HAL_GPIO_WritePin>
        			  heater_state = 0;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <main+0x14c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
        		  }
        	  display_ssd1306(&time_completed, "Completed", temperature, heater_state);
 80019ba:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <main+0x154>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <main+0x14c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	1d38      	adds	r0, r7, #4
 80019c4:	490f      	ldr	r1, [pc, #60]	@ (8001a04 <main+0x168>)
 80019c6:	f001 fa6b 	bl	8002ea0 <display_ssd1306>

              break;
 80019ca:	bf00      	nop
      switch (global_var_control) {
 80019cc:	e78d      	b.n	80018ea <main+0x4e>
 80019ce:	bf00      	nop
 80019d0:	001baf81 	.word	0x001baf81
 80019d4:	10624dd3 	.word	0x10624dd3
 80019d8:	001baf82 	.word	0x001baf82
 80019dc:	20000298 	.word	0x20000298
 80019e0:	200002f0 	.word	0x200002f0
 80019e4:	20000384 	.word	0x20000384
 80019e8:	20000388 	.word	0x20000388
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	20000380 	.word	0x20000380
 80019f4:	0800a128 	.word	0x0800a128
 80019f8:	20000218 	.word	0x20000218
 80019fc:	42180000 	.word	0x42180000
 8001a00:	0800a134 	.word	0x0800a134
 8001a04:	0800a140 	.word	0x0800a140

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b090      	sub	sp, #64	@ 0x40
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0318 	add.w	r3, r7, #24
 8001a12:	2228      	movs	r2, #40	@ 0x28
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 fe1a 	bl	8007650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a46:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0318 	add.w	r3, r7, #24
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 fd4d 	bl	80044f0 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a5c:	f000 f9b2 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2302      	movs	r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 ffba 	bl	80049f4 <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a86:	f000 f99d 	bl	8001dc4 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3740      	adds	r7, #64	@ 0x40
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001a9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ae8 <MX_I2C1_Init+0x54>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa0:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <MX_I2C1_Init+0x58>)
 8001aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad0:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <MX_I2C1_Init+0x50>)
 8001ad2:	f002 f861 	bl	8003b98 <HAL_I2C_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001adc:	f000 f972 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000244 	.word	0x20000244
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	00061a80 	.word	0x00061a80

08001af0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001af4:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001af6:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <MX_SPI1_Init+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001afa:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001afc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b24:	2210      	movs	r2, #16
 8001b26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b34:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b3c:	220a      	movs	r2, #10
 8001b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <MX_SPI1_Init+0x64>)
 8001b42:	f003 f8d1 	bl	8004ce8 <HAL_SPI_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b4c:	f000 f93a 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000298 	.word	0x20000298
 8001b58:	40013000 	.word	0x40013000

08001b5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b78:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf8 <MX_TIM1_Init+0x9c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (72-1);
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b80:	2247      	movs	r2, #71	@ 0x47
 8001b82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ba4:	4813      	ldr	r0, [pc, #76]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001ba6:	f003 fb0d 	bl	80051c4 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f000 f908 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001bc2:	f003 fcf3 	bl	80055ac <HAL_TIM_ConfigClockSource>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bcc:	f000 f8fa 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <MX_TIM1_Init+0x98>)
 8001bde:	f003 fed1 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001be8:	f000 f8ec 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200002f0 	.word	0x200002f0
 8001bf8:	40012c00 	.word	0x40012c00

08001bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	463b      	mov	r3, r7
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c22:	2247      	movs	r2, #71	@ 0x47
 8001c24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c40:	4813      	ldr	r0, [pc, #76]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c42:	f003 fabf 	bl	80051c4 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c4c:	f000 f8ba 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480c      	ldr	r0, [pc, #48]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c5e:	f003 fca5 	bl	80055ac <HAL_TIM_ConfigClockSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c68:	f000 f8ac 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c74:	463b      	mov	r3, r7
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	@ (8001c90 <MX_TIM2_Init+0x94>)
 8001c7a:	f003 fe83 	bl	8005984 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c84:	f000 f89e 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000338 	.word	0x20000338

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a41      	ldr	r2, [pc, #260]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cae:	f043 0310 	orr.w	r3, r3, #16
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cc6:	f043 0320 	orr.w	r3, r3, #32
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b39      	ldr	r3, [pc, #228]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd8:	4b36      	ldr	r3, [pc, #216]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a35      	ldr	r2, [pc, #212]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b33      	ldr	r3, [pc, #204]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <MX_GPIO_Init+0x120>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA6_RCLK_GPIO_Port, PA6_RCLK_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2140      	movs	r1, #64	@ 0x40
 8001d0c:	482a      	ldr	r0, [pc, #168]	@ (8001db8 <MX_GPIO_Init+0x124>)
 8001d0e:	f001 ff08 	bl	8003b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB10_TEMP_GPIO_Port, PB10_TEMP_Pin, GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d18:	4828      	ldr	r0, [pc, #160]	@ (8001dbc <MX_GPIO_Init+0x128>)
 8001d1a:	f001 ff02 	bl	8003b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_RELAY_GPIO_Port, GPIO_RELAY_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d24:	4825      	ldr	r0, [pc, #148]	@ (8001dbc <MX_GPIO_Init+0x128>)
 8001d26:	f001 fefc 	bl	8003b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Control_Switch_Pin */
  GPIO_InitStruct.Pin = GPIO_Control_Switch_Pin;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d2e:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <MX_GPIO_Init+0x12c>)
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Control_Switch_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	481e      	ldr	r0, [pc, #120]	@ (8001db8 <MX_GPIO_Init+0x124>)
 8001d3e:	f001 fd55 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6_RCLK_Pin */
  GPIO_InitStruct.Pin = PA6_RCLK_Pin;
 8001d42:	2340      	movs	r3, #64	@ 0x40
 8001d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA6_RCLK_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	4817      	ldr	r0, [pc, #92]	@ (8001db8 <MX_GPIO_Init+0x124>)
 8001d5a:	f001 fd47 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10_TEMP_Pin */
  GPIO_InitStruct.Pin = PB10_TEMP_Pin;
 8001d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB10_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	4811      	ldr	r0, [pc, #68]	@ (8001dbc <MX_GPIO_Init+0x128>)
 8001d78:	f001 fd38 	bl	80037ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_RELAY_Pin */
  GPIO_InitStruct.Pin = GPIO_RELAY_Pin;
 8001d7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_RELAY_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4619      	mov	r1, r3
 8001d94:	4809      	ldr	r0, [pc, #36]	@ (8001dbc <MX_GPIO_Init+0x128>)
 8001d96:	f001 fd29 	bl	80037ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2008      	movs	r0, #8
 8001da0:	f001 fced 	bl	800377e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001da4:	2008      	movs	r0, #8
 8001da6:	f001 fd06 	bl	80037b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001daa:	bf00      	nop
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010800 	.word	0x40010800
 8001dbc:	40010c00 	.word	0x40010c00
 8001dc0:	10210000 	.word	0x10210000

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <Error_Handler+0x8>

08001dd0 <isInterrruptLocked>:
 */
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"
static uint8_t interrupt_lock =0;
uint8_t isInterrruptLocked(){
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

	return interrupt_lock;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	@ (8001de0 <isInterrruptLocked+0x10>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]

}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000389 	.word	0x20000389

08001de4 <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <ONEWIRE_DELAY+0x2c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001df6:	bf00      	nop
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <ONEWIRE_DELAY+0x2c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d9f9      	bls.n	8001df8 <ONEWIRE_DELAY+0x14>
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000338 	.word	0x20000338

08001e14 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	461a      	mov	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0412      	lsls	r2, r2, #16
 8001e28:	611a      	str	r2, [r3, #16]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889a      	ldrh	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	611a      	str	r2, [r3, #16]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f107 0208 	add.w	r2, r7, #8
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fcb9 	bl	80037ec <HAL_GPIO_Init>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001e8a:	2311      	movs	r3, #17
 8001e8c:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	889b      	ldrh	r3, [r3, #4]
 8001e9a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f107 0208 	add.w	r2, r7, #8
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fca0 	bl	80037ec <HAL_GPIO_Init>

}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8001ec2:	4812      	ldr	r0, [pc, #72]	@ (8001f0c <OneWire_Init+0x58>)
 8001ec4:	f003 f9ce 	bl	8005264 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff ffd4 	bl	8001e82 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff ffaa 	bl	8001e34 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8001ee0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ee4:	f001 fb50 	bl	8003588 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff ff93 	bl	8001e14 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8001eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ef2:	f001 fb49 	bl	8003588 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7ff ff9c 	bl	8001e34 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8001efc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f00:	f001 fb42 	bl	8003588 <HAL_Delay>
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000338 	.word	0x20000338

08001f10 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff7b 	bl	8001e14 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff ffaf 	bl	8001e82 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8001f24:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001f28:	f7ff ff5c 	bl	8001de4 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	f7ff ff59 	bl	8001de4 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	interrupt_lock = 1;
 8001f32:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <OneWire_Reset+0x60>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff89 	bl	8001e50 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001f3e:	2046      	movs	r0, #70	@ 0x46
 8001f40:	f7ff ff50 	bl	8001de4 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	889b      	ldrh	r3, [r3, #4]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f001 fdd0 	bl	8003af4 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]
	interrupt_lock = 0;
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <OneWire_Reset+0x60>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8001f5e:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8001f62:	f7ff ff3f 	bl	8001de4 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000389 	.word	0x20000389

08001f74 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]


	if (bit)
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d024      	beq.n	8001fd0 <OneWire_WriteBit+0x5c>
	{
		/* Set line low */
		interrupt_lock = 1;
 8001f86:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff41 	bl	8001e14 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ff75 	bl	8001e82 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8001f98:	200a      	movs	r0, #10
 8001f9a:	f7ff ff23 	bl	8001de4 <ONEWIRE_DELAY>
		interrupt_lock = 0;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

		/* Bit high */
		interrupt_lock = 1;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff50 	bl	8001e50 <ONEWIRE_INPUT>
		interrupt_lock = 0;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
		/* Wait for 55 us and release the line */

		ONEWIRE_DELAY(55);
 8001fb6:	2037      	movs	r0, #55	@ 0x37
 8001fb8:	f7ff ff14 	bl	8001de4 <ONEWIRE_DELAY>

		interrupt_lock = 1;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff44 	bl	8001e50 <ONEWIRE_INPUT>
		interrupt_lock = 0;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		interrupt_lock = 0;
	}


}
 8001fce:	e01d      	b.n	800200c <OneWire_WriteBit+0x98>
		interrupt_lock = 1;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ff1c 	bl	8001e14 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff50 	bl	8001e82 <ONEWIRE_OUTPUT>
		interrupt_lock = 0;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 8001fe8:	2041      	movs	r0, #65	@ 0x41
 8001fea:	f7ff fefb 	bl	8001de4 <ONEWIRE_DELAY>
		interrupt_lock = 1;
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff2b 	bl	8001e50 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8001ffa:	2005      	movs	r0, #5
 8001ffc:	f7ff fef2 	bl	8001de4 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff25 	bl	8001e50 <ONEWIRE_INPUT>
		interrupt_lock = 0;
 8002006:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <OneWire_WriteBit+0xa0>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000389 	.word	0x20000389

08002018 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]

	/* Line low */

	interrupt_lock = 1;
 8002024:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <OneWire_ReadBit+0x78>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fef2 	bl	8001e14 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff26 	bl	8001e82 <ONEWIRE_OUTPUT>

	ONEWIRE_DELAY(2);
 8002036:	2002      	movs	r0, #2
 8002038:	f7ff fed4 	bl	8001de4 <ONEWIRE_DELAY>
	interrupt_lock = 0;
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <OneWire_ReadBit+0x78>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]

	/* Release line */
	interrupt_lock = 1;
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <OneWire_ReadBit+0x78>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff01 	bl	8001e50 <ONEWIRE_INPUT>

	ONEWIRE_DELAY(10);
 800204e:	200a      	movs	r0, #10
 8002050:	f7ff fec8 	bl	8001de4 <ONEWIRE_DELAY>
	interrupt_lock = 0;
 8002054:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <OneWire_ReadBit+0x78>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]


	/* Read line value */
	interrupt_lock = 1;
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <OneWire_ReadBit+0x78>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f001 fd42 	bl	8003af4 <HAL_GPIO_ReadPin>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <OneWire_ReadBit+0x62>
		/* Bit is HIGH */
		bit = 1;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	interrupt_lock = 0;
 800207a:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <OneWire_ReadBit+0x78>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 8002080:	2032      	movs	r0, #50	@ 0x32
 8002082:	f7ff feaf 	bl	8001de4 <ONEWIRE_DELAY>


	/* Return bit value */
	return bit;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000389 	.word	0x20000389

08002094 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80020a0:	2308      	movs	r3, #8
 80020a2:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80020a4:	e00a      	b.n	80020bc <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff5f 	bl	8001f74 <OneWire_WriteBit>
		byte >>= 1;
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	73fa      	strb	r2, [r7, #15]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ef      	bne.n	80020a6 <OneWire_WriteByte+0x12>
	}
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80020d8:	2308      	movs	r3, #8
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	2300      	movs	r3, #0
 80020de:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80020e0:	e00d      	b.n	80020fe <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80020e2:	7bbb      	ldrb	r3, [r7, #14]
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff95 	bl	8002018 <OneWire_ReadBit>
 80020ee:	4603      	mov	r3, r0
 80020f0:	01db      	lsls	r3, r3, #7
 80020f2:	b25a      	sxtb	r2, r3
 80020f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	1e5a      	subs	r2, r3, #1
 8002102:	73fa      	strb	r2, [r7, #15]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ec      	bne.n	80020e2 <OneWire_ReadByte+0x12>
	}

	return byte;
 8002108:	7bbb      	ldrb	r3, [r7, #14]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f809 	bl	8002132 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002120:	21f0      	movs	r1, #240	@ 0xf0
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f817 	bl	8002156 <OneWire_Search>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <OneWire_ResetSearch>:
uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
}

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	71da      	strb	r2, [r3, #7]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800216e:	2301      	movs	r3, #1
 8002170:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7a1b      	ldrb	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 809a 	bne.w	80022b4 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fec5 	bl	8001f10 <OneWire_Reset>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	71da      	strb	r2, [r3, #7]
			return 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e09b      	b.n	80022da <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff74 	bl	8002094 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff33 	bl	8002018 <OneWire_ReadBit>
 80021b2:	4603      	mov	r3, r0
 80021b4:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ff2e 	bl	8002018 <OneWire_ReadBit>
 80021bc:	4603      	mov	r3, r0
 80021be:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 80021c0:	7a7b      	ldrb	r3, [r7, #9]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d102      	bne.n	80021cc <OneWire_Search+0x76>
 80021c6:	7a3b      	ldrb	r3, [r7, #8]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d064      	beq.n	8002296 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80021cc:	7a7a      	ldrb	r2, [r7, #9]
 80021ce:	7a3b      	ldrb	r3, [r7, #8]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d002      	beq.n	80021da <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80021d4:	7a7b      	ldrb	r3, [r7, #9]
 80021d6:	72bb      	strb	r3, [r7, #10]
 80021d8:	e026      	b.n	8002228 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	799b      	ldrb	r3, [r3, #6]
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d20d      	bcs.n	8002200 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	7a5a      	ldrb	r2, [r3, #9]
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	4013      	ands	r3, r2
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	72bb      	strb	r3, [r7, #10]
 80021fe:	e008      	b.n	8002212 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	799b      	ldrb	r3, [r3, #6]
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	429a      	cmp	r2, r3
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8002212:	7abb      	ldrb	r3, [r7, #10]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 800221c:	7bbb      	ldrb	r3, [r7, #14]
 800221e:	2b08      	cmp	r3, #8
 8002220:	d802      	bhi.n	8002228 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7bba      	ldrb	r2, [r7, #14]
 8002226:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8002228:	7abb      	ldrb	r3, [r7, #10]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10c      	bne.n	8002248 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 800222e:	7b7b      	ldrb	r3, [r7, #13]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	7a59      	ldrb	r1, [r3, #9]
 8002236:	7b7b      	ldrb	r3, [r7, #13]
 8002238:	7afa      	ldrb	r2, [r7, #11]
 800223a:	430a      	orrs	r2, r1
 800223c:	b2d1      	uxtb	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	460a      	mov	r2, r1
 8002244:	725a      	strb	r2, [r3, #9]
 8002246:	e010      	b.n	800226a <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002248:	7b7b      	ldrb	r3, [r7, #13]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	7a5b      	ldrb	r3, [r3, #9]
 8002250:	b25a      	sxtb	r2, r3
 8002252:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002256:	43db      	mvns	r3, r3
 8002258:	b25b      	sxtb	r3, r3
 800225a:	4013      	ands	r3, r2
 800225c:	b25a      	sxtb	r2, r3
 800225e:	7b7b      	ldrb	r3, [r7, #13]
 8002260:	b2d1      	uxtb	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	460a      	mov	r2, r1
 8002268:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800226a:	7abb      	ldrb	r3, [r7, #10]
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff fe80 	bl	8001f74 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800227a:	7afb      	ldrb	r3, [r7, #11]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8002286:	7b7b      	ldrb	r3, [r7, #13]
 8002288:	3301      	adds	r3, #1
 800228a:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 800228c:	2301      	movs	r3, #1
 800228e:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8002290:	7b7b      	ldrb	r3, [r7, #13]
 8002292:	2b07      	cmp	r3, #7
 8002294:	d98a      	bls.n	80021ac <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	2b40      	cmp	r3, #64	@ 0x40
 800229a:	d90b      	bls.n	80022b4 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7bba      	ldrb	r2, [r7, #14]
 80022a0:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	799b      	ldrb	r3, [r3, #6]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80022b4:	7b3b      	ldrb	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <OneWire_Search+0x16c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7a5b      	ldrb	r3, [r3, #9]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10a      	bne.n	80022d8 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80022ec:	2155      	movs	r1, #85	@ 0x55
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff fed0 	bl	8002094 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e00a      	b.n	8002310 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fec5 	bl	8002094 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	3301      	adds	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b07      	cmp	r3, #7
 8002314:	d9f1      	bls.n	80022fa <OneWire_SelectWithPointer+0x18>
	}
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e00a      	b.n	8002346 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	6839      	ldr	r1, [r7, #0]
 8002336:	440b      	add	r3, r1
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	440a      	add	r2, r1
 800233c:	7a52      	ldrb	r2, [r2, #9]
 800233e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	3301      	adds	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b07      	cmp	r3, #7
 800234a:	d9f1      	bls.n	8002330 <OneWire_GetFullROM+0x10>
	}
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8002368:	e022      	b.n	80023b0 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8002374:	2308      	movs	r3, #8
 8002376:	737b      	strb	r3, [r7, #13]
 8002378:	e017      	b.n	80023aa <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	7bbb      	ldrb	r3, [r7, #14]
 800237e:	4053      	eors	r3, r2
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 800238e:	7b3b      	ldrb	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 800239a:	43db      	mvns	r3, r3
 800239c:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 800239e:	7bbb      	ldrb	r3, [r7, #14]
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80023a4:	7b7b      	ldrb	r3, [r7, #13]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	737b      	strb	r3, [r7, #13]
 80023aa:	7b7b      	ldrb	r3, [r7, #13]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e4      	bne.n	800237a <OneWire_CRC8+0x22>
	while (len--) {
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	70fa      	strb	r2, [r7, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1d7      	bne.n	800236a <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
	...

080023d4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af04      	add	r7, sp, #16
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2301      	movs	r3, #1
 80023ee:	2200      	movs	r2, #0
 80023f0:	2178      	movs	r1, #120	@ 0x78
 80023f2:	4803      	ldr	r0, [pc, #12]	@ (8002400 <ssd1306_WriteCommand+0x2c>)
 80023f4:	f001 fd14 	bl	8003e20 <HAL_I2C_Mem_Write>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000244 	.word	0x20000244

08002404 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af04      	add	r7, sp, #16
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002416:	9202      	str	r2, [sp, #8]
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	2240      	movs	r2, #64	@ 0x40
 8002422:	2178      	movs	r1, #120	@ 0x78
 8002424:	4803      	ldr	r0, [pc, #12]	@ (8002434 <ssd1306_WriteData+0x30>)
 8002426:	f001 fcfb 	bl	8003e20 <HAL_I2C_Mem_Write>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000244 	.word	0x20000244

08002438 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800243c:	f7ff ffc3 	bl	80023c6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002440:	2064      	movs	r0, #100	@ 0x64
 8002442:	f001 f8a1 	bl	8003588 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002446:	2000      	movs	r0, #0
 8002448:	f000 fa2e 	bl	80028a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800244c:	2020      	movs	r0, #32
 800244e:	f7ff ffc1 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff ffbe 	bl	80023d4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002458:	20b0      	movs	r0, #176	@ 0xb0
 800245a:	f7ff ffbb 	bl	80023d4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800245e:	20c8      	movs	r0, #200	@ 0xc8
 8002460:	f7ff ffb8 	bl	80023d4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff ffb5 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800246a:	2010      	movs	r0, #16
 800246c:	f7ff ffb2 	bl	80023d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002470:	2040      	movs	r0, #64	@ 0x40
 8002472:	f7ff ffaf 	bl	80023d4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002476:	20ff      	movs	r0, #255	@ 0xff
 8002478:	f000 fa03 	bl	8002882 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800247c:	20a1      	movs	r0, #161	@ 0xa1
 800247e:	f7ff ffa9 	bl	80023d4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002482:	20a6      	movs	r0, #166	@ 0xa6
 8002484:	f7ff ffa6 	bl	80023d4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002488:	20a8      	movs	r0, #168	@ 0xa8
 800248a:	f7ff ffa3 	bl	80023d4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800248e:	203f      	movs	r0, #63	@ 0x3f
 8002490:	f7ff ffa0 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002494:	20a4      	movs	r0, #164	@ 0xa4
 8002496:	f7ff ff9d 	bl	80023d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800249a:	20d3      	movs	r0, #211	@ 0xd3
 800249c:	f7ff ff9a 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7ff ff97 	bl	80023d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80024a6:	20d5      	movs	r0, #213	@ 0xd5
 80024a8:	f7ff ff94 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80024ac:	20f0      	movs	r0, #240	@ 0xf0
 80024ae:	f7ff ff91 	bl	80023d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80024b2:	20d9      	movs	r0, #217	@ 0xd9
 80024b4:	f7ff ff8e 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80024b8:	2022      	movs	r0, #34	@ 0x22
 80024ba:	f7ff ff8b 	bl	80023d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024be:	20da      	movs	r0, #218	@ 0xda
 80024c0:	f7ff ff88 	bl	80023d4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80024c4:	2012      	movs	r0, #18
 80024c6:	f7ff ff85 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024ca:	20db      	movs	r0, #219	@ 0xdb
 80024cc:	f7ff ff82 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024d0:	2020      	movs	r0, #32
 80024d2:	f7ff ff7f 	bl	80023d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024d6:	208d      	movs	r0, #141	@ 0x8d
 80024d8:	f7ff ff7c 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024dc:	2014      	movs	r0, #20
 80024de:	f7ff ff79 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80024e2:	2001      	movs	r0, #1
 80024e4:	f000 f9e0 	bl	80028a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f000 f80f 	bl	800250c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024ee:	f000 f825 	bl	800253c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <ssd1306_Init+0xd0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <ssd1306_Init+0xd0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80024fe:	4b02      	ldr	r3, [pc, #8]	@ (8002508 <ssd1306_Init+0xd0>)
 8002500:	2201      	movs	r2, #1
 8002502:	711a      	strb	r2, [r3, #4]
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000078c 	.word	0x2000078c

0800250c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <ssd1306_Fill+0x14>
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <ssd1306_Fill+0x16>
 8002520:	23ff      	movs	r3, #255	@ 0xff
 8002522:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002526:	4619      	mov	r1, r3
 8002528:	4803      	ldr	r0, [pc, #12]	@ (8002538 <ssd1306_Fill+0x2c>)
 800252a:	f005 f891 	bl	8007650 <memset>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000038c 	.word	0x2000038c

0800253c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002542:	2300      	movs	r3, #0
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	e016      	b.n	8002576 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	3b50      	subs	r3, #80	@ 0x50
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff40 	bl	80023d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002554:	2000      	movs	r0, #0
 8002556:	f7ff ff3d 	bl	80023d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800255a:	2010      	movs	r0, #16
 800255c:	f7ff ff3a 	bl	80023d4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	01db      	lsls	r3, r3, #7
 8002564:	4a08      	ldr	r2, [pc, #32]	@ (8002588 <ssd1306_UpdateScreen+0x4c>)
 8002566:	4413      	add	r3, r2
 8002568:	2180      	movs	r1, #128	@ 0x80
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff4a 	bl	8002404 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	3301      	adds	r3, #1
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b07      	cmp	r3, #7
 800257a:	d9e5      	bls.n	8002548 <ssd1306_UpdateScreen+0xc>
    }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000038c 	.word	0x2000038c

0800258c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	460b      	mov	r3, r1
 8002598:	71bb      	strb	r3, [r7, #6]
 800259a:	4613      	mov	r3, r2
 800259c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db3d      	blt.n	8002622 <ssd1306_DrawPixel+0x96>
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80025aa:	d83a      	bhi.n	8002622 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d11a      	bne.n	80025e8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	79bb      	ldrb	r3, [r7, #6]
 80025b6:	08db      	lsrs	r3, r3, #3
 80025b8:	b2d8      	uxtb	r0, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	01db      	lsls	r3, r3, #7
 80025be:	4413      	add	r3, r2
 80025c0:	4a1a      	ldr	r2, [pc, #104]	@ (800262c <ssd1306_DrawPixel+0xa0>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	b25a      	sxtb	r2, r3
 80025c6:	79bb      	ldrb	r3, [r7, #6]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	2101      	movs	r1, #1
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b259      	sxtb	r1, r3
 80025d8:	79fa      	ldrb	r2, [r7, #7]
 80025da:	4603      	mov	r3, r0
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	4413      	add	r3, r2
 80025e0:	b2c9      	uxtb	r1, r1
 80025e2:	4a12      	ldr	r2, [pc, #72]	@ (800262c <ssd1306_DrawPixel+0xa0>)
 80025e4:	54d1      	strb	r1, [r2, r3]
 80025e6:	e01d      	b.n	8002624 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025e8:	79fa      	ldrb	r2, [r7, #7]
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	08db      	lsrs	r3, r3, #3
 80025ee:	b2d8      	uxtb	r0, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	4413      	add	r3, r2
 80025f6:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <ssd1306_DrawPixel+0xa0>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	b25a      	sxtb	r2, r3
 80025fc:	79bb      	ldrb	r3, [r7, #6]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	b25b      	sxtb	r3, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	b25b      	sxtb	r3, r3
 800260e:	4013      	ands	r3, r2
 8002610:	b259      	sxtb	r1, r3
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	4603      	mov	r3, r0
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	4413      	add	r3, r2
 800261a:	b2c9      	uxtb	r1, r1
 800261c:	4a03      	ldr	r2, [pc, #12]	@ (800262c <ssd1306_DrawPixel+0xa0>)
 800261e:	54d1      	strb	r1, [r2, r3]
 8002620:	e000      	b.n	8002624 <ssd1306_DrawPixel+0x98>
        return;
 8002622:	bf00      	nop
    }
}
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	2000038c 	.word	0x2000038c

08002630 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b089      	sub	sp, #36	@ 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	4604      	mov	r4, r0
 8002638:	4638      	mov	r0, r7
 800263a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800263e:	4623      	mov	r3, r4
 8002640:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b1f      	cmp	r3, #31
 8002646:	d902      	bls.n	800264e <ssd1306_WriteChar+0x1e>
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b7e      	cmp	r3, #126	@ 0x7e
 800264c:	d901      	bls.n	8002652 <ssd1306_WriteChar+0x22>
        return 0;
 800264e:	2300      	movs	r3, #0
 8002650:	e077      	b.n	8002742 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002652:	4b3e      	ldr	r3, [pc, #248]	@ (800274c <ssd1306_WriteChar+0x11c>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	783b      	ldrb	r3, [r7, #0]
 800265a:	4413      	add	r3, r2
 800265c:	2b80      	cmp	r3, #128	@ 0x80
 800265e:	dc06      	bgt.n	800266e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002660:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <ssd1306_WriteChar+0x11c>)
 8002662:	885b      	ldrh	r3, [r3, #2]
 8002664:	461a      	mov	r2, r3
 8002666:	787b      	ldrb	r3, [r7, #1]
 8002668:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800266a:	2b40      	cmp	r3, #64	@ 0x40
 800266c:	dd01      	ble.n	8002672 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800266e:	2300      	movs	r3, #0
 8002670:	e067      	b.n	8002742 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	e04e      	b.n	8002716 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	3b20      	subs	r3, #32
 800267e:	7879      	ldrb	r1, [r7, #1]
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4619      	mov	r1, r3
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	440b      	add	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e036      	b.n	8002706 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <ssd1306_WriteChar+0x11c>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	b2d8      	uxtb	r0, r3
 80026b6:	4b25      	ldr	r3, [pc, #148]	@ (800274c <ssd1306_WriteChar+0x11c>)
 80026b8:	885b      	ldrh	r3, [r3, #2]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7ff ff5f 	bl	800258c <ssd1306_DrawPixel>
 80026ce:	e017      	b.n	8002700 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <ssd1306_WriteChar+0x11c>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	b2d8      	uxtb	r0, r3
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <ssd1306_WriteChar+0x11c>)
 80026e0:	885b      	ldrh	r3, [r3, #2]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	b2d9      	uxtb	r1, r3
 80026ec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	f7ff ff46 	bl	800258c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3301      	adds	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	783b      	ldrb	r3, [r7, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4293      	cmp	r3, r2
 800270e:	d3c3      	bcc.n	8002698 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3301      	adds	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	787b      	ldrb	r3, [r7, #1]
 8002718:	461a      	mov	r2, r3
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	4293      	cmp	r3, r2
 800271e:	d3ab      	bcc.n	8002678 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002720:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <ssd1306_WriteChar+0x11c>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	2a00      	cmp	r2, #0
 8002728:	d005      	beq.n	8002736 <ssd1306_WriteChar+0x106>
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	3a20      	subs	r2, #32
 8002730:	440a      	add	r2, r1
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	e000      	b.n	8002738 <ssd1306_WriteChar+0x108>
 8002736:	783a      	ldrb	r2, [r7, #0]
 8002738:	4413      	add	r3, r2
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b03      	ldr	r3, [pc, #12]	@ (800274c <ssd1306_WriteChar+0x11c>)
 800273e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop
 800274c:	2000078c 	.word	0x2000078c

08002750 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	4638      	mov	r0, r7
 800275a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800275e:	e013      	b.n	8002788 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	7818      	ldrb	r0, [r3, #0]
 8002764:	7e3b      	ldrb	r3, [r7, #24]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	463b      	mov	r3, r7
 800276a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276c:	f7ff ff60 	bl	8002630 <ssd1306_WriteChar>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d002      	beq.n	8002782 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	e008      	b.n	8002794 <ssd1306_WriteString+0x44>
        }
        str++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e7      	bne.n	8002760 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	781b      	ldrb	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	460a      	mov	r2, r1
 80027a6:	71fb      	strb	r3, [r7, #7]
 80027a8:	4613      	mov	r3, r2
 80027aa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <ssd1306_SetCursor+0x2c>)
 80027b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <ssd1306_SetCursor+0x2c>)
 80027ba:	805a      	strh	r2, [r3, #2]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000078c 	.word	0x2000078c

080027cc <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	603a      	str	r2, [r7, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
 80027da:	460b      	mov	r3, r1
 80027dc:	71bb      	strb	r3, [r7, #6]
 80027de:	4613      	mov	r3, r2
 80027e0:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80027e2:	797b      	ldrb	r3, [r7, #5]
 80027e4:	3307      	adds	r3, #7
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	da00      	bge.n	80027ec <ssd1306_DrawBitmap+0x20>
 80027ea:	3307      	adds	r3, #7
 80027ec:	10db      	asrs	r3, r3, #3
 80027ee:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db3e      	blt.n	800287a <ssd1306_DrawBitmap+0xae>
 80027fc:	79bb      	ldrb	r3, [r7, #6]
 80027fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002800:	d83b      	bhi.n	800287a <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002802:	2300      	movs	r3, #0
 8002804:	73bb      	strb	r3, [r7, #14]
 8002806:	e033      	b.n	8002870 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002808:	2300      	movs	r3, #0
 800280a:	737b      	strb	r3, [r7, #13]
 800280c:	e026      	b.n	800285c <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800280e:	7b7b      	ldrb	r3, [r7, #13]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
 800281e:	e00d      	b.n	800283c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	7b7a      	ldrb	r2, [r7, #13]
 800282c:	08d2      	lsrs	r2, r2, #3
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4413      	add	r3, r2
 8002832:	461a      	mov	r2, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 800283c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	da08      	bge.n	8002856 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002844:	79fa      	ldrb	r2, [r7, #7]
 8002846:	7b7b      	ldrb	r3, [r7, #13]
 8002848:	4413      	add	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	7f3a      	ldrb	r2, [r7, #28]
 800284e:	79b9      	ldrb	r1, [r7, #6]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fe9b 	bl	800258c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002856:	7b7b      	ldrb	r3, [r7, #13]
 8002858:	3301      	adds	r3, #1
 800285a:	737b      	strb	r3, [r7, #13]
 800285c:	7b7a      	ldrb	r2, [r7, #13]
 800285e:	797b      	ldrb	r3, [r7, #5]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3d4      	bcc.n	800280e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002864:	7bbb      	ldrb	r3, [r7, #14]
 8002866:	3301      	adds	r3, #1
 8002868:	73bb      	strb	r3, [r7, #14]
 800286a:	79bb      	ldrb	r3, [r7, #6]
 800286c:	3301      	adds	r3, #1
 800286e:	71bb      	strb	r3, [r7, #6]
 8002870:	7bba      	ldrb	r2, [r7, #14]
 8002872:	7e3b      	ldrb	r3, [r7, #24]
 8002874:	429a      	cmp	r2, r3
 8002876:	d3c7      	bcc.n	8002808 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002878:	e000      	b.n	800287c <ssd1306_DrawBitmap+0xb0>
        return;
 800287a:	bf00      	nop
}
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800288c:	2381      	movs	r3, #129	@ 0x81
 800288e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fd9e 	bl	80023d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fd9a 	bl	80023d4 <ssd1306_WriteCommand>
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80028b8:	23af      	movs	r3, #175	@ 0xaf
 80028ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80028bc:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <ssd1306_SetDisplayOn+0x38>)
 80028be:	2201      	movs	r2, #1
 80028c0:	715a      	strb	r2, [r3, #5]
 80028c2:	e004      	b.n	80028ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80028c4:	23ae      	movs	r3, #174	@ 0xae
 80028c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <ssd1306_SetDisplayOn+0x38>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fd7f 	bl	80023d4 <ssd1306_WriteCommand>
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000078c 	.word	0x2000078c

080028e4 <ssd1306_draw_egg_shaking>:
*/
}



void ssd1306_draw_egg_shaking(){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af02      	add	r7, sp, #8
	//egg standing still
    ssd1306_Fill(Black);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7ff fe0e 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,egg_centre_63x64,63,64,White);
 80028f0:	2301      	movs	r3, #1
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2340      	movs	r3, #64	@ 0x40
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	233f      	movs	r3, #63	@ 0x3f
 80028fa:	4a46      	ldr	r2, [pc, #280]	@ (8002a14 <ssd1306_draw_egg_shaking+0x130>)
 80028fc:	2100      	movs	r1, #0
 80028fe:	2020      	movs	r0, #32
 8002900:	f7ff ff64 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002904:	f7ff fe1a 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8002908:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800290c:	f000 fe3c 	bl	8003588 <HAL_Delay>

    //Egg shaking starts
    ssd1306_Fill(Black);
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff fdfb 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(39,0,egg_tilt_left1_49x64,49,64,White);
 8002916:	2301      	movs	r3, #1
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2340      	movs	r3, #64	@ 0x40
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2331      	movs	r3, #49	@ 0x31
 8002920:	4a3d      	ldr	r2, [pc, #244]	@ (8002a18 <ssd1306_draw_egg_shaking+0x134>)
 8002922:	2100      	movs	r1, #0
 8002924:	2027      	movs	r0, #39	@ 0x27
 8002926:	f7ff ff51 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800292a:	f7ff fe07 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(200);
 800292e:	20c8      	movs	r0, #200	@ 0xc8
 8002930:	f000 fe2a 	bl	8003588 <HAL_Delay>

    ssd1306_Fill(Black);
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff fde9 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(35,0,egg_tilt_left2_57x64,57,64,White);
 800293a:	2301      	movs	r3, #1
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	2340      	movs	r3, #64	@ 0x40
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2339      	movs	r3, #57	@ 0x39
 8002944:	4a35      	ldr	r2, [pc, #212]	@ (8002a1c <ssd1306_draw_egg_shaking+0x138>)
 8002946:	2100      	movs	r1, #0
 8002948:	2023      	movs	r0, #35	@ 0x23
 800294a:	f7ff ff3f 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800294e:	f7ff fdf5 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(200);
 8002952:	20c8      	movs	r0, #200	@ 0xc8
 8002954:	f000 fe18 	bl	8003588 <HAL_Delay>

    ssd1306_Fill(Black);
 8002958:	2000      	movs	r0, #0
 800295a:	f7ff fdd7 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,egg_centre_63x64,63,64,White);
 800295e:	2301      	movs	r3, #1
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2340      	movs	r3, #64	@ 0x40
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	233f      	movs	r3, #63	@ 0x3f
 8002968:	4a2a      	ldr	r2, [pc, #168]	@ (8002a14 <ssd1306_draw_egg_shaking+0x130>)
 800296a:	2100      	movs	r1, #0
 800296c:	2020      	movs	r0, #32
 800296e:	f7ff ff2d 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002972:	f7ff fde3 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(200);
 8002976:	20c8      	movs	r0, #200	@ 0xc8
 8002978:	f000 fe06 	bl	8003588 <HAL_Delay>

    ssd1306_Fill(Black);
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff fdc5 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(37,0,egg_tilt_right1_53x64,53,64,White);
 8002982:	2301      	movs	r3, #1
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2340      	movs	r3, #64	@ 0x40
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2335      	movs	r3, #53	@ 0x35
 800298c:	4a24      	ldr	r2, [pc, #144]	@ (8002a20 <ssd1306_draw_egg_shaking+0x13c>)
 800298e:	2100      	movs	r1, #0
 8002990:	2025      	movs	r0, #37	@ 0x25
 8002992:	f7ff ff1b 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002996:	f7ff fdd1 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(200);
 800299a:	20c8      	movs	r0, #200	@ 0xc8
 800299c:	f000 fdf4 	bl	8003588 <HAL_Delay>

    ssd1306_Fill(Black);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff fdb3 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(40,0,egg_tilt_right2_48x64,48,64,White);
 80029a6:	2301      	movs	r3, #1
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2340      	movs	r3, #64	@ 0x40
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2330      	movs	r3, #48	@ 0x30
 80029b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a24 <ssd1306_draw_egg_shaking+0x140>)
 80029b2:	2100      	movs	r1, #0
 80029b4:	2028      	movs	r0, #40	@ 0x28
 80029b6:	f7ff ff09 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80029ba:	f7ff fdbf 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(200);
 80029be:	20c8      	movs	r0, #200	@ 0xc8
 80029c0:	f000 fde2 	bl	8003588 <HAL_Delay>

    ssd1306_Fill(Black);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff fda1 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(37,0,egg_tilt_right1_53x64,53,64,White);
 80029ca:	2301      	movs	r3, #1
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2340      	movs	r3, #64	@ 0x40
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2335      	movs	r3, #53	@ 0x35
 80029d4:	4a12      	ldr	r2, [pc, #72]	@ (8002a20 <ssd1306_draw_egg_shaking+0x13c>)
 80029d6:	2100      	movs	r1, #0
 80029d8:	2025      	movs	r0, #37	@ 0x25
 80029da:	f7ff fef7 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80029de:	f7ff fdad 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(200);
 80029e2:	20c8      	movs	r0, #200	@ 0xc8
 80029e4:	f000 fdd0 	bl	8003588 <HAL_Delay>

    //egg standing still
    ssd1306_Fill(Black);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff fd8f 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,egg_centre_63x64 ,63,64,White);
 80029ee:	2301      	movs	r3, #1
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2340      	movs	r3, #64	@ 0x40
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	233f      	movs	r3, #63	@ 0x3f
 80029f8:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <ssd1306_draw_egg_shaking+0x130>)
 80029fa:	2100      	movs	r1, #0
 80029fc:	2020      	movs	r0, #32
 80029fe:	f7ff fee5 	bl	80027cc <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002a02:	f7ff fd9b 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 8002a06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a0a:	f000 fdbd 	bl	8003588 <HAL_Delay>

}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	0800b6f8 	.word	0x0800b6f8
 8002a18:	0800b8f8 	.word	0x0800b8f8
 8002a1c:	0800bab8 	.word	0x0800bab8
 8002a20:	0800bcb8 	.word	0x0800bcb8
 8002a24:	0800be78 	.word	0x0800be78

08002a28 <ssd1306_draw_egg_breaking>:

void ssd1306_draw_egg_breaking(){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
    //egg breaking
    int x = 44;
 8002a2e:	232c      	movs	r3, #44	@ 0x2c
 8002a30:	617b      	str	r3, [r7, #20]
    int y = 30;
 8002a32:	231e      	movs	r3, #30
 8002a34:	607b      	str	r3, [r7, #4]
    int crack_height = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
    int direction = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
    int buffer = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]

    ssd1306_SetCursor(35, 55);
 8002a42:	2137      	movs	r1, #55	@ 0x37
 8002a44:	2023      	movs	r0, #35	@ 0x23
 8002a46:	f7ff fea9 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Hatching..", Font_6x8, Black);
 8002a4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ad4 <ssd1306_draw_egg_breaking+0xac>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	9200      	str	r2, [sp, #0]
 8002a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a52:	4821      	ldr	r0, [pc, #132]	@ (8002ad8 <ssd1306_draw_egg_breaking+0xb0>)
 8002a54:	f7ff fe7c 	bl	8002750 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002a58:	f7ff fd70 	bl	800253c <ssd1306_UpdateScreen>

    //draw from 30 < y < 33
    // to make y fluctuate from 30~33, use an equation y = y + buffer+ crack_height*direction
    // Y must be going from 30 to 33, and come back to 30 again and repeat. (30 - 31 - 32 - 33 - 32 - 31 - 30 * n times)

    while(x<84){
 8002a5c:	e031      	b.n	8002ac2 <ssd1306_draw_egg_breaking+0x9a>
        ssd1306_DrawPixel(x, y + buffer+ crack_height*direction, Black);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	b2c9      	uxtb	r1, r1
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2200      	movs	r2, #0
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7ff fd82 	bl	800258c <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8002a88:	f7ff fd58 	bl	800253c <ssd1306_UpdateScreen>
        HAL_Delay(50);
 8002a8c:	2032      	movs	r0, #50	@ 0x32
 8002a8e:	f000 fd7b 	bl	8003588 <HAL_Delay>

        x++;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
        crack_height++;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
        if(crack_height ==4){
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d10e      	bne.n	8002ac2 <ssd1306_draw_egg_breaking+0x9a>
        	crack_height =0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]

        	if(direction ==1){
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <ssd1306_draw_egg_breaking+0x92>
        		direction =-1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ab2:	60fb      	str	r3, [r7, #12]
        		buffer =3;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	e003      	b.n	8002ac2 <ssd1306_draw_egg_breaking+0x9a>
        	}
        	else{
        		direction =1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
        		buffer =0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
    while(x<84){
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b53      	cmp	r3, #83	@ 0x53
 8002ac6:	ddca      	ble.n	8002a5e <ssd1306_draw_egg_breaking+0x36>



    }

}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	0800b6e0 	.word	0x0800b6e0
 8002ad8:	0800a214 	.word	0x0800a214

08002adc <ssd1306_draw_egg_hatching>:

void ssd1306_draw_egg_hatching(){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af02      	add	r7, sp, #8
    HAL_Delay(3000);
 8002ae2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ae6:	f000 fd4f 	bl	8003588 <HAL_Delay>
    ssd1306_Fill(Black);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff fd0e 	bl	800250c <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,egg_hatching_128x64,128,64,White);
 8002af0:	2301      	movs	r3, #1
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	2340      	movs	r3, #64	@ 0x40
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	4a11      	ldr	r2, [pc, #68]	@ (8002b40 <ssd1306_draw_egg_hatching+0x64>)
 8002afc:	2100      	movs	r1, #0
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7ff fe64 	bl	80027cc <ssd1306_DrawBitmap>

    ssd1306_SetCursor(0, 45);
 8002b04:	212d      	movs	r1, #45	@ 0x2d
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7ff fe48 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Your little ones' ", Font_6x8, Black);
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <ssd1306_draw_egg_hatching+0x68>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	9200      	str	r2, [sp, #0]
 8002b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b14:	480c      	ldr	r0, [pc, #48]	@ (8002b48 <ssd1306_draw_egg_hatching+0x6c>)
 8002b16:	f7ff fe1b 	bl	8002750 <ssd1306_WriteString>
    ssd1306_SetCursor(45, 55);
 8002b1a:	2137      	movs	r1, #55	@ 0x37
 8002b1c:	202d      	movs	r0, #45	@ 0x2d
 8002b1e:	f7ff fe3d 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("best start", Font_6x8, Black);
 8002b22:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <ssd1306_draw_egg_hatching+0x68>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	9200      	str	r2, [sp, #0]
 8002b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b2a:	4808      	ldr	r0, [pc, #32]	@ (8002b4c <ssd1306_draw_egg_hatching+0x70>)
 8002b2c:	f7ff fe10 	bl	8002750 <ssd1306_WriteString>



    ssd1306_UpdateScreen();
 8002b30:	f7ff fd04 	bl	800253c <ssd1306_UpdateScreen>

    ssd1306_UpdateScreen();
 8002b34:	f7ff fd02 	bl	800253c <ssd1306_UpdateScreen>



}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	0800bff8 	.word	0x0800bff8
 8002b44:	0800b6e0 	.word	0x0800b6e0
 8002b48:	0800a220 	.word	0x0800a220
 8002b4c:	0800a234 	.word	0x0800a234

08002b50 <ssd1306_egg_incubator_booting>:

void ssd1306_egg_incubator_booting(){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8002b54:	f7ff fc70 	bl	8002438 <ssd1306_Init>
	ssd1306_draw_egg_shaking();
 8002b58:	f7ff fec4 	bl	80028e4 <ssd1306_draw_egg_shaking>
	ssd1306_draw_egg_shaking();
 8002b5c:	f7ff fec2 	bl	80028e4 <ssd1306_draw_egg_shaking>
	ssd1306_draw_egg_breaking();
 8002b60:	f7ff ff62 	bl	8002a28 <ssd1306_draw_egg_breaking>
	ssd1306_draw_egg_hatching();
 8002b64:	f7ff ffba 	bl	8002adc <ssd1306_draw_egg_hatching>
	HAL_Delay(2000);
 8002b68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b6c:	f000 fd0c 	bl	8003588 <HAL_Delay>
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <ssd1306_show_egg_incubator_state_first_page>:

void ssd1306_show_egg_incubator_state_first_page(char* status, float temperature, int heater_state){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	@ 0x38
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]

    char buffer[32]; // 충분한 크기의 버퍼 선언

	ssd1306_Fill(Black);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff fcc3 	bl	800250c <ssd1306_Fill>
    ssd1306_SetCursor(30, 4);
 8002b86:	2104      	movs	r1, #4
 8002b88:	201e      	movs	r0, #30
 8002b8a:	f7ff fe07 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Egg Incubator", Font_6x8, White);
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <ssd1306_show_egg_incubator_state_first_page+0x108>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	9200      	str	r2, [sp, #0]
 8002b94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b96:	483a      	ldr	r0, [pc, #232]	@ (8002c80 <ssd1306_show_egg_incubator_state_first_page+0x10c>)
 8002b98:	f7ff fdda 	bl	8002750 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 14);
 8002b9c:	210e      	movs	r1, #14
 8002b9e:	2004      	movs	r0, #4
 8002ba0:	f7ff fdfc 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString(" ---------------------", Font_6x8, White);
 8002ba4:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <ssd1306_show_egg_incubator_state_first_page+0x108>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bac:	4835      	ldr	r0, [pc, #212]	@ (8002c84 <ssd1306_show_egg_incubator_state_first_page+0x110>)
 8002bae:	f7ff fdcf 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 24);
 8002bb2:	2118      	movs	r1, #24
 8002bb4:	2004      	movs	r0, #4
 8002bb6:	f7ff fdf1 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Current Status:  ", Font_6x8, White);
 8002bba:	4b30      	ldr	r3, [pc, #192]	@ (8002c7c <ssd1306_show_egg_incubator_state_first_page+0x108>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	9200      	str	r2, [sp, #0]
 8002bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc2:	4831      	ldr	r0, [pc, #196]	@ (8002c88 <ssd1306_show_egg_incubator_state_first_page+0x114>)
 8002bc4:	f7ff fdc4 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 34);
 8002bc8:	2122      	movs	r1, #34	@ 0x22
 8002bca:	2004      	movs	r0, #4
 8002bcc:	f7ff fde6 	bl	800279c <ssd1306_SetCursor>
    sprintf(buffer, "%s", status);
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	492d      	ldr	r1, [pc, #180]	@ (8002c8c <ssd1306_show_egg_incubator_state_first_page+0x118>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fdaf 	bl	800673c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8002bde:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <ssd1306_show_egg_incubator_state_first_page+0x108>)
 8002be0:	f107 0010 	add.w	r0, r7, #16
 8002be4:	2201      	movs	r2, #1
 8002be6:	9200      	str	r2, [sp, #0]
 8002be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bea:	f7ff fdb1 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 44);
 8002bee:	212c      	movs	r1, #44	@ 0x2c
 8002bf0:	2004      	movs	r0, #4
 8002bf2:	f7ff fdd3 	bl	800279c <ssd1306_SetCursor>
    sprintf(buffer, "Temperature: %.1f C", temperature);
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	f7fd fc16 	bl	8000428 <__aeabi_f2d>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	f107 0010 	add.w	r0, r7, #16
 8002c04:	4922      	ldr	r1, [pc, #136]	@ (8002c90 <ssd1306_show_egg_incubator_state_first_page+0x11c>)
 8002c06:	f003 fd99 	bl	800673c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <ssd1306_show_egg_incubator_state_first_page+0x108>)
 8002c0c:	f107 0010 	add.w	r0, r7, #16
 8002c10:	2201      	movs	r2, #1
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c16:	f7ff fd9b 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 54);
 8002c1a:	2136      	movs	r1, #54	@ 0x36
 8002c1c:	2004      	movs	r0, #4
 8002c1e:	f7ff fdbd 	bl	800279c <ssd1306_SetCursor>

    if(heater_state){
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00f      	beq.n	8002c48 <ssd1306_show_egg_incubator_state_first_page+0xd4>
        sprintf(buffer, "Heater: %s", "On");
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4a19      	ldr	r2, [pc, #100]	@ (8002c94 <ssd1306_show_egg_incubator_state_first_page+0x120>)
 8002c2e:	491a      	ldr	r1, [pc, #104]	@ (8002c98 <ssd1306_show_egg_incubator_state_first_page+0x124>)
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fd83 	bl	800673c <siprintf>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <ssd1306_show_egg_incubator_state_first_page+0x108>)
 8002c38:	f107 0010 	add.w	r0, r7, #16
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	9200      	str	r2, [sp, #0]
 8002c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c42:	f7ff fd85 	bl	8002750 <ssd1306_WriteString>
 8002c46:	e00e      	b.n	8002c66 <ssd1306_show_egg_incubator_state_first_page+0xf2>
    }else{
        sprintf(buffer, "Heater: %s", "Off");
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	4a13      	ldr	r2, [pc, #76]	@ (8002c9c <ssd1306_show_egg_incubator_state_first_page+0x128>)
 8002c4e:	4912      	ldr	r1, [pc, #72]	@ (8002c98 <ssd1306_show_egg_incubator_state_first_page+0x124>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fd73 	bl	800673c <siprintf>
        ssd1306_WriteString(buffer, Font_6x8, White);
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <ssd1306_show_egg_incubator_state_first_page+0x108>)
 8002c58:	f107 0010 	add.w	r0, r7, #16
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	9200      	str	r2, [sp, #0]
 8002c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c62:	f7ff fd75 	bl	8002750 <ssd1306_WriteString>
    }




    ssd1306_UpdateScreen();
 8002c66:	f7ff fc69 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(4000);
 8002c6a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002c6e:	f000 fc8b 	bl	8003588 <HAL_Delay>

}
 8002c72:	bf00      	nop
 8002c74:	3730      	adds	r7, #48	@ 0x30
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	0800b6e0 	.word	0x0800b6e0
 8002c80:	0800a240 	.word	0x0800a240
 8002c84:	0800a250 	.word	0x0800a250
 8002c88:	0800a268 	.word	0x0800a268
 8002c8c:	0800a27c 	.word	0x0800a27c
 8002c90:	0800a280 	.word	0x0800a280
 8002c94:	0800a294 	.word	0x0800a294
 8002c98:	0800a298 	.word	0x0800a298
 8002c9c:	0800a2a4 	.word	0x0800a2a4

08002ca0 <ssd1306_show_egg_incubator_state_second_page>:

void ssd1306_show_egg_incubator_state_second_page(){
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af02      	add	r7, sp, #8
	//calculate_time();
	char buffer[32];
	ssd1306_Fill(Black);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7ff fc30 	bl	800250c <ssd1306_Fill>
    ssd1306_SetCursor(4, 4);
 8002cac:	2104      	movs	r1, #4
 8002cae:	2004      	movs	r0, #4
 8002cb0:	f7ff fd74 	bl	800279c <ssd1306_SetCursor>
    sprintf(buffer, "Progress: %lu %%", incubator_info.progress);
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d74 <ssd1306_show_egg_incubator_state_second_page+0xd4>)
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	463b      	mov	r3, r7
 8002cba:	492f      	ldr	r1, [pc, #188]	@ (8002d78 <ssd1306_show_egg_incubator_state_second_page+0xd8>)
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fd3d 	bl	800673c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d7c <ssd1306_show_egg_incubator_state_second_page+0xdc>)
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	9200      	str	r2, [sp, #0]
 8002cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ccc:	f7ff fd40 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 14);
 8002cd0:	210e      	movs	r1, #14
 8002cd2:	2004      	movs	r0, #4
 8002cd4:	f7ff fd62 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString(" ---------------------", Font_6x8, White);
 8002cd8:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <ssd1306_show_egg_incubator_state_second_page+0xdc>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce0:	4827      	ldr	r0, [pc, #156]	@ (8002d80 <ssd1306_show_egg_incubator_state_second_page+0xe0>)
 8002ce2:	f7ff fd35 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 24);
 8002ce6:	2118      	movs	r1, #24
 8002ce8:	2004      	movs	r0, #4
 8002cea:	f7ff fd57 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Incubation Period: ", Font_6x8, White);
 8002cee:	4b23      	ldr	r3, [pc, #140]	@ (8002d7c <ssd1306_show_egg_incubator_state_second_page+0xdc>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	9200      	str	r2, [sp, #0]
 8002cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf6:	4823      	ldr	r0, [pc, #140]	@ (8002d84 <ssd1306_show_egg_incubator_state_second_page+0xe4>)
 8002cf8:	f7ff fd2a 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 34);
 8002cfc:	2122      	movs	r1, #34	@ 0x22
 8002cfe:	2004      	movs	r0, #4
 8002d00:	f7ff fd4c 	bl	800279c <ssd1306_SetCursor>
    sprintf(buffer, "  %lu days %lu hours", incubator_info.elapsed_days, incubator_info.elapsed_hours);
 8002d04:	4b1b      	ldr	r3, [pc, #108]	@ (8002d74 <ssd1306_show_egg_incubator_state_second_page+0xd4>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <ssd1306_show_egg_incubator_state_second_page+0xd4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	491e      	ldr	r1, [pc, #120]	@ (8002d88 <ssd1306_show_egg_incubator_state_second_page+0xe8>)
 8002d10:	f003 fd14 	bl	800673c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8002d14:	4b19      	ldr	r3, [pc, #100]	@ (8002d7c <ssd1306_show_egg_incubator_state_second_page+0xdc>)
 8002d16:	4638      	mov	r0, r7
 8002d18:	2201      	movs	r2, #1
 8002d1a:	9200      	str	r2, [sp, #0]
 8002d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1e:	f7ff fd17 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 44);
 8002d22:	212c      	movs	r1, #44	@ 0x2c
 8002d24:	2004      	movs	r0, #4
 8002d26:	f7ff fd39 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Time to Hatch:", Font_6x8, White);
 8002d2a:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <ssd1306_show_egg_incubator_state_second_page+0xdc>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	9200      	str	r2, [sp, #0]
 8002d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d32:	4816      	ldr	r0, [pc, #88]	@ (8002d8c <ssd1306_show_egg_incubator_state_second_page+0xec>)
 8002d34:	f7ff fd0c 	bl	8002750 <ssd1306_WriteString>

    ssd1306_SetCursor(4, 54);
 8002d38:	2136      	movs	r1, #54	@ 0x36
 8002d3a:	2004      	movs	r0, #4
 8002d3c:	f7ff fd2e 	bl	800279c <ssd1306_SetCursor>
    sprintf(buffer, "  %lu days %lu hours", incubator_info.remaining_days, incubator_info.remaining_hours);
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <ssd1306_show_egg_incubator_state_second_page+0xd4>)
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <ssd1306_show_egg_incubator_state_second_page+0xd4>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4638      	mov	r0, r7
 8002d4a:	490f      	ldr	r1, [pc, #60]	@ (8002d88 <ssd1306_show_egg_incubator_state_second_page+0xe8>)
 8002d4c:	f003 fcf6 	bl	800673c <siprintf>
    ssd1306_WriteString(buffer, Font_6x8, White);
 8002d50:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <ssd1306_show_egg_incubator_state_second_page+0xdc>)
 8002d52:	4638      	mov	r0, r7
 8002d54:	2201      	movs	r2, #1
 8002d56:	9200      	str	r2, [sp, #0]
 8002d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5a:	f7ff fcf9 	bl	8002750 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8002d5e:	f7ff fbed 	bl	800253c <ssd1306_UpdateScreen>
    HAL_Delay(4000);
 8002d62:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002d66:	f000 fc0f 	bl	8003588 <HAL_Delay>


}
 8002d6a:	bf00      	nop
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000794 	.word	0x20000794
 8002d78:	0800a2a8 	.word	0x0800a2a8
 8002d7c:	0800b6e0 	.word	0x0800b6e0
 8002d80:	0800a250 	.word	0x0800a250
 8002d84:	0800a2bc 	.word	0x0800a2bc
 8002d88:	0800a2d0 	.word	0x0800a2d0
 8002d8c:	0800a2e8 	.word	0x0800a2e8

08002d90 <calculate_time>:




void calculate_time(uint32_t *startTime) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	@ 0x30
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    // Reset if the program startup was not saved
    if (*startTime == 0) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d108      	bne.n	8002db2 <calculate_time+0x22>
    	*startTime = HAL_GetTick()/1000;
 8002da0:	f000 fbe8 	bl	8003574 <HAL_GetTick>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a36      	ldr	r2, [pc, #216]	@ (8002e80 <calculate_time+0xf0>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099a      	lsrs	r2, r3, #6
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
    }

    uint32_t current_time = HAL_GetTick()/1000;
 8002db2:	f000 fbdf 	bl	8003574 <HAL_GetTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a31      	ldr	r2, [pc, #196]	@ (8002e80 <calculate_time+0xf0>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Calculate elapsed time (in seconds) from the start of the program
    uint32_t elapsed_seconds  = current_time - (*startTime);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Convert seconds to days and hours

    //1814400 = 21days * 24hours * 60minutes * 60seconds
    //if the status is preparing
    if (*startTime == 1814401) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e84 <calculate_time+0xf4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <calculate_time+0x4a>
    	elapsed_seconds = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    //if the status is completed
    if (*startTime == 1814402) {
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <calculate_time+0xf8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d101      	bne.n	8002de8 <calculate_time+0x58>
    	elapsed_seconds = 1814400;
 8002de4:	4b29      	ldr	r3, [pc, #164]	@ (8002e8c <calculate_time+0xfc>)
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    //if the elapsed_seconds reaches 21days, change status to completed.
    if(elapsed_seconds == 1814400){
 8002de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dea:	4a28      	ldr	r2, [pc, #160]	@ (8002e8c <calculate_time+0xfc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <calculate_time+0x68>
    	global_var_control = 2;
 8002df0:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <calculate_time+0x100>)
 8002df2:	2202      	movs	r2, #2
 8002df4:	601a      	str	r2, [r3, #0]
    	return;
 8002df6:	e040      	b.n	8002e7a <calculate_time+0xea>
    }


    uint32_t days_elapsed = elapsed_seconds / (60 * 60 * 24);
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	4a26      	ldr	r2, [pc, #152]	@ (8002e94 <calculate_time+0x104>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t hours_elapsed = (int)((elapsed_seconds / (60 * 60)) - (days_elapsed * 24));
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	4a24      	ldr	r2, [pc, #144]	@ (8002e98 <calculate_time+0x108>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	0ad9      	lsrs	r1, r3, #11
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1acb      	subs	r3, r1, r3
 8002e1a:	623b      	str	r3, [r7, #32]

    incubator_info.elapsed_days = days_elapsed;
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e9c <calculate_time+0x10c>)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	6013      	str	r3, [r2, #0]
    incubator_info.elapsed_hours = hours_elapsed;
 8002e22:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <calculate_time+0x10c>)
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	6053      	str	r3, [r2, #4]

    // calculate remaining seconds
    uint32_t total_seconds = TOTAL_DAYS * 24 * 60 * 60;
 8002e28:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <calculate_time+0xfc>)
 8002e2a:	61fb      	str	r3, [r7, #28]
    uint32_t remaining_seconds = total_seconds - elapsed_seconds;
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	61bb      	str	r3, [r7, #24]

    // Convert seconds to days and hours
    uint32_t days_left = remaining_seconds / (60 * 60 * 24);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4a17      	ldr	r2, [pc, #92]	@ (8002e94 <calculate_time+0x104>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	617b      	str	r3, [r7, #20]
    uint32_t hours_left = (uint32_t)((remaining_seconds / (60 * 60)) - (days_left * 24));
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4a15      	ldr	r2, [pc, #84]	@ (8002e98 <calculate_time+0x108>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	0ad9      	lsrs	r1, r3, #11
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1acb      	subs	r3, r1, r3
 8002e56:	613b      	str	r3, [r7, #16]
    incubator_info.remaining_days = days_left;
 8002e58:	4a10      	ldr	r2, [pc, #64]	@ (8002e9c <calculate_time+0x10c>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	6093      	str	r3, [r2, #8]
    incubator_info.remaining_hours = hours_left;
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e9c <calculate_time+0x10c>)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	60d3      	str	r3, [r2, #12]

    // Progress Calculation
    uint32_t progress_percent = (elapsed_seconds * 100)/ total_seconds;
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e66:	2264      	movs	r2, #100	@ 0x64
 8002e68:	fb03 f202 	mul.w	r2, r3, r2
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	60fb      	str	r3, [r7, #12]
    incubator_info.progress = progress_percent;
 8002e74:	4a09      	ldr	r2, [pc, #36]	@ (8002e9c <calculate_time+0x10c>)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6113      	str	r3, [r2, #16]


}
 8002e7a:	3730      	adds	r7, #48	@ 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	10624dd3 	.word	0x10624dd3
 8002e84:	001baf81 	.word	0x001baf81
 8002e88:	001baf82 	.word	0x001baf82
 8002e8c:	001baf80 	.word	0x001baf80
 8002e90:	20000384 	.word	0x20000384
 8002e94:	c22e4507 	.word	0xc22e4507
 8002e98:	91a2b3c5 	.word	0x91a2b3c5
 8002e9c:	20000794 	.word	0x20000794

08002ea0 <display_ssd1306>:


void display_ssd1306(uint32_t *startTime, char *status, float temperature, int heater_state){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
/*	if(updateDue==60||updateDue==0){
		calculate_time(startTime);
		updateDue =0;
	}*/
	calculate_time(startTime);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7ff ff6e 	bl	8002d90 <calculate_time>



	ssd1306_show_egg_incubator_state_first_page(status, temperature, heater_state);
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	68b8      	ldr	r0, [r7, #8]
 8002eba:	f7ff fe5b 	bl	8002b74 <ssd1306_show_egg_incubator_state_first_page>
	ssd1306_show_egg_incubator_state_second_page();
 8002ebe:	f7ff feef 	bl	8002ca0 <ssd1306_show_egg_incubator_state_second_page>
	HAL_Delay(1000);
 8002ec2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ec6:	f000 fb5f 	bl	8003588 <HAL_Delay>
	updateDue++;
 8002eca:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <display_ssd1306+0x3c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	4a02      	ldr	r2, [pc, #8]	@ (8002edc <display_ssd1306+0x3c>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200007a8 	.word	0x200007a8

08002ee0 <ssd1306_Preparig_transition>:


    ssd1306_UpdateScreen();
}

void ssd1306_Preparig_transition(){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7ff fb10 	bl	800250c <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8002eec:	2100      	movs	r1, #0
 8002eee:	2002      	movs	r0, #2
 8002ef0:	f7ff fc54 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Preparing", Font_11x18, White);
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <ssd1306_Preparig_transition+0x44>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	9200      	str	r2, [sp, #0]
 8002efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efc:	480a      	ldr	r0, [pc, #40]	@ (8002f28 <ssd1306_Preparig_transition+0x48>)
 8002efe:	f7ff fc27 	bl	8002750 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 30);
 8002f02:	211e      	movs	r1, #30
 8002f04:	2002      	movs	r0, #2
 8002f06:	f7ff fc49 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Incubating.", Font_11x18, White);
 8002f0a:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <ssd1306_Preparig_transition+0x44>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	9200      	str	r2, [sp, #0]
 8002f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f12:	4806      	ldr	r0, [pc, #24]	@ (8002f2c <ssd1306_Preparig_transition+0x4c>)
 8002f14:	f7ff fc1c 	bl	8002750 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002f18:	f7ff fb10 	bl	800253c <ssd1306_UpdateScreen>
    //HAL_Delay(500);
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	0800b6ec 	.word	0x0800b6ec
 8002f28:	0800a35c 	.word	0x0800a35c
 8002f2c:	0800a368 	.word	0x0800a368

08002f30 <ssd1306_Incubating_transition>:

void ssd1306_Incubating_transition(){
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7ff fae8 	bl	800250c <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f7ff fc2c 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Start", Font_11x18, White);
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <ssd1306_Incubating_transition+0x44>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f4c:	480a      	ldr	r0, [pc, #40]	@ (8002f78 <ssd1306_Incubating_transition+0x48>)
 8002f4e:	f7ff fbff 	bl	8002750 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 30);
 8002f52:	211e      	movs	r1, #30
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7ff fc21 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Incubating.", Font_11x18, White);
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <ssd1306_Incubating_transition+0x44>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	9200      	str	r2, [sp, #0]
 8002f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f62:	4806      	ldr	r0, [pc, #24]	@ (8002f7c <ssd1306_Incubating_transition+0x4c>)
 8002f64:	f7ff fbf4 	bl	8002750 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002f68:	f7ff fae8 	bl	800253c <ssd1306_UpdateScreen>
    //HAL_Delay(500);

}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	0800b6ec 	.word	0x0800b6ec
 8002f78:	0800a374 	.word	0x0800a374
 8002f7c:	0800a368 	.word	0x0800a368

08002f80 <ssd1306_Completing_transition>:

void ssd1306_Completing_transition(){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7ff fac0 	bl	800250c <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f7ff fc04 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Completing", Font_11x18, White);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <ssd1306_Completing_transition+0x44>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	9200      	str	r2, [sp, #0]
 8002f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9c:	480a      	ldr	r0, [pc, #40]	@ (8002fc8 <ssd1306_Completing_transition+0x48>)
 8002f9e:	f7ff fbd7 	bl	8002750 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 30);
 8002fa2:	211e      	movs	r1, #30
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f7ff fbf9 	bl	800279c <ssd1306_SetCursor>
    ssd1306_WriteString("Incubating!", Font_11x18, White);
 8002faa:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <ssd1306_Completing_transition+0x44>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	9200      	str	r2, [sp, #0]
 8002fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb2:	4806      	ldr	r0, [pc, #24]	@ (8002fcc <ssd1306_Completing_transition+0x4c>)
 8002fb4:	f7ff fbcc 	bl	8002750 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002fb8:	f7ff fac0 	bl	800253c <ssd1306_UpdateScreen>
    //HAL_Delay(500);


}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	0800b6ec 	.word	0x0800b6ec
 8002fc8:	0800a37c 	.word	0x0800a37c
 8002fcc:	0800a388 	.word	0x0800a388

08002fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_MspInit+0x5c>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	4a14      	ldr	r2, [pc, #80]	@ (800302c <HAL_MspInit+0x5c>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6193      	str	r3, [r2, #24]
 8002fe2:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_MspInit+0x5c>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <HAL_MspInit+0x5c>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800302c <HAL_MspInit+0x5c>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	61d3      	str	r3, [r2, #28]
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <HAL_MspInit+0x5c>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <HAL_MspInit+0x60>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_MspInit+0x60>)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40021000 	.word	0x40021000
 8003030:	40010000 	.word	0x40010000

08003034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a15      	ldr	r2, [pc, #84]	@ (80030a4 <HAL_I2C_MspInit+0x70>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d123      	bne.n	800309c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003054:	4b14      	ldr	r3, [pc, #80]	@ (80030a8 <HAL_I2C_MspInit+0x74>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <HAL_I2C_MspInit+0x74>)
 800305a:	f043 0308 	orr.w	r3, r3, #8
 800305e:	6193      	str	r3, [r2, #24]
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <HAL_I2C_MspInit+0x74>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800306c:	23c0      	movs	r3, #192	@ 0xc0
 800306e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003070:	2312      	movs	r3, #18
 8003072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003074:	2303      	movs	r3, #3
 8003076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	4619      	mov	r1, r3
 800307e:	480b      	ldr	r0, [pc, #44]	@ (80030ac <HAL_I2C_MspInit+0x78>)
 8003080:	f000 fbb4 	bl	80037ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <HAL_I2C_MspInit+0x74>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4a07      	ldr	r2, [pc, #28]	@ (80030a8 <HAL_I2C_MspInit+0x74>)
 800308a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800308e:	61d3      	str	r3, [r2, #28]
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_I2C_MspInit+0x74>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800309c:	bf00      	nop
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40005400 	.word	0x40005400
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40010c00 	.word	0x40010c00

080030b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0310 	add.w	r3, r7, #16
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <HAL_SPI_MspInit+0x70>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d123      	bne.n	8003118 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <HAL_SPI_MspInit+0x74>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a13      	ldr	r2, [pc, #76]	@ (8003124 <HAL_SPI_MspInit+0x74>)
 80030d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_SPI_MspInit+0x74>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003124 <HAL_SPI_MspInit+0x74>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003124 <HAL_SPI_MspInit+0x74>)
 80030ee:	f043 0304 	orr.w	r3, r3, #4
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_SPI_MspInit+0x74>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PA5_SPI_SCLK_Pin|PA7_SPI_DIO_Pin;
 8003100:	23a0      	movs	r3, #160	@ 0xa0
 8003102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4619      	mov	r1, r3
 8003112:	4805      	ldr	r0, [pc, #20]	@ (8003128 <HAL_SPI_MspInit+0x78>)
 8003114:	f000 fb6a 	bl	80037ec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003118:	bf00      	nop
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40013000 	.word	0x40013000
 8003124:	40021000 	.word	0x40021000
 8003128:	40010800 	.word	0x40010800

0800312c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1a      	ldr	r2, [pc, #104]	@ (80031a4 <HAL_TIM_Base_MspInit+0x78>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d114      	bne.n	8003168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800313e:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <HAL_TIM_Base_MspInit+0x7c>)
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <HAL_TIM_Base_MspInit+0x7c>)
 8003144:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003148:	6193      	str	r3, [r2, #24]
 800314a:	4b17      	ldr	r3, [pc, #92]	@ (80031a8 <HAL_TIM_Base_MspInit+0x7c>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	2019      	movs	r0, #25
 800315c:	f000 fb0f 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003160:	2019      	movs	r0, #25
 8003162:	f000 fb28 	bl	80037b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003166:	e018      	b.n	800319a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d113      	bne.n	800319a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <HAL_TIM_Base_MspInit+0x7c>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4a0c      	ldr	r2, [pc, #48]	@ (80031a8 <HAL_TIM_Base_MspInit+0x7c>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	61d3      	str	r3, [r2, #28]
 800317e:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <HAL_TIM_Base_MspInit+0x7c>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	201c      	movs	r0, #28
 8003190:	f000 faf5 	bl	800377e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003194:	201c      	movs	r0, #28
 8003196:	f000 fb0e 	bl	80037b6 <HAL_NVIC_EnableIRQ>
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40021000 	.word	0x40021000

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <NMI_Handler+0x4>

080031b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <HardFault_Handler+0x4>

080031bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <MemManage_Handler+0x4>

080031c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <BusFault_Handler+0x4>

080031cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <UsageFault_Handler+0x4>

080031d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fc:	f000 f9a8 	bl	8003550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_Control_Switch_Pin);
 8003208:	2004      	movs	r0, #4
 800320a:	f000 fca3 	bl	8003b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

 if(!(HAL_GPIO_ReadPin(GPIO_RELAY_GPIO_Port, GPIO_RELAY_Pin))){
 800320e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003212:	481c      	ldr	r0, [pc, #112]	@ (8003284 <EXTI2_IRQHandler+0x80>)
 8003214:	f000 fc6e 	bl	8003af4 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d12f      	bne.n	800327e <EXTI2_IRQHandler+0x7a>
	if((HAL_GetTick() - m_button_before_time) > 200){
 800321e:	f000 f9a9 	bl	8003574 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <EXTI2_IRQHandler+0x84>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2bc8      	cmp	r3, #200	@ 0xc8
 800322c:	d927      	bls.n	800327e <EXTI2_IRQHandler+0x7a>

		  global_var_control = (global_var_control+1) %3;
 800322e:	4b17      	ldr	r3, [pc, #92]	@ (800328c <EXTI2_IRQHandler+0x88>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <EXTI2_IRQHandler+0x8c>)
 8003236:	fb83 3201 	smull	r3, r2, r3, r1
 800323a:	17cb      	asrs	r3, r1, #31
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	1aca      	subs	r2, r1, r3
 8003246:	4b11      	ldr	r3, [pc, #68]	@ (800328c <EXTI2_IRQHandler+0x88>)
 8003248:	601a      	str	r2, [r3, #0]

		  switch (global_var_control) {
 800324a:	4b10      	ldr	r3, [pc, #64]	@ (800328c <EXTI2_IRQHandler+0x88>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d00c      	beq.n	800326c <EXTI2_IRQHandler+0x68>
 8003252:	2b02      	cmp	r3, #2
 8003254:	dc0d      	bgt.n	8003272 <EXTI2_IRQHandler+0x6e>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <EXTI2_IRQHandler+0x5c>
 800325a:	2b01      	cmp	r3, #1
 800325c:	d003      	beq.n	8003266 <EXTI2_IRQHandler+0x62>
			case 2:
				ssd1306_Completing_transition();
				break;

			default:
				break;
 800325e:	e008      	b.n	8003272 <EXTI2_IRQHandler+0x6e>
				  ssd1306_Preparig_transition();
 8003260:	f7ff fe3e 	bl	8002ee0 <ssd1306_Preparig_transition>
				break;
 8003264:	e006      	b.n	8003274 <EXTI2_IRQHandler+0x70>
				  ssd1306_Incubating_transition();
 8003266:	f7ff fe63 	bl	8002f30 <ssd1306_Incubating_transition>
				break;
 800326a:	e003      	b.n	8003274 <EXTI2_IRQHandler+0x70>
				ssd1306_Completing_transition();
 800326c:	f7ff fe88 	bl	8002f80 <ssd1306_Completing_transition>
				break;
 8003270:	e000      	b.n	8003274 <EXTI2_IRQHandler+0x70>
				break;
 8003272:	bf00      	nop

		}
		  m_button_before_time = HAL_GetTick();
 8003274:	f000 f97e 	bl	8003574 <HAL_GetTick>
 8003278:	4603      	mov	r3, r0
 800327a:	4a03      	ldr	r2, [pc, #12]	@ (8003288 <EXTI2_IRQHandler+0x84>)
 800327c:	6013      	str	r3, [r2, #0]




  /* USER CODE END EXTI2_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40010c00 	.word	0x40010c00
 8003288:	200007ac 	.word	0x200007ac
 800328c:	20000384 	.word	0x20000384
 8003290:	55555556 	.word	0x55555556

08003294 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003298:	480b      	ldr	r0, [pc, #44]	@ (80032c8 <TIM1_UP_IRQHandler+0x34>)
 800329a:	f002 f87f 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  if(!isInterrruptLocked()){
 800329e:	f7fe fd97 	bl	8001dd0 <isInterrruptLocked>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <TIM1_UP_IRQHandler+0x30>
	  displayTemperature((int)(my_ds18b20_Sensor.Temperature * 10));
 80032a8:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <TIM1_UP_IRQHandler+0x38>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4908      	ldr	r1, [pc, #32]	@ (80032d0 <TIM1_UP_IRQHandler+0x3c>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fd68 	bl	8000d84 <__aeabi_fmul>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd ff2a 	bl	8001110 <__aeabi_f2iz>
 80032bc:	4603      	mov	r3, r0
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fa32 	bl	8001728 <displayTemperature>
  }

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200002f0 	.word	0x200002f0
 80032cc:	20000218 	.word	0x20000218
 80032d0:	41200000 	.word	0x41200000

080032d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032d8:	4802      	ldr	r0, [pc, #8]	@ (80032e4 <TIM2_IRQHandler+0x10>)
 80032da:	f002 f85f 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  /* USER CODE END TIM2_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000338 	.word	0x20000338

080032e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return 1;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <_kill>:

int _kill(int pid, int sig)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003300:	f004 f9b2 	bl	8007668 <__errno>
 8003304:	4603      	mov	r3, r0
 8003306:	2216      	movs	r2, #22
 8003308:	601a      	str	r2, [r3, #0]
  return -1;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_exit>:

void _exit (int status)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800331e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffe7 	bl	80032f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <_exit+0x12>

0800332c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e00a      	b.n	8003354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800333e:	f3af 8000 	nop.w
 8003342:	4601      	mov	r1, r0
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	60ba      	str	r2, [r7, #8]
 800334a:	b2ca      	uxtb	r2, r1
 800334c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3301      	adds	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	dbf0      	blt.n	800333e <_read+0x12>
  }

  return len;
 800335c:	687b      	ldr	r3, [r7, #4]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	e009      	b.n	800338c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	60ba      	str	r2, [r7, #8]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3301      	adds	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	dbf1      	blt.n	8003378 <_write+0x12>
  }
  return len;
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_close>:

int _close(int file)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033c4:	605a      	str	r2, [r3, #4]
  return 0;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <_isatty>:

int _isatty(int file)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033da:	2301      	movs	r3, #1
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
	...

08003400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003408:	4a14      	ldr	r2, [pc, #80]	@ (800345c <_sbrk+0x5c>)
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <_sbrk+0x60>)
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003414:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <_sbrk+0x64>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <_sbrk+0x64>)
 800341e:	4a12      	ldr	r2, [pc, #72]	@ (8003468 <_sbrk+0x68>)
 8003420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003422:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <_sbrk+0x64>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	429a      	cmp	r2, r3
 800342e:	d207      	bcs.n	8003440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003430:	f004 f91a 	bl	8007668 <__errno>
 8003434:	4603      	mov	r3, r0
 8003436:	220c      	movs	r2, #12
 8003438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800343a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800343e:	e009      	b.n	8003454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003440:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <_sbrk+0x64>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003446:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <_sbrk+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	4a05      	ldr	r2, [pc, #20]	@ (8003464 <_sbrk+0x64>)
 8003450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20005000 	.word	0x20005000
 8003460:	00000400 	.word	0x00000400
 8003464:	200007b0 	.word	0x200007b0
 8003468:	20000908 	.word	0x20000908

0800346c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003478:	f7ff fff8 	bl	800346c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800347c:	480b      	ldr	r0, [pc, #44]	@ (80034ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800347e:	490c      	ldr	r1, [pc, #48]	@ (80034b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003480:	4a0c      	ldr	r2, [pc, #48]	@ (80034b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003484:	e002      	b.n	800348c <LoopCopyDataInit>

08003486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348a:	3304      	adds	r3, #4

0800348c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800348c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800348e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003490:	d3f9      	bcc.n	8003486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003494:	4c09      	ldr	r4, [pc, #36]	@ (80034bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003498:	e001      	b.n	800349e <LoopFillZerobss>

0800349a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800349c:	3204      	adds	r2, #4

0800349e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800349e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a0:	d3fb      	bcc.n	800349a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034a2:	f004 f8e7 	bl	8007674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034a6:	f7fe f9f9 	bl	800189c <main>
  bx lr
 80034aa:	4770      	bx	lr
  ldr r0, =_sdata
 80034ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80034b4:	0800c85c 	.word	0x0800c85c
  ldr r2, =_sbss
 80034b8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80034bc:	20000904 	.word	0x20000904

080034c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034c0:	e7fe      	b.n	80034c0 <ADC1_2_IRQHandler>
	...

080034c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HAL_Init+0x28>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a07      	ldr	r2, [pc, #28]	@ (80034ec <HAL_Init+0x28>)
 80034ce:	f043 0310 	orr.w	r3, r3, #16
 80034d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d4:	2003      	movs	r0, #3
 80034d6:	f000 f947 	bl	8003768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034da:	200f      	movs	r0, #15
 80034dc:	f000 f808 	bl	80034f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e0:	f7ff fd76 	bl	8002fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40022000 	.word	0x40022000

080034f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f8:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <HAL_InitTick+0x54>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_InitTick+0x58>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003506:	fbb3 f3f1 	udiv	r3, r3, r1
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f95f 	bl	80037d2 <HAL_SYSTICK_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e00e      	b.n	800353c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d80a      	bhi.n	800353a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003524:	2200      	movs	r2, #0
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800352c:	f000 f927 	bl	800377e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003530:	4a06      	ldr	r2, [pc, #24]	@ (800354c <HAL_InitTick+0x5c>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000028 	.word	0x20000028
 8003548:	20000030 	.word	0x20000030
 800354c:	2000002c 	.word	0x2000002c

08003550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_IncTick+0x1c>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b05      	ldr	r3, [pc, #20]	@ (8003570 <HAL_IncTick+0x20>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a03      	ldr	r2, [pc, #12]	@ (8003570 <HAL_IncTick+0x20>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	20000030 	.word	0x20000030
 8003570:	200007b4 	.word	0x200007b4

08003574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b02      	ldr	r3, [pc, #8]	@ (8003584 <HAL_GetTick+0x10>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	200007b4 	.word	0x200007b4

08003588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff fff0 	bl	8003574 <HAL_GetTick>
 8003594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035a0:	d005      	beq.n	80035ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a2:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <HAL_Delay+0x44>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ae:	bf00      	nop
 80035b0:	f7ff ffe0 	bl	8003574 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d8f7      	bhi.n	80035b0 <HAL_Delay+0x28>
  {
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000030 	.word	0x20000030

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	@ (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4906      	ldr	r1, [pc, #24]	@ (8003668 <__NVIC_EnableIRQ+0x34>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	e000e100 	.word	0xe000e100

0800366c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	db0a      	blt.n	8003696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	490c      	ldr	r1, [pc, #48]	@ (80036b8 <__NVIC_SetPriority+0x4c>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	440b      	add	r3, r1
 8003690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003694:	e00a      	b.n	80036ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4908      	ldr	r1, [pc, #32]	@ (80036bc <__NVIC_SetPriority+0x50>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3b04      	subs	r3, #4
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	440b      	add	r3, r1
 80036aa:	761a      	strb	r2, [r3, #24]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	@ 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf28      	it	cs
 80036de:	2304      	movcs	r3, #4
 80036e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d902      	bls.n	80036f0 <NVIC_EncodePriority+0x30>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3b03      	subs	r3, #3
 80036ee:	e000      	b.n	80036f2 <NVIC_EncodePriority+0x32>
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003708:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43d9      	mvns	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	4313      	orrs	r3, r2
         );
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	@ 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003734:	d301      	bcc.n	800373a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003736:	2301      	movs	r3, #1
 8003738:	e00f      	b.n	800375a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373a:	4a0a      	ldr	r2, [pc, #40]	@ (8003764 <SysTick_Config+0x40>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003742:	210f      	movs	r1, #15
 8003744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003748:	f7ff ff90 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <SysTick_Config+0x40>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003752:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <SysTick_Config+0x40>)
 8003754:	2207      	movs	r2, #7
 8003756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	e000e010 	.word	0xe000e010

08003768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff2d 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003790:	f7ff ff42 	bl	8003618 <__NVIC_GetPriorityGrouping>
 8003794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	6978      	ldr	r0, [r7, #20]
 800379c:	f7ff ff90 	bl	80036c0 <NVIC_EncodePriority>
 80037a0:	4602      	mov	r2, r0
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff5f 	bl	800366c <__NVIC_SetPriority>
}
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4603      	mov	r3, r0
 80037be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff35 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ffa2 	bl	8003724 <SysTick_Config>
 80037e0:	4603      	mov	r3, r0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b08b      	sub	sp, #44	@ 0x2c
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fe:	e169      	b.n	8003ad4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003800:	2201      	movs	r2, #1
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	429a      	cmp	r2, r3
 800381a:	f040 8158 	bne.w	8003ace <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4a9a      	ldr	r2, [pc, #616]	@ (8003a8c <HAL_GPIO_Init+0x2a0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d05e      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003828:	4a98      	ldr	r2, [pc, #608]	@ (8003a8c <HAL_GPIO_Init+0x2a0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d875      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 800382e:	4a98      	ldr	r2, [pc, #608]	@ (8003a90 <HAL_GPIO_Init+0x2a4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d058      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003834:	4a96      	ldr	r2, [pc, #600]	@ (8003a90 <HAL_GPIO_Init+0x2a4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d86f      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 800383a:	4a96      	ldr	r2, [pc, #600]	@ (8003a94 <HAL_GPIO_Init+0x2a8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d052      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003840:	4a94      	ldr	r2, [pc, #592]	@ (8003a94 <HAL_GPIO_Init+0x2a8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d869      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 8003846:	4a94      	ldr	r2, [pc, #592]	@ (8003a98 <HAL_GPIO_Init+0x2ac>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d04c      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 800384c:	4a92      	ldr	r2, [pc, #584]	@ (8003a98 <HAL_GPIO_Init+0x2ac>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d863      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 8003852:	4a92      	ldr	r2, [pc, #584]	@ (8003a9c <HAL_GPIO_Init+0x2b0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d046      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
 8003858:	4a90      	ldr	r2, [pc, #576]	@ (8003a9c <HAL_GPIO_Init+0x2b0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d85d      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 800385e:	2b12      	cmp	r3, #18
 8003860:	d82a      	bhi.n	80038b8 <HAL_GPIO_Init+0xcc>
 8003862:	2b12      	cmp	r3, #18
 8003864:	d859      	bhi.n	800391a <HAL_GPIO_Init+0x12e>
 8003866:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <HAL_GPIO_Init+0x80>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	080038e7 	.word	0x080038e7
 8003870:	080038c1 	.word	0x080038c1
 8003874:	080038d3 	.word	0x080038d3
 8003878:	08003915 	.word	0x08003915
 800387c:	0800391b 	.word	0x0800391b
 8003880:	0800391b 	.word	0x0800391b
 8003884:	0800391b 	.word	0x0800391b
 8003888:	0800391b 	.word	0x0800391b
 800388c:	0800391b 	.word	0x0800391b
 8003890:	0800391b 	.word	0x0800391b
 8003894:	0800391b 	.word	0x0800391b
 8003898:	0800391b 	.word	0x0800391b
 800389c:	0800391b 	.word	0x0800391b
 80038a0:	0800391b 	.word	0x0800391b
 80038a4:	0800391b 	.word	0x0800391b
 80038a8:	0800391b 	.word	0x0800391b
 80038ac:	0800391b 	.word	0x0800391b
 80038b0:	080038c9 	.word	0x080038c9
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	4a79      	ldr	r2, [pc, #484]	@ (8003aa0 <HAL_GPIO_Init+0x2b4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038be:	e02c      	b.n	800391a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	623b      	str	r3, [r7, #32]
          break;
 80038c6:	e029      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	623b      	str	r3, [r7, #32]
          break;
 80038d0:	e024      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	3308      	adds	r3, #8
 80038d8:	623b      	str	r3, [r7, #32]
          break;
 80038da:	e01f      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	330c      	adds	r3, #12
 80038e2:	623b      	str	r3, [r7, #32]
          break;
 80038e4:	e01a      	b.n	800391c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038ee:	2304      	movs	r3, #4
 80038f0:	623b      	str	r3, [r7, #32]
          break;
 80038f2:	e013      	b.n	800391c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038fc:	2308      	movs	r3, #8
 80038fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	611a      	str	r2, [r3, #16]
          break;
 8003906:	e009      	b.n	800391c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003908:	2308      	movs	r3, #8
 800390a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	615a      	str	r2, [r3, #20]
          break;
 8003912:	e003      	b.n	800391c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003914:	2300      	movs	r3, #0
 8003916:	623b      	str	r3, [r7, #32]
          break;
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x130>
          break;
 800391a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2bff      	cmp	r3, #255	@ 0xff
 8003920:	d801      	bhi.n	8003926 <HAL_GPIO_Init+0x13a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	e001      	b.n	800392a <HAL_GPIO_Init+0x13e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2bff      	cmp	r3, #255	@ 0xff
 8003930:	d802      	bhi.n	8003938 <HAL_GPIO_Init+0x14c>
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	e002      	b.n	800393e <HAL_GPIO_Init+0x152>
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	3b08      	subs	r3, #8
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	210f      	movs	r1, #15
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	401a      	ands	r2, r3
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	431a      	orrs	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80b1 	beq.w	8003ace <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800396c:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa4 <HAL_GPIO_Init+0x2b8>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	4a4c      	ldr	r2, [pc, #304]	@ (8003aa4 <HAL_GPIO_Init+0x2b8>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6193      	str	r3, [r2, #24]
 8003978:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa4 <HAL_GPIO_Init+0x2b8>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003984:	4a48      	ldr	r2, [pc, #288]	@ (8003aa8 <HAL_GPIO_Init+0x2bc>)
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003990:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	220f      	movs	r2, #15
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4013      	ands	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a40      	ldr	r2, [pc, #256]	@ (8003aac <HAL_GPIO_Init+0x2c0>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_GPIO_Init+0x1ec>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ab0 <HAL_GPIO_Init+0x2c4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00d      	beq.n	80039d4 <HAL_GPIO_Init+0x1e8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab4 <HAL_GPIO_Init+0x2c8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <HAL_GPIO_Init+0x1e4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ab8 <HAL_GPIO_Init+0x2cc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d101      	bne.n	80039cc <HAL_GPIO_Init+0x1e0>
 80039c8:	2303      	movs	r3, #3
 80039ca:	e006      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039cc:	2304      	movs	r3, #4
 80039ce:	e004      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e002      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_GPIO_Init+0x1ee>
 80039d8:	2300      	movs	r3, #0
 80039da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039dc:	f002 0203 	and.w	r2, r2, #3
 80039e0:	0092      	lsls	r2, r2, #2
 80039e2:	4093      	lsls	r3, r2
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039ea:	492f      	ldr	r1, [pc, #188]	@ (8003aa8 <HAL_GPIO_Init+0x2bc>)
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	3302      	adds	r3, #2
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a04:	4b2d      	ldr	r3, [pc, #180]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	492c      	ldr	r1, [pc, #176]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a12:	4b2a      	ldr	r3, [pc, #168]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	4928      	ldr	r1, [pc, #160]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d006      	beq.n	8003a3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a2c:	4b23      	ldr	r3, [pc, #140]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4922      	ldr	r1, [pc, #136]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60cb      	str	r3, [r1, #12]
 8003a38:	e006      	b.n	8003a48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	491e      	ldr	r1, [pc, #120]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	4918      	ldr	r1, [pc, #96]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e006      	b.n	8003a70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a62:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	4914      	ldr	r1, [pc, #80]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d021      	beq.n	8003ac0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	490e      	ldr	r1, [pc, #56]	@ (8003abc <HAL_GPIO_Init+0x2d0>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]
 8003a88:	e021      	b.n	8003ace <HAL_GPIO_Init+0x2e2>
 8003a8a:	bf00      	nop
 8003a8c:	10320000 	.word	0x10320000
 8003a90:	10310000 	.word	0x10310000
 8003a94:	10220000 	.word	0x10220000
 8003a98:	10210000 	.word	0x10210000
 8003a9c:	10120000 	.word	0x10120000
 8003aa0:	10110000 	.word	0x10110000
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40010800 	.word	0x40010800
 8003ab0:	40010c00 	.word	0x40010c00
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40011400 	.word	0x40011400
 8003abc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_GPIO_Init+0x304>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	4909      	ldr	r1, [pc, #36]	@ (8003af0 <HAL_GPIO_Init+0x304>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f47f ae8e 	bne.w	8003800 <HAL_GPIO_Init+0x14>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	372c      	adds	r7, #44	@ 0x2c
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40010400 	.word	0x40010400

08003af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e001      	b.n	8003b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	807b      	strh	r3, [r7, #2]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b32:	787b      	ldrb	r3, [r7, #1]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b38:	887a      	ldrh	r2, [r7, #2]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b3e:	e003      	b.n	8003b48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b40:	887b      	ldrh	r3, [r7, #2]
 8003b42:	041a      	lsls	r2, r3, #16
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	611a      	str	r2, [r3, #16]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b5e:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d006      	beq.n	8003b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b6a:	4a05      	ldr	r2, [pc, #20]	@ (8003b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f806 	bl	8003b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40010400 	.word	0x40010400

08003b84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e12b      	b.n	8003e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fa38 	bl	8003034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	@ 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f001 f842 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8003c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a81      	ldr	r2, [pc, #516]	@ (8003e0c <HAL_I2C_Init+0x274>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d807      	bhi.n	8003c1c <HAL_I2C_Init+0x84>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a80      	ldr	r2, [pc, #512]	@ (8003e10 <HAL_I2C_Init+0x278>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	bf94      	ite	ls
 8003c14:	2301      	movls	r3, #1
 8003c16:	2300      	movhi	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e006      	b.n	8003c2a <HAL_I2C_Init+0x92>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e14 <HAL_I2C_Init+0x27c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0e7      	b.n	8003e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a78      	ldr	r2, [pc, #480]	@ (8003e18 <HAL_I2C_Init+0x280>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0c9b      	lsrs	r3, r3, #18
 8003c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a6a      	ldr	r2, [pc, #424]	@ (8003e0c <HAL_I2C_Init+0x274>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d802      	bhi.n	8003c6c <HAL_I2C_Init+0xd4>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	e009      	b.n	8003c80 <HAL_I2C_Init+0xe8>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	4a69      	ldr	r2, [pc, #420]	@ (8003e1c <HAL_I2C_Init+0x284>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	3301      	adds	r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	495c      	ldr	r1, [pc, #368]	@ (8003e0c <HAL_I2C_Init+0x274>)
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	d819      	bhi.n	8003cd4 <HAL_I2C_Init+0x13c>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1e59      	subs	r1, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_I2C_Init+0x138>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e59      	subs	r1, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cce:	e051      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	e04f      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d111      	bne.n	8003d00 <HAL_I2C_Init+0x168>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1e58      	subs	r0, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	440b      	add	r3, r1
 8003cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e012      	b.n	8003d26 <HAL_I2C_Init+0x18e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e58      	subs	r0, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	0099      	lsls	r1, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Init+0x196>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e022      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10e      	bne.n	8003d54 <HAL_I2C_Init+0x1bc>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e58      	subs	r0, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	440b      	add	r3, r1
 8003d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d52:	e00f      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1e58      	subs	r0, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	0099      	lsls	r1, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	6809      	ldr	r1, [r1, #0]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003da2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6911      	ldr	r1, [r2, #16]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68d2      	ldr	r2, [r2, #12]
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	000186a0 	.word	0x000186a0
 8003e10:	001e847f 	.word	0x001e847f
 8003e14:	003d08ff 	.word	0x003d08ff
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	10624dd3 	.word	0x10624dd3

08003e20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	817b      	strh	r3, [r7, #10]
 8003e32:	460b      	mov	r3, r1
 8003e34:	813b      	strh	r3, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e3a:	f7ff fb9b 	bl	8003574 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	f040 80d9 	bne.w	8004000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2319      	movs	r3, #25
 8003e54:	2201      	movs	r2, #1
 8003e56:	496d      	ldr	r1, [pc, #436]	@ (800400c <HAL_I2C_Mem_Write+0x1ec>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f971 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0cc      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Mem_Write+0x56>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e0c5      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d007      	beq.n	8003e9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2221      	movs	r2, #33	@ 0x21
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a4d      	ldr	r2, [pc, #308]	@ (8004010 <HAL_I2C_Mem_Write+0x1f0>)
 8003edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ede:	88f8      	ldrh	r0, [r7, #6]
 8003ee0:	893a      	ldrh	r2, [r7, #8]
 8003ee2:	8979      	ldrh	r1, [r7, #10]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4603      	mov	r3, r0
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f890 	bl	8004014 <I2C_RequestMemoryWrite>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d052      	beq.n	8003fa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e081      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa36 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d107      	bne.n	8003f26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06b      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	781a      	ldrb	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d11b      	bne.n	8003fa0 <HAL_I2C_Mem_Write+0x180>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1aa      	bne.n	8003efe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa29 	bl	8004404 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d107      	bne.n	8003fd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e016      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	00100002 	.word	0x00100002
 8004010:	ffff0000 	.word	0xffff0000

08004014 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	461a      	mov	r2, r3
 8004022:	4603      	mov	r3, r0
 8004024:	817b      	strh	r3, [r7, #10]
 8004026:	460b      	mov	r3, r1
 8004028:	813b      	strh	r3, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2200      	movs	r2, #0
 8004046:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f878 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004064:	d103      	bne.n	800406e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e05f      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	492d      	ldr	r1, [pc, #180]	@ (800413c <I2C_RequestMemoryWrite+0x128>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f8d3 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e04c      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f95e 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e02b      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d105      	bne.n	80040ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]
 80040ea:	e021      	b.n	8004130 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fc:	6a39      	ldr	r1, [r7, #32]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f938 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	2b04      	cmp	r3, #4
 8004110:	d107      	bne.n	8004122 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e005      	b.n	8004132 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e048      	b.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004158:	d044      	beq.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7ff fa0b 	bl	8003574 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d139      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10d      	bne.n	8004196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	e00c      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d116      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e023      	b.n	800422c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	e00c      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d093      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004242:	e071      	b.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004252:	d123      	bne.n	800429c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800426c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e067      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042a2:	d041      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7ff f966 	bl	8003574 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d136      	bne.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10c      	bne.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e00b      	b.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e021      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10c      	bne.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e00b      	b.n	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	f47f af6d 	bne.w	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004380:	e034      	b.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f886 	bl	8004494 <I2C_IsAcknowledgeFailed>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e034      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004398:	d028      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7ff f8eb 	bl	8003574 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11d      	bne.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d016      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e007      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f6:	2b80      	cmp	r3, #128	@ 0x80
 80043f8:	d1c3      	bne.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004410:	e034      	b.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f83e 	bl	8004494 <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e034      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004428:	d028      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7ff f8a3 	bl	8003574 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d016      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d1c3      	bne.n	8004412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044aa:	d11b      	bne.n	80044e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f043 0204 	orr.w	r2, r3, #4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e272      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8087 	beq.w	800461e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004510:	4b92      	ldr	r3, [pc, #584]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	2b04      	cmp	r3, #4
 800451a:	d00c      	beq.n	8004536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800451c:	4b8f      	ldr	r3, [pc, #572]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b08      	cmp	r3, #8
 8004526:	d112      	bne.n	800454e <HAL_RCC_OscConfig+0x5e>
 8004528:	4b8c      	ldr	r3, [pc, #560]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	d10b      	bne.n	800454e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004536:	4b89      	ldr	r3, [pc, #548]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d06c      	beq.n	800461c <HAL_RCC_OscConfig+0x12c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d168      	bne.n	800461c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e24c      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x76>
 8004558:	4b80      	ldr	r3, [pc, #512]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a7f      	ldr	r2, [pc, #508]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800455e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	e02e      	b.n	80045c4 <HAL_RCC_OscConfig+0xd4>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x98>
 800456e:	4b7b      	ldr	r3, [pc, #492]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a7a      	ldr	r2, [pc, #488]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b78      	ldr	r3, [pc, #480]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a77      	ldr	r2, [pc, #476]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xd4>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0xbc>
 8004592:	4b72      	ldr	r3, [pc, #456]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a71      	ldr	r2, [pc, #452]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6f      	ldr	r3, [pc, #444]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6e      	ldr	r2, [pc, #440]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xd4>
 80045ac:	4b6b      	ldr	r3, [pc, #428]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a6a      	ldr	r2, [pc, #424]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b68      	ldr	r3, [pc, #416]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a67      	ldr	r2, [pc, #412]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe ffd2 	bl	8003574 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe ffce 	bl	8003574 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	@ 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e200      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5d      	ldr	r3, [pc, #372]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xe4>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fe ffbe 	bl	8003574 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fe ffba 	bl	8003574 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1ec      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b53      	ldr	r3, [pc, #332]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x10c>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800462a:	4b4c      	ldr	r3, [pc, #304]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004636:	4b49      	ldr	r3, [pc, #292]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x18c>
 8004642:	4b46      	ldr	r3, [pc, #280]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b43      	ldr	r3, [pc, #268]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x176>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c0      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3d      	ldr	r3, [pc, #244]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4939      	ldr	r1, [pc, #228]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b36      	ldr	r3, [pc, #216]	@ (8004760 <HAL_RCC_OscConfig+0x270>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fe ff73 	bl	8003574 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004692:	f7fe ff6f 	bl	8003574 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a1      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2d      	ldr	r3, [pc, #180]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4927      	ldr	r1, [pc, #156]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b26      	ldr	r3, [pc, #152]	@ (8004760 <HAL_RCC_OscConfig+0x270>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fe ff52 	bl	8003574 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fe ff4e 	bl	8003574 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e180      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d03a      	beq.n	8004774 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d019      	beq.n	800473a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470c:	f7fe ff32 	bl	8003574 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004714:	f7fe ff2e 	bl	8003574 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e160      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0d      	ldr	r3, [pc, #52]	@ (800475c <HAL_RCC_OscConfig+0x26c>)
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004732:	2001      	movs	r0, #1
 8004734:	f000 faba 	bl	8004cac <RCC_Delay>
 8004738:	e01c      	b.n	8004774 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800473a:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <HAL_RCC_OscConfig+0x274>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004740:	f7fe ff18 	bl	8003574 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004746:	e00f      	b.n	8004768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004748:	f7fe ff14 	bl	8003574 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d908      	bls.n	8004768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e146      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	42420000 	.word	0x42420000
 8004764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004768:	4b92      	ldr	r3, [pc, #584]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e9      	bne.n	8004748 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a6 	beq.w	80048ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004786:	4b8b      	ldr	r3, [pc, #556]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004792:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4a87      	ldr	r2, [pc, #540]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479c:	61d3      	str	r3, [r2, #28]
 800479e:	4b85      	ldr	r3, [pc, #532]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	60bb      	str	r3, [r7, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b82      	ldr	r3, [pc, #520]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d118      	bne.n	80047ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b7f      	ldr	r3, [pc, #508]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7e      	ldr	r2, [pc, #504]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fe fed5 	bl	8003574 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ce:	f7fe fed1 	bl	8003574 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b64      	cmp	r3, #100	@ 0x64
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e103      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e0:	4b75      	ldr	r3, [pc, #468]	@ (80049b8 <HAL_RCC_OscConfig+0x4c8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d106      	bne.n	8004802 <HAL_RCC_OscConfig+0x312>
 80047f4:	4b6f      	ldr	r3, [pc, #444]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4a6e      	ldr	r2, [pc, #440]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6213      	str	r3, [r2, #32]
 8004800:	e02d      	b.n	800485e <HAL_RCC_OscConfig+0x36e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10c      	bne.n	8004824 <HAL_RCC_OscConfig+0x334>
 800480a:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	4a69      	ldr	r2, [pc, #420]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	6213      	str	r3, [r2, #32]
 8004816:	4b67      	ldr	r3, [pc, #412]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	4a66      	ldr	r2, [pc, #408]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	6213      	str	r3, [r2, #32]
 8004822:	e01c      	b.n	800485e <HAL_RCC_OscConfig+0x36e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b05      	cmp	r3, #5
 800482a:	d10c      	bne.n	8004846 <HAL_RCC_OscConfig+0x356>
 800482c:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	4a60      	ldr	r2, [pc, #384]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6213      	str	r3, [r2, #32]
 8004838:	4b5e      	ldr	r3, [pc, #376]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	4a5d      	ldr	r2, [pc, #372]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6213      	str	r3, [r2, #32]
 8004844:	e00b      	b.n	800485e <HAL_RCC_OscConfig+0x36e>
 8004846:	4b5b      	ldr	r3, [pc, #364]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4a5a      	ldr	r2, [pc, #360]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	6213      	str	r3, [r2, #32]
 8004852:	4b58      	ldr	r3, [pc, #352]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4a57      	ldr	r2, [pc, #348]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d015      	beq.n	8004892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004866:	f7fe fe85 	bl	8003574 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fe fe81 	bl	8003574 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e0b1      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	4b4b      	ldr	r3, [pc, #300]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ee      	beq.n	800486e <HAL_RCC_OscConfig+0x37e>
 8004890:	e014      	b.n	80048bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004892:	f7fe fe6f 	bl	8003574 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489a:	f7fe fe6b 	bl	8003574 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e09b      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b0:	4b40      	ldr	r3, [pc, #256]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ee      	bne.n	800489a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d105      	bne.n	80048ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c2:	4b3c      	ldr	r3, [pc, #240]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8087 	beq.w	80049e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d8:	4b36      	ldr	r3, [pc, #216]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d061      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d146      	bne.n	800497a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ec:	4b33      	ldr	r3, [pc, #204]	@ (80049bc <HAL_RCC_OscConfig+0x4cc>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fe fe3f 	bl	8003574 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fa:	f7fe fe3b 	bl	8003574 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e06d      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800490c:	4b29      	ldr	r3, [pc, #164]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d108      	bne.n	8004934 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004922:	4b24      	ldr	r3, [pc, #144]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	4921      	ldr	r1, [pc, #132]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004934:	4b1f      	ldr	r3, [pc, #124]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a19      	ldr	r1, [r3, #32]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	430b      	orrs	r3, r1
 8004946:	491b      	ldr	r1, [pc, #108]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800494c:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_RCC_OscConfig+0x4cc>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fe fe0f 	bl	8003574 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fe fe0b 	bl	8003574 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e03d      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x46a>
 8004978:	e035      	b.n	80049e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497a:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <HAL_RCC_OscConfig+0x4cc>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fe fdf8 	bl	8003574 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fe fdf4 	bl	8003574 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e026      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x498>
 80049a6:	e01e      	b.n	80049e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e019      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40007000 	.word	0x40007000
 80049bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049c0:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x500>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d106      	bne.n	80049e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d001      	beq.n	80049e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000

080049f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0d0      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d910      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b67      	ldr	r3, [pc, #412]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	4965      	ldr	r1, [pc, #404]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b63      	ldr	r3, [pc, #396]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0b8      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a50:	4b59      	ldr	r3, [pc, #356]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4a58      	ldr	r2, [pc, #352]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a68:	4b53      	ldr	r3, [pc, #332]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a52      	ldr	r2, [pc, #328]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a74:	4b50      	ldr	r3, [pc, #320]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	494d      	ldr	r1, [pc, #308]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d040      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b47      	ldr	r3, [pc, #284]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d115      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e07f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b41      	ldr	r3, [pc, #260]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e073      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06b      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b39      	ldr	r3, [pc, #228]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4936      	ldr	r1, [pc, #216]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fe fd46 	bl	8003574 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fe fd42 	bl	8003574 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e053      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b27      	ldr	r3, [pc, #156]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d210      	bcs.n	8004b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 0207 	bic.w	r2, r3, #7
 8004b2a:	4922      	ldr	r1, [pc, #136]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b20      	ldr	r3, [pc, #128]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e032      	b.n	8004baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4916      	ldr	r1, [pc, #88]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b6e:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	490e      	ldr	r1, [pc, #56]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b82:	f000 f821 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	490a      	ldr	r1, [pc, #40]	@ (8004bbc <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	5ccb      	ldrb	r3, [r1, r3]
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	4a09      	ldr	r2, [pc, #36]	@ (8004bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b9e:	4b09      	ldr	r3, [pc, #36]	@ (8004bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fca4 	bl	80034f0 <HAL_InitTick>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40022000 	.word	0x40022000
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	0800c3f8 	.word	0x0800c3f8
 8004bc0:	20000028 	.word	0x20000028
 8004bc4:	2000002c 	.word	0x2000002c

08004bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004be2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d002      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x30>
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0x36>
 8004bf6:	e027      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bf8:	4b19      	ldr	r3, [pc, #100]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bfa:	613b      	str	r3, [r7, #16]
      break;
 8004bfc:	e027      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	0c9b      	lsrs	r3, r3, #18
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	4a17      	ldr	r2, [pc, #92]	@ (8004c64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c08:	5cd3      	ldrb	r3, [r2, r3]
 8004c0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c16:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	0c5b      	lsrs	r3, r3, #17
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	4a11      	ldr	r2, [pc, #68]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a0d      	ldr	r2, [pc, #52]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c2a:	fb03 f202 	mul.w	r2, r3, r2
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	e004      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	613b      	str	r3, [r7, #16]
      break;
 8004c46:	e002      	b.n	8004c4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c4a:	613b      	str	r3, [r7, #16]
      break;
 8004c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4e:	693b      	ldr	r3, [r7, #16]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	007a1200 	.word	0x007a1200
 8004c64:	0800c410 	.word	0x0800c410
 8004c68:	0800c420 	.word	0x0800c420
 8004c6c:	003d0900 	.word	0x003d0900

08004c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b02      	ldr	r3, [pc, #8]	@ (8004c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	20000028 	.word	0x20000028

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c88:	f7ff fff2 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4903      	ldr	r1, [pc, #12]	@ (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	0800c408 	.word	0x0800c408

08004cac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <RCC_Delay+0x34>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce4 <RCC_Delay+0x38>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	0a5b      	lsrs	r3, r3, #9
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cc8:	bf00      	nop
  }
  while (Delay --);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1e5a      	subs	r2, r3, #1
 8004cce:	60fa      	str	r2, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f9      	bne.n	8004cc8 <RCC_Delay+0x1c>
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	20000028 	.word	0x20000028
 8004ce4:	10624dd3 	.word	0x10624dd3

08004ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e076      	b.n	8004de8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d0a:	d009      	beq.n	8004d20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	61da      	str	r2, [r3, #28]
 8004d12:	e005      	b.n	8004d20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fe f9b8 	bl	80030b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da4:	ea42 0103 	orr.w	r1, r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	0c1a      	lsrs	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f002 0204 	and.w	r2, r2, #4
 8004dc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_Transmit+0x22>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e12d      	b.n	800506e <HAL_SPI_Transmit+0x27e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e1a:	f7fe fbab 	bl	8003574 <HAL_GetTick>
 8004e1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e20:	88fb      	ldrh	r3, [r7, #6]
 8004e22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d002      	beq.n	8004e36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
 8004e32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e34:	e116      	b.n	8005064 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_Transmit+0x52>
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e46:	e10d      	b.n	8005064 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eba:	2b40      	cmp	r3, #64	@ 0x40
 8004ebc:	d007      	beq.n	8004ece <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed6:	d14f      	bne.n	8004f78 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <HAL_SPI_Transmit+0xf6>
 8004ee0:	8afb      	ldrh	r3, [r7, #22]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d142      	bne.n	8004f6c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	881a      	ldrh	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	1c9a      	adds	r2, r3, #2
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f0a:	e02f      	b.n	8004f6c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d112      	bne.n	8004f40 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	881a      	ldrh	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2a:	1c9a      	adds	r2, r3, #2
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f3e:	e015      	b.n	8004f6c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f40:	f7fe fb18 	bl	8003574 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d803      	bhi.n	8004f58 <HAL_SPI_Transmit+0x168>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f56:	d102      	bne.n	8004f5e <HAL_SPI_Transmit+0x16e>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f6a:	e07b      	b.n	8005064 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ca      	bne.n	8004f0c <HAL_SPI_Transmit+0x11c>
 8004f76:	e050      	b.n	800501a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_Transmit+0x196>
 8004f80:	8afb      	ldrh	r3, [r7, #22]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d144      	bne.n	8005010 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	7812      	ldrb	r2, [r2, #0]
 8004f92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004fac:	e030      	b.n	8005010 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d113      	bne.n	8004fe4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	7812      	ldrb	r2, [r2, #0]
 8004fc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fe2:	e015      	b.n	8005010 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe4:	f7fe fac6 	bl	8003574 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d803      	bhi.n	8004ffc <HAL_SPI_Transmit+0x20c>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ffa:	d102      	bne.n	8005002 <HAL_SPI_Transmit+0x212>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800500e:	e029      	b.n	8005064 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1c9      	bne.n	8004fae <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	6839      	ldr	r1, [r7, #0]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f8b2 	bl	8005188 <SPI_EndRxTxTransaction>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	77fb      	strb	r3, [r7, #31]
 800505a:	e003      	b.n	8005064 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800506c:	7ffb      	ldrb	r3, [r7, #31]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005088:	f7fe fa74 	bl	8003574 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	4413      	add	r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005098:	f7fe fa6c 	bl	8003574 <HAL_GetTick>
 800509c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509e:	4b39      	ldr	r3, [pc, #228]	@ (8005184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	015b      	lsls	r3, r3, #5
 80050a4:	0d1b      	lsrs	r3, r3, #20
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ae:	e054      	b.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050b6:	d050      	beq.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b8:	f7fe fa5c 	bl	8003574 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d902      	bls.n	80050ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d13d      	bne.n	800514a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050e6:	d111      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f0:	d004      	beq.n	80050fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fa:	d107      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800510a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005114:	d10f      	bne.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e017      	b.n	800517a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	429a      	cmp	r2, r3
 8005176:	d19b      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000028 	.word	0x20000028

08005188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	@ 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff ff6a 	bl	8005078 <SPI_WaitFlagStateUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e000      	b.n	80051bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e041      	b.n	800525a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fd ff9e 	bl	800312c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fac6 	bl	8005794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e032      	b.n	80052e2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <HAL_TIM_Base_Start+0x88>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00e      	beq.n	80052ac <HAL_TIM_Base_Start+0x48>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d009      	beq.n	80052ac <HAL_TIM_Base_Start+0x48>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	@ (80052f0 <HAL_TIM_Base_Start+0x8c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_TIM_Base_Start+0x48>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a13      	ldr	r2, [pc, #76]	@ (80052f4 <HAL_TIM_Base_Start+0x90>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d111      	bne.n	80052d0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d010      	beq.n	80052e0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	e007      	b.n	80052e0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800

080052f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d001      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e03a      	b.n	8005386 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a18      	ldr	r2, [pc, #96]	@ (8005390 <HAL_TIM_Base_Start_IT+0x98>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x58>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d009      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x58>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a14      	ldr	r2, [pc, #80]	@ (8005394 <HAL_TIM_Base_Start_IT+0x9c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x58>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a13      	ldr	r2, [pc, #76]	@ (8005398 <HAL_TIM_Base_Start_IT+0xa0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d111      	bne.n	8005374 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b06      	cmp	r3, #6
 8005360:	d010      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005372:	e007      	b.n	8005384 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800

0800539c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0202 	mvn.w	r2, #2
 80053c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f9bd 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9b0 	bl	800574c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f9bf 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b04      	cmp	r3, #4
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b04      	cmp	r3, #4
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0204 	mvn.w	r2, #4
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f993 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f986 	bl	800574c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f995 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b08      	cmp	r3, #8
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b08      	cmp	r3, #8
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0208 	mvn.w	r2, #8
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2204      	movs	r2, #4
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f969 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f95c 	bl	800574c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f96b 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0210 	mvn.w	r2, #16
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2208      	movs	r2, #8
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f93f 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f932 	bl	800574c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f941 	bl	8005770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d10e      	bne.n	8005520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0201 	mvn.w	r2, #1
 8005518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f90d 	bl	800573a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552a:	2b80      	cmp	r3, #128	@ 0x80
 800552c:	d10e      	bne.n	800554c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b80      	cmp	r3, #128	@ 0x80
 800553a:	d107      	bne.n	800554c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa83 	bl	8005a52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005556:	2b40      	cmp	r3, #64	@ 0x40
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005564:	2b40      	cmp	r3, #64	@ 0x40
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f905 	bl	8005782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b20      	cmp	r3, #32
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b20      	cmp	r3, #32
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0220 	mvn.w	r2, #32
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fa4e 	bl	8005a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIM_ConfigClockSource+0x1c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e0b4      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x186>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005600:	d03e      	beq.n	8005680 <HAL_TIM_ConfigClockSource+0xd4>
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005606:	f200 8087 	bhi.w	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560e:	f000 8086 	beq.w	800571e <HAL_TIM_ConfigClockSource+0x172>
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005616:	d87f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b70      	cmp	r3, #112	@ 0x70
 800561a:	d01a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0xa6>
 800561c:	2b70      	cmp	r3, #112	@ 0x70
 800561e:	d87b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b60      	cmp	r3, #96	@ 0x60
 8005622:	d050      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005624:	2b60      	cmp	r3, #96	@ 0x60
 8005626:	d877      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b50      	cmp	r3, #80	@ 0x50
 800562a:	d03c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xfa>
 800562c:	2b50      	cmp	r3, #80	@ 0x50
 800562e:	d873      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	d058      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	d86f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b30      	cmp	r3, #48	@ 0x30
 800563a:	d064      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b30      	cmp	r3, #48	@ 0x30
 800563e:	d86b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d060      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d867      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d05c      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 800564c:	2b10      	cmp	r3, #16
 800564e:	d05a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x15a>
 8005650:	e062      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005662:	f000 f970 	bl	8005946 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	609a      	str	r2, [r3, #8]
      break;
 800567e:	e04f      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005690:	f000 f959 	bl	8005946 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056a2:	609a      	str	r2, [r3, #8]
      break;
 80056a4:	e03c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 f8d0 	bl	8005858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2150      	movs	r1, #80	@ 0x50
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f927 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056c4:	e02c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 f8ee 	bl	80058b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2160      	movs	r1, #96	@ 0x60
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f917 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 80056e4:	e01c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f2:	461a      	mov	r2, r3
 80056f4:	f000 f8b0 	bl	8005858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2140      	movs	r1, #64	@ 0x40
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f907 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 8005704:	e00c      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f000 f8fe 	bl	8005912 <TIM_ITRx_SetConfig>
      break;
 8005716:	e003      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e000      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800571e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a29      	ldr	r2, [pc, #164]	@ (800584c <TIM_Base_SetConfig+0xb8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_Base_SetConfig+0x30>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b2:	d007      	beq.n	80057c4 <TIM_Base_SetConfig+0x30>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a26      	ldr	r2, [pc, #152]	@ (8005850 <TIM_Base_SetConfig+0xbc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0x30>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a25      	ldr	r2, [pc, #148]	@ (8005854 <TIM_Base_SetConfig+0xc0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d108      	bne.n	80057d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <TIM_Base_SetConfig+0xb8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <TIM_Base_SetConfig+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e4:	d007      	beq.n	80057f6 <TIM_Base_SetConfig+0x62>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a19      	ldr	r2, [pc, #100]	@ (8005850 <TIM_Base_SetConfig+0xbc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <TIM_Base_SetConfig+0x62>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a18      	ldr	r2, [pc, #96]	@ (8005854 <TIM_Base_SetConfig+0xc0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d108      	bne.n	8005808 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a07      	ldr	r2, [pc, #28]	@ (800584c <TIM_Base_SetConfig+0xb8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d103      	bne.n	800583c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	615a      	str	r2, [r3, #20]
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800

08005858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 030a 	bic.w	r3, r3, #10
 8005894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr

080058b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0210 	bic.w	r2, r3, #16
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	031b      	lsls	r3, r3, #12
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr

08005912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	f043 0307 	orr.w	r3, r3, #7
 8005934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005946:	b480      	push	{r7}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005960:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	021a      	lsls	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	431a      	orrs	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4313      	orrs	r3, r2
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4313      	orrs	r3, r2
 8005972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	609a      	str	r2, [r3, #8]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005998:	2302      	movs	r3, #2
 800599a:	e046      	b.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a16      	ldr	r2, [pc, #88]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e8:	d009      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a10      	ldr	r2, [pc, #64]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800

08005a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <__cvt>:
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6a:	461d      	mov	r5, r3
 8005a6c:	bfbb      	ittet	lt
 8005a6e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005a72:	461d      	movlt	r5, r3
 8005a74:	2300      	movge	r3, #0
 8005a76:	232d      	movlt	r3, #45	@ 0x2d
 8005a78:	b088      	sub	sp, #32
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	bfb8      	it	lt
 8005a7e:	4614      	movlt	r4, r2
 8005a80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a82:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005a84:	7013      	strb	r3, [r2, #0]
 8005a86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005a8c:	f023 0820 	bic.w	r8, r3, #32
 8005a90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a94:	d005      	beq.n	8005aa2 <__cvt+0x3e>
 8005a96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a9a:	d100      	bne.n	8005a9e <__cvt+0x3a>
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e000      	b.n	8005aa4 <__cvt+0x40>
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	aa07      	add	r2, sp, #28
 8005aa6:	9204      	str	r2, [sp, #16]
 8005aa8:	aa06      	add	r2, sp, #24
 8005aaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005aae:	e9cd 3600 	strd	r3, r6, [sp]
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	f001 feb3 	bl	8007820 <_dtoa_r>
 8005aba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005abe:	4607      	mov	r7, r0
 8005ac0:	d119      	bne.n	8005af6 <__cvt+0x92>
 8005ac2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ac4:	07db      	lsls	r3, r3, #31
 8005ac6:	d50e      	bpl.n	8005ae6 <__cvt+0x82>
 8005ac8:	eb00 0906 	add.w	r9, r0, r6
 8005acc:	2200      	movs	r2, #0
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	f7fa ff68 	bl	80009a8 <__aeabi_dcmpeq>
 8005ad8:	b108      	cbz	r0, 8005ade <__cvt+0x7a>
 8005ada:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ade:	2230      	movs	r2, #48	@ 0x30
 8005ae0:	9b07      	ldr	r3, [sp, #28]
 8005ae2:	454b      	cmp	r3, r9
 8005ae4:	d31e      	bcc.n	8005b24 <__cvt+0xc0>
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	9b07      	ldr	r3, [sp, #28]
 8005aea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005aec:	1bdb      	subs	r3, r3, r7
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	b008      	add	sp, #32
 8005af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005afa:	eb00 0906 	add.w	r9, r0, r6
 8005afe:	d1e5      	bne.n	8005acc <__cvt+0x68>
 8005b00:	7803      	ldrb	r3, [r0, #0]
 8005b02:	2b30      	cmp	r3, #48	@ 0x30
 8005b04:	d10a      	bne.n	8005b1c <__cvt+0xb8>
 8005b06:	2200      	movs	r2, #0
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	f7fa ff4b 	bl	80009a8 <__aeabi_dcmpeq>
 8005b12:	b918      	cbnz	r0, 8005b1c <__cvt+0xb8>
 8005b14:	f1c6 0601 	rsb	r6, r6, #1
 8005b18:	f8ca 6000 	str.w	r6, [sl]
 8005b1c:	f8da 3000 	ldr.w	r3, [sl]
 8005b20:	4499      	add	r9, r3
 8005b22:	e7d3      	b.n	8005acc <__cvt+0x68>
 8005b24:	1c59      	adds	r1, r3, #1
 8005b26:	9107      	str	r1, [sp, #28]
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e7d9      	b.n	8005ae0 <__cvt+0x7c>

08005b2c <__exponent>:
 8005b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b2e:	2900      	cmp	r1, #0
 8005b30:	bfb6      	itet	lt
 8005b32:	232d      	movlt	r3, #45	@ 0x2d
 8005b34:	232b      	movge	r3, #43	@ 0x2b
 8005b36:	4249      	neglt	r1, r1
 8005b38:	2909      	cmp	r1, #9
 8005b3a:	7002      	strb	r2, [r0, #0]
 8005b3c:	7043      	strb	r3, [r0, #1]
 8005b3e:	dd29      	ble.n	8005b94 <__exponent+0x68>
 8005b40:	f10d 0307 	add.w	r3, sp, #7
 8005b44:	461d      	mov	r5, r3
 8005b46:	270a      	movs	r7, #10
 8005b48:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	fb07 1416 	mls	r4, r7, r6, r1
 8005b52:	3430      	adds	r4, #48	@ 0x30
 8005b54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b58:	460c      	mov	r4, r1
 8005b5a:	2c63      	cmp	r4, #99	@ 0x63
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005b62:	dcf1      	bgt.n	8005b48 <__exponent+0x1c>
 8005b64:	3130      	adds	r1, #48	@ 0x30
 8005b66:	1e94      	subs	r4, r2, #2
 8005b68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	1c41      	adds	r1, r0, #1
 8005b70:	42ab      	cmp	r3, r5
 8005b72:	d30a      	bcc.n	8005b8a <__exponent+0x5e>
 8005b74:	f10d 0309 	add.w	r3, sp, #9
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	42ac      	cmp	r4, r5
 8005b7c:	bf88      	it	hi
 8005b7e:	2300      	movhi	r3, #0
 8005b80:	3302      	adds	r3, #2
 8005b82:	4403      	add	r3, r0
 8005b84:	1a18      	subs	r0, r3, r0
 8005b86:	b003      	add	sp, #12
 8005b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b92:	e7ed      	b.n	8005b70 <__exponent+0x44>
 8005b94:	2330      	movs	r3, #48	@ 0x30
 8005b96:	3130      	adds	r1, #48	@ 0x30
 8005b98:	7083      	strb	r3, [r0, #2]
 8005b9a:	70c1      	strb	r1, [r0, #3]
 8005b9c:	1d03      	adds	r3, r0, #4
 8005b9e:	e7f1      	b.n	8005b84 <__exponent+0x58>

08005ba0 <_printf_float>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	b091      	sub	sp, #68	@ 0x44
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005bac:	4616      	mov	r6, r2
 8005bae:	461f      	mov	r7, r3
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	f001 fd55 	bl	8007660 <_localeconv_r>
 8005bb6:	6803      	ldr	r3, [r0, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	9308      	str	r3, [sp, #32]
 8005bbc:	f7fa fac8 	bl	8000150 <strlen>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005bca:	3307      	adds	r3, #7
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	f103 0208 	add.w	r2, r3, #8
 8005bd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bd8:	f8d4 b000 	ldr.w	fp, [r4]
 8005bdc:	f8c8 2000 	str.w	r2, [r8]
 8005be0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005be4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005bee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005bf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8005e6c <_printf_float+0x2cc>)
 8005bfc:	f7fa ff06 	bl	8000a0c <__aeabi_dcmpun>
 8005c00:	bb70      	cbnz	r0, 8005c60 <_printf_float+0xc0>
 8005c02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c0a:	4b98      	ldr	r3, [pc, #608]	@ (8005e6c <_printf_float+0x2cc>)
 8005c0c:	f7fa fee0 	bl	80009d0 <__aeabi_dcmple>
 8005c10:	bb30      	cbnz	r0, 8005c60 <_printf_float+0xc0>
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4640      	mov	r0, r8
 8005c18:	4649      	mov	r1, r9
 8005c1a:	f7fa fecf 	bl	80009bc <__aeabi_dcmplt>
 8005c1e:	b110      	cbz	r0, 8005c26 <_printf_float+0x86>
 8005c20:	232d      	movs	r3, #45	@ 0x2d
 8005c22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c26:	4a92      	ldr	r2, [pc, #584]	@ (8005e70 <_printf_float+0x2d0>)
 8005c28:	4b92      	ldr	r3, [pc, #584]	@ (8005e74 <_printf_float+0x2d4>)
 8005c2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c2e:	bf94      	ite	ls
 8005c30:	4690      	movls	r8, r2
 8005c32:	4698      	movhi	r8, r3
 8005c34:	2303      	movs	r3, #3
 8005c36:	f04f 0900 	mov.w	r9, #0
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	f02b 0304 	bic.w	r3, fp, #4
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	4633      	mov	r3, r6
 8005c44:	4621      	mov	r1, r4
 8005c46:	4628      	mov	r0, r5
 8005c48:	9700      	str	r7, [sp, #0]
 8005c4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c4c:	f000 f9d4 	bl	8005ff8 <_printf_common>
 8005c50:	3001      	adds	r0, #1
 8005c52:	f040 8090 	bne.w	8005d76 <_printf_float+0x1d6>
 8005c56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c5a:	b011      	add	sp, #68	@ 0x44
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	4640      	mov	r0, r8
 8005c66:	4649      	mov	r1, r9
 8005c68:	f7fa fed0 	bl	8000a0c <__aeabi_dcmpun>
 8005c6c:	b148      	cbz	r0, 8005c82 <_printf_float+0xe2>
 8005c6e:	464b      	mov	r3, r9
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	bfb8      	it	lt
 8005c74:	232d      	movlt	r3, #45	@ 0x2d
 8005c76:	4a80      	ldr	r2, [pc, #512]	@ (8005e78 <_printf_float+0x2d8>)
 8005c78:	bfb8      	it	lt
 8005c7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e7c <_printf_float+0x2dc>)
 8005c80:	e7d3      	b.n	8005c2a <_printf_float+0x8a>
 8005c82:	6863      	ldr	r3, [r4, #4]
 8005c84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	d13f      	bne.n	8005d0c <_printf_float+0x16c>
 8005c8c:	2306      	movs	r3, #6
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005c96:	6023      	str	r3, [r4, #0]
 8005c98:	9206      	str	r2, [sp, #24]
 8005c9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005c9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005ca0:	aa0d      	add	r2, sp, #52	@ 0x34
 8005ca2:	9203      	str	r2, [sp, #12]
 8005ca4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005ca8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	4642      	mov	r2, r8
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005cb8:	f7ff fed4 	bl	8005a64 <__cvt>
 8005cbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	2947      	cmp	r1, #71	@ 0x47
 8005cc2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005cc4:	d128      	bne.n	8005d18 <_printf_float+0x178>
 8005cc6:	1cc8      	adds	r0, r1, #3
 8005cc8:	db02      	blt.n	8005cd0 <_printf_float+0x130>
 8005cca:	6863      	ldr	r3, [r4, #4]
 8005ccc:	4299      	cmp	r1, r3
 8005cce:	dd40      	ble.n	8005d52 <_printf_float+0x1b2>
 8005cd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005cd4:	fa5f fa8a 	uxtb.w	sl, sl
 8005cd8:	4652      	mov	r2, sl
 8005cda:	3901      	subs	r1, #1
 8005cdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ce0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005ce2:	f7ff ff23 	bl	8005b2c <__exponent>
 8005ce6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ce8:	4681      	mov	r9, r0
 8005cea:	1813      	adds	r3, r2, r0
 8005cec:	2a01      	cmp	r2, #1
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	dc02      	bgt.n	8005cf8 <_printf_float+0x158>
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	07d2      	lsls	r2, r2, #31
 8005cf6:	d501      	bpl.n	8005cfc <_printf_float+0x15c>
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d09e      	beq.n	8005c42 <_printf_float+0xa2>
 8005d04:	232d      	movs	r3, #45	@ 0x2d
 8005d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d0a:	e79a      	b.n	8005c42 <_printf_float+0xa2>
 8005d0c:	2947      	cmp	r1, #71	@ 0x47
 8005d0e:	d1bf      	bne.n	8005c90 <_printf_float+0xf0>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1bd      	bne.n	8005c90 <_printf_float+0xf0>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e7ba      	b.n	8005c8e <_printf_float+0xee>
 8005d18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d1c:	d9dc      	bls.n	8005cd8 <_printf_float+0x138>
 8005d1e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d22:	d118      	bne.n	8005d56 <_printf_float+0x1b6>
 8005d24:	2900      	cmp	r1, #0
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	dd0b      	ble.n	8005d42 <_printf_float+0x1a2>
 8005d2a:	6121      	str	r1, [r4, #16]
 8005d2c:	b913      	cbnz	r3, 8005d34 <_printf_float+0x194>
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	07d0      	lsls	r0, r2, #31
 8005d32:	d502      	bpl.n	8005d3a <_printf_float+0x19a>
 8005d34:	3301      	adds	r3, #1
 8005d36:	440b      	add	r3, r1
 8005d38:	6123      	str	r3, [r4, #16]
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d40:	e7dc      	b.n	8005cfc <_printf_float+0x15c>
 8005d42:	b913      	cbnz	r3, 8005d4a <_printf_float+0x1aa>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	07d2      	lsls	r2, r2, #31
 8005d48:	d501      	bpl.n	8005d4e <_printf_float+0x1ae>
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	e7f4      	b.n	8005d38 <_printf_float+0x198>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e7f2      	b.n	8005d38 <_printf_float+0x198>
 8005d52:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	db05      	blt.n	8005d68 <_printf_float+0x1c8>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	6121      	str	r1, [r4, #16]
 8005d60:	07d8      	lsls	r0, r3, #31
 8005d62:	d5ea      	bpl.n	8005d3a <_printf_float+0x19a>
 8005d64:	1c4b      	adds	r3, r1, #1
 8005d66:	e7e7      	b.n	8005d38 <_printf_float+0x198>
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	bfcc      	ite	gt
 8005d6c:	2201      	movgt	r2, #1
 8005d6e:	f1c1 0202 	rsble	r2, r1, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	e7e0      	b.n	8005d38 <_printf_float+0x198>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	055a      	lsls	r2, r3, #21
 8005d7a:	d407      	bmi.n	8005d8c <_printf_float+0x1ec>
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	4642      	mov	r2, r8
 8005d80:	4631      	mov	r1, r6
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b8      	blx	r7
 8005d86:	3001      	adds	r0, #1
 8005d88:	d12b      	bne.n	8005de2 <_printf_float+0x242>
 8005d8a:	e764      	b.n	8005c56 <_printf_float+0xb6>
 8005d8c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d90:	f240 80dc 	bls.w	8005f4c <_printf_float+0x3ac>
 8005d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f7fa fe04 	bl	80009a8 <__aeabi_dcmpeq>
 8005da0:	2800      	cmp	r0, #0
 8005da2:	d033      	beq.n	8005e0c <_printf_float+0x26c>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	4a35      	ldr	r2, [pc, #212]	@ (8005e80 <_printf_float+0x2e0>)
 8005dac:	47b8      	blx	r7
 8005dae:	3001      	adds	r0, #1
 8005db0:	f43f af51 	beq.w	8005c56 <_printf_float+0xb6>
 8005db4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005db8:	4543      	cmp	r3, r8
 8005dba:	db02      	blt.n	8005dc2 <_printf_float+0x222>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07d8      	lsls	r0, r3, #31
 8005dc0:	d50f      	bpl.n	8005de2 <_printf_float+0x242>
 8005dc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f af42 	beq.w	8005c56 <_printf_float+0xb6>
 8005dd2:	f04f 0900 	mov.w	r9, #0
 8005dd6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005dda:	f104 0a1a 	add.w	sl, r4, #26
 8005dde:	45c8      	cmp	r8, r9
 8005de0:	dc09      	bgt.n	8005df6 <_printf_float+0x256>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	079b      	lsls	r3, r3, #30
 8005de6:	f100 8102 	bmi.w	8005fee <_printf_float+0x44e>
 8005dea:	68e0      	ldr	r0, [r4, #12]
 8005dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dee:	4298      	cmp	r0, r3
 8005df0:	bfb8      	it	lt
 8005df2:	4618      	movlt	r0, r3
 8005df4:	e731      	b.n	8005c5a <_printf_float+0xba>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4652      	mov	r2, sl
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f af28 	beq.w	8005c56 <_printf_float+0xb6>
 8005e06:	f109 0901 	add.w	r9, r9, #1
 8005e0a:	e7e8      	b.n	8005dde <_printf_float+0x23e>
 8005e0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	dc38      	bgt.n	8005e84 <_printf_float+0x2e4>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4631      	mov	r1, r6
 8005e16:	4628      	mov	r0, r5
 8005e18:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <_printf_float+0x2e0>)
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f43f af1a 	beq.w	8005c56 <_printf_float+0xb6>
 8005e22:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005e26:	ea59 0303 	orrs.w	r3, r9, r3
 8005e2a:	d102      	bne.n	8005e32 <_printf_float+0x292>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	07d9      	lsls	r1, r3, #31
 8005e30:	d5d7      	bpl.n	8005de2 <_printf_float+0x242>
 8005e32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f af0a 	beq.w	8005c56 <_printf_float+0xb6>
 8005e42:	f04f 0a00 	mov.w	sl, #0
 8005e46:	f104 0b1a 	add.w	fp, r4, #26
 8005e4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e4c:	425b      	negs	r3, r3
 8005e4e:	4553      	cmp	r3, sl
 8005e50:	dc01      	bgt.n	8005e56 <_printf_float+0x2b6>
 8005e52:	464b      	mov	r3, r9
 8005e54:	e793      	b.n	8005d7e <_printf_float+0x1de>
 8005e56:	2301      	movs	r3, #1
 8005e58:	465a      	mov	r2, fp
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f aef8 	beq.w	8005c56 <_printf_float+0xb6>
 8005e66:	f10a 0a01 	add.w	sl, sl, #1
 8005e6a:	e7ee      	b.n	8005e4a <_printf_float+0x2aa>
 8005e6c:	7fefffff 	.word	0x7fefffff
 8005e70:	0800c422 	.word	0x0800c422
 8005e74:	0800c426 	.word	0x0800c426
 8005e78:	0800c42a 	.word	0x0800c42a
 8005e7c:	0800c42e 	.word	0x0800c42e
 8005e80:	0800c432 	.word	0x0800c432
 8005e84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e86:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e8a:	4553      	cmp	r3, sl
 8005e8c:	bfa8      	it	ge
 8005e8e:	4653      	movge	r3, sl
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	4699      	mov	r9, r3
 8005e94:	dc36      	bgt.n	8005f04 <_printf_float+0x364>
 8005e96:	f04f 0b00 	mov.w	fp, #0
 8005e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9e:	f104 021a 	add.w	r2, r4, #26
 8005ea2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ea4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ea6:	eba3 0309 	sub.w	r3, r3, r9
 8005eaa:	455b      	cmp	r3, fp
 8005eac:	dc31      	bgt.n	8005f12 <_printf_float+0x372>
 8005eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005eb0:	459a      	cmp	sl, r3
 8005eb2:	dc3a      	bgt.n	8005f2a <_printf_float+0x38a>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	07da      	lsls	r2, r3, #31
 8005eb8:	d437      	bmi.n	8005f2a <_printf_float+0x38a>
 8005eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ebc:	ebaa 0903 	sub.w	r9, sl, r3
 8005ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ec6:	4599      	cmp	r9, r3
 8005ec8:	bfa8      	it	ge
 8005eca:	4699      	movge	r9, r3
 8005ecc:	f1b9 0f00 	cmp.w	r9, #0
 8005ed0:	dc33      	bgt.n	8005f3a <_printf_float+0x39a>
 8005ed2:	f04f 0800 	mov.w	r8, #0
 8005ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eda:	f104 0b1a 	add.w	fp, r4, #26
 8005ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ee4:	eba3 0309 	sub.w	r3, r3, r9
 8005ee8:	4543      	cmp	r3, r8
 8005eea:	f77f af7a 	ble.w	8005de2 <_printf_float+0x242>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	465a      	mov	r2, fp
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f43f aeac 	beq.w	8005c56 <_printf_float+0xb6>
 8005efe:	f108 0801 	add.w	r8, r8, #1
 8005f02:	e7ec      	b.n	8005ede <_printf_float+0x33e>
 8005f04:	4642      	mov	r2, r8
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1c2      	bne.n	8005e96 <_printf_float+0x2f6>
 8005f10:	e6a1      	b.n	8005c56 <_printf_float+0xb6>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae9a 	beq.w	8005c56 <_printf_float+0xb6>
 8005f22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f24:	f10b 0b01 	add.w	fp, fp, #1
 8005f28:	e7bb      	b.n	8005ea2 <_printf_float+0x302>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	d1c0      	bne.n	8005eba <_printf_float+0x31a>
 8005f38:	e68d      	b.n	8005c56 <_printf_float+0xb6>
 8005f3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	4442      	add	r2, r8
 8005f44:	47b8      	blx	r7
 8005f46:	3001      	adds	r0, #1
 8005f48:	d1c3      	bne.n	8005ed2 <_printf_float+0x332>
 8005f4a:	e684      	b.n	8005c56 <_printf_float+0xb6>
 8005f4c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f50:	f1ba 0f01 	cmp.w	sl, #1
 8005f54:	dc01      	bgt.n	8005f5a <_printf_float+0x3ba>
 8005f56:	07db      	lsls	r3, r3, #31
 8005f58:	d536      	bpl.n	8005fc8 <_printf_float+0x428>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	f43f ae76 	beq.w	8005c56 <_printf_float+0xb6>
 8005f6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f ae6e 	beq.w	8005c56 <_printf_float+0xb6>
 8005f7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2300      	movs	r3, #0
 8005f82:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005f86:	f7fa fd0f 	bl	80009a8 <__aeabi_dcmpeq>
 8005f8a:	b9c0      	cbnz	r0, 8005fbe <_printf_float+0x41e>
 8005f8c:	4653      	mov	r3, sl
 8005f8e:	f108 0201 	add.w	r2, r8, #1
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d10c      	bne.n	8005fb6 <_printf_float+0x416>
 8005f9c:	e65b      	b.n	8005c56 <_printf_float+0xb6>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	465a      	mov	r2, fp
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae54 	beq.w	8005c56 <_printf_float+0xb6>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	45d0      	cmp	r8, sl
 8005fb4:	dbf3      	blt.n	8005f9e <_printf_float+0x3fe>
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fbc:	e6e0      	b.n	8005d80 <_printf_float+0x1e0>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	f104 0b1a 	add.w	fp, r4, #26
 8005fc6:	e7f4      	b.n	8005fb2 <_printf_float+0x412>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4642      	mov	r2, r8
 8005fcc:	e7e1      	b.n	8005f92 <_printf_float+0x3f2>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	464a      	mov	r2, r9
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	f43f ae3c 	beq.w	8005c56 <_printf_float+0xb6>
 8005fde:	f108 0801 	add.w	r8, r8, #1
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005fe6:	1a5b      	subs	r3, r3, r1
 8005fe8:	4543      	cmp	r3, r8
 8005fea:	dcf0      	bgt.n	8005fce <_printf_float+0x42e>
 8005fec:	e6fd      	b.n	8005dea <_printf_float+0x24a>
 8005fee:	f04f 0800 	mov.w	r8, #0
 8005ff2:	f104 0919 	add.w	r9, r4, #25
 8005ff6:	e7f4      	b.n	8005fe2 <_printf_float+0x442>

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	4607      	mov	r7, r0
 8006006:	4293      	cmp	r3, r2
 8006008:	bfb8      	it	lt
 800600a:	4613      	movlt	r3, r2
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006012:	460c      	mov	r4, r1
 8006014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc2b      	bgt.n	8006098 <_printf_common+0xa0>
 8006040:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	3b00      	subs	r3, #0
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d430      	bmi.n	80060b2 <_printf_common+0xba>
 8006050:	4641      	mov	r1, r8
 8006052:	4638      	mov	r0, r7
 8006054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006058:	47c8      	blx	r9
 800605a:	3001      	adds	r0, #1
 800605c:	d023      	beq.n	80060a6 <_printf_common+0xae>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf14      	ite	ne
 800606a:	2500      	movne	r5, #0
 800606c:	6833      	ldreq	r3, [r6, #0]
 800606e:	f04f 0600 	mov.w	r6, #0
 8006072:	bf08      	it	eq
 8006074:	68e5      	ldreq	r5, [r4, #12]
 8006076:	f104 041a 	add.w	r4, r4, #26
 800607a:	bf08      	it	eq
 800607c:	1aed      	subeq	r5, r5, r3
 800607e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006082:	bf08      	it	eq
 8006084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006088:	4293      	cmp	r3, r2
 800608a:	bfc4      	itt	gt
 800608c:	1a9b      	subgt	r3, r3, r2
 800608e:	18ed      	addgt	r5, r5, r3
 8006090:	42b5      	cmp	r5, r6
 8006092:	d11a      	bne.n	80060ca <_printf_common+0xd2>
 8006094:	2000      	movs	r0, #0
 8006096:	e008      	b.n	80060aa <_printf_common+0xb2>
 8006098:	2301      	movs	r3, #1
 800609a:	4652      	mov	r2, sl
 800609c:	4641      	mov	r1, r8
 800609e:	4638      	mov	r0, r7
 80060a0:	47c8      	blx	r9
 80060a2:	3001      	adds	r0, #1
 80060a4:	d103      	bne.n	80060ae <_printf_common+0xb6>
 80060a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ae:	3501      	adds	r5, #1
 80060b0:	e7c1      	b.n	8006036 <_printf_common+0x3e>
 80060b2:	2030      	movs	r0, #48	@ 0x30
 80060b4:	18e1      	adds	r1, r4, r3
 80060b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060c0:	4422      	add	r2, r4
 80060c2:	3302      	adds	r3, #2
 80060c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060c8:	e7c2      	b.n	8006050 <_printf_common+0x58>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4622      	mov	r2, r4
 80060ce:	4641      	mov	r1, r8
 80060d0:	4638      	mov	r0, r7
 80060d2:	47c8      	blx	r9
 80060d4:	3001      	adds	r0, #1
 80060d6:	d0e6      	beq.n	80060a6 <_printf_common+0xae>
 80060d8:	3601      	adds	r6, #1
 80060da:	e7d9      	b.n	8006090 <_printf_common+0x98>

080060dc <_printf_i>:
 80060dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	7e0f      	ldrb	r7, [r1, #24]
 80060e2:	4691      	mov	r9, r2
 80060e4:	2f78      	cmp	r7, #120	@ 0x78
 80060e6:	4680      	mov	r8, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	469a      	mov	sl, r3
 80060ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060f2:	d807      	bhi.n	8006104 <_printf_i+0x28>
 80060f4:	2f62      	cmp	r7, #98	@ 0x62
 80060f6:	d80a      	bhi.n	800610e <_printf_i+0x32>
 80060f8:	2f00      	cmp	r7, #0
 80060fa:	f000 80d3 	beq.w	80062a4 <_printf_i+0x1c8>
 80060fe:	2f58      	cmp	r7, #88	@ 0x58
 8006100:	f000 80ba 	beq.w	8006278 <_printf_i+0x19c>
 8006104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006108:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800610c:	e03a      	b.n	8006184 <_printf_i+0xa8>
 800610e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006112:	2b15      	cmp	r3, #21
 8006114:	d8f6      	bhi.n	8006104 <_printf_i+0x28>
 8006116:	a101      	add	r1, pc, #4	@ (adr r1, 800611c <_printf_i+0x40>)
 8006118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800611c:	08006175 	.word	0x08006175
 8006120:	08006189 	.word	0x08006189
 8006124:	08006105 	.word	0x08006105
 8006128:	08006105 	.word	0x08006105
 800612c:	08006105 	.word	0x08006105
 8006130:	08006105 	.word	0x08006105
 8006134:	08006189 	.word	0x08006189
 8006138:	08006105 	.word	0x08006105
 800613c:	08006105 	.word	0x08006105
 8006140:	08006105 	.word	0x08006105
 8006144:	08006105 	.word	0x08006105
 8006148:	0800628b 	.word	0x0800628b
 800614c:	080061b3 	.word	0x080061b3
 8006150:	08006245 	.word	0x08006245
 8006154:	08006105 	.word	0x08006105
 8006158:	08006105 	.word	0x08006105
 800615c:	080062ad 	.word	0x080062ad
 8006160:	08006105 	.word	0x08006105
 8006164:	080061b3 	.word	0x080061b3
 8006168:	08006105 	.word	0x08006105
 800616c:	08006105 	.word	0x08006105
 8006170:	0800624d 	.word	0x0800624d
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6032      	str	r2, [r6, #0]
 800617c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006180:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006184:	2301      	movs	r3, #1
 8006186:	e09e      	b.n	80062c6 <_printf_i+0x1ea>
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	1d19      	adds	r1, r3, #4
 800618e:	6031      	str	r1, [r6, #0]
 8006190:	0606      	lsls	r6, r0, #24
 8006192:	d501      	bpl.n	8006198 <_printf_i+0xbc>
 8006194:	681d      	ldr	r5, [r3, #0]
 8006196:	e003      	b.n	80061a0 <_printf_i+0xc4>
 8006198:	0645      	lsls	r5, r0, #25
 800619a:	d5fb      	bpl.n	8006194 <_printf_i+0xb8>
 800619c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061a0:	2d00      	cmp	r5, #0
 80061a2:	da03      	bge.n	80061ac <_printf_i+0xd0>
 80061a4:	232d      	movs	r3, #45	@ 0x2d
 80061a6:	426d      	negs	r5, r5
 80061a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ac:	230a      	movs	r3, #10
 80061ae:	4859      	ldr	r0, [pc, #356]	@ (8006314 <_printf_i+0x238>)
 80061b0:	e011      	b.n	80061d6 <_printf_i+0xfa>
 80061b2:	6821      	ldr	r1, [r4, #0]
 80061b4:	6833      	ldr	r3, [r6, #0]
 80061b6:	0608      	lsls	r0, r1, #24
 80061b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80061bc:	d402      	bmi.n	80061c4 <_printf_i+0xe8>
 80061be:	0649      	lsls	r1, r1, #25
 80061c0:	bf48      	it	mi
 80061c2:	b2ad      	uxthmi	r5, r5
 80061c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80061c6:	6033      	str	r3, [r6, #0]
 80061c8:	bf14      	ite	ne
 80061ca:	230a      	movne	r3, #10
 80061cc:	2308      	moveq	r3, #8
 80061ce:	4851      	ldr	r0, [pc, #324]	@ (8006314 <_printf_i+0x238>)
 80061d0:	2100      	movs	r1, #0
 80061d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061d6:	6866      	ldr	r6, [r4, #4]
 80061d8:	2e00      	cmp	r6, #0
 80061da:	bfa8      	it	ge
 80061dc:	6821      	ldrge	r1, [r4, #0]
 80061de:	60a6      	str	r6, [r4, #8]
 80061e0:	bfa4      	itt	ge
 80061e2:	f021 0104 	bicge.w	r1, r1, #4
 80061e6:	6021      	strge	r1, [r4, #0]
 80061e8:	b90d      	cbnz	r5, 80061ee <_printf_i+0x112>
 80061ea:	2e00      	cmp	r6, #0
 80061ec:	d04b      	beq.n	8006286 <_printf_i+0x1aa>
 80061ee:	4616      	mov	r6, r2
 80061f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80061f4:	fb03 5711 	mls	r7, r3, r1, r5
 80061f8:	5dc7      	ldrb	r7, [r0, r7]
 80061fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061fe:	462f      	mov	r7, r5
 8006200:	42bb      	cmp	r3, r7
 8006202:	460d      	mov	r5, r1
 8006204:	d9f4      	bls.n	80061f0 <_printf_i+0x114>
 8006206:	2b08      	cmp	r3, #8
 8006208:	d10b      	bne.n	8006222 <_printf_i+0x146>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	07df      	lsls	r7, r3, #31
 800620e:	d508      	bpl.n	8006222 <_printf_i+0x146>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	6861      	ldr	r1, [r4, #4]
 8006214:	4299      	cmp	r1, r3
 8006216:	bfde      	ittt	le
 8006218:	2330      	movle	r3, #48	@ 0x30
 800621a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800621e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006222:	1b92      	subs	r2, r2, r6
 8006224:	6122      	str	r2, [r4, #16]
 8006226:	464b      	mov	r3, r9
 8006228:	4621      	mov	r1, r4
 800622a:	4640      	mov	r0, r8
 800622c:	f8cd a000 	str.w	sl, [sp]
 8006230:	aa03      	add	r2, sp, #12
 8006232:	f7ff fee1 	bl	8005ff8 <_printf_common>
 8006236:	3001      	adds	r0, #1
 8006238:	d14a      	bne.n	80062d0 <_printf_i+0x1f4>
 800623a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800623e:	b004      	add	sp, #16
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f043 0320 	orr.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	2778      	movs	r7, #120	@ 0x78
 800624e:	4832      	ldr	r0, [pc, #200]	@ (8006318 <_printf_i+0x23c>)
 8006250:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	6831      	ldr	r1, [r6, #0]
 8006258:	061f      	lsls	r7, r3, #24
 800625a:	f851 5b04 	ldr.w	r5, [r1], #4
 800625e:	d402      	bmi.n	8006266 <_printf_i+0x18a>
 8006260:	065f      	lsls	r7, r3, #25
 8006262:	bf48      	it	mi
 8006264:	b2ad      	uxthmi	r5, r5
 8006266:	6031      	str	r1, [r6, #0]
 8006268:	07d9      	lsls	r1, r3, #31
 800626a:	bf44      	itt	mi
 800626c:	f043 0320 	orrmi.w	r3, r3, #32
 8006270:	6023      	strmi	r3, [r4, #0]
 8006272:	b11d      	cbz	r5, 800627c <_printf_i+0x1a0>
 8006274:	2310      	movs	r3, #16
 8006276:	e7ab      	b.n	80061d0 <_printf_i+0xf4>
 8006278:	4826      	ldr	r0, [pc, #152]	@ (8006314 <_printf_i+0x238>)
 800627a:	e7e9      	b.n	8006250 <_printf_i+0x174>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	f023 0320 	bic.w	r3, r3, #32
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	e7f6      	b.n	8006274 <_printf_i+0x198>
 8006286:	4616      	mov	r6, r2
 8006288:	e7bd      	b.n	8006206 <_printf_i+0x12a>
 800628a:	6833      	ldr	r3, [r6, #0]
 800628c:	6825      	ldr	r5, [r4, #0]
 800628e:	1d18      	adds	r0, r3, #4
 8006290:	6961      	ldr	r1, [r4, #20]
 8006292:	6030      	str	r0, [r6, #0]
 8006294:	062e      	lsls	r6, r5, #24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	d501      	bpl.n	800629e <_printf_i+0x1c2>
 800629a:	6019      	str	r1, [r3, #0]
 800629c:	e002      	b.n	80062a4 <_printf_i+0x1c8>
 800629e:	0668      	lsls	r0, r5, #25
 80062a0:	d5fb      	bpl.n	800629a <_printf_i+0x1be>
 80062a2:	8019      	strh	r1, [r3, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	4616      	mov	r6, r2
 80062a8:	6123      	str	r3, [r4, #16]
 80062aa:	e7bc      	b.n	8006226 <_printf_i+0x14a>
 80062ac:	6833      	ldr	r3, [r6, #0]
 80062ae:	2100      	movs	r1, #0
 80062b0:	1d1a      	adds	r2, r3, #4
 80062b2:	6032      	str	r2, [r6, #0]
 80062b4:	681e      	ldr	r6, [r3, #0]
 80062b6:	6862      	ldr	r2, [r4, #4]
 80062b8:	4630      	mov	r0, r6
 80062ba:	f001 fa02 	bl	80076c2 <memchr>
 80062be:	b108      	cbz	r0, 80062c4 <_printf_i+0x1e8>
 80062c0:	1b80      	subs	r0, r0, r6
 80062c2:	6060      	str	r0, [r4, #4]
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	6123      	str	r3, [r4, #16]
 80062c8:	2300      	movs	r3, #0
 80062ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ce:	e7aa      	b.n	8006226 <_printf_i+0x14a>
 80062d0:	4632      	mov	r2, r6
 80062d2:	4649      	mov	r1, r9
 80062d4:	4640      	mov	r0, r8
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	47d0      	blx	sl
 80062da:	3001      	adds	r0, #1
 80062dc:	d0ad      	beq.n	800623a <_printf_i+0x15e>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	079b      	lsls	r3, r3, #30
 80062e2:	d413      	bmi.n	800630c <_printf_i+0x230>
 80062e4:	68e0      	ldr	r0, [r4, #12]
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	4298      	cmp	r0, r3
 80062ea:	bfb8      	it	lt
 80062ec:	4618      	movlt	r0, r3
 80062ee:	e7a6      	b.n	800623e <_printf_i+0x162>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4632      	mov	r2, r6
 80062f4:	4649      	mov	r1, r9
 80062f6:	4640      	mov	r0, r8
 80062f8:	47d0      	blx	sl
 80062fa:	3001      	adds	r0, #1
 80062fc:	d09d      	beq.n	800623a <_printf_i+0x15e>
 80062fe:	3501      	adds	r5, #1
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	9903      	ldr	r1, [sp, #12]
 8006304:	1a5b      	subs	r3, r3, r1
 8006306:	42ab      	cmp	r3, r5
 8006308:	dcf2      	bgt.n	80062f0 <_printf_i+0x214>
 800630a:	e7eb      	b.n	80062e4 <_printf_i+0x208>
 800630c:	2500      	movs	r5, #0
 800630e:	f104 0619 	add.w	r6, r4, #25
 8006312:	e7f5      	b.n	8006300 <_printf_i+0x224>
 8006314:	0800c434 	.word	0x0800c434
 8006318:	0800c445 	.word	0x0800c445

0800631c <_scanf_float>:
 800631c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006320:	b087      	sub	sp, #28
 8006322:	9303      	str	r3, [sp, #12]
 8006324:	688b      	ldr	r3, [r1, #8]
 8006326:	4617      	mov	r7, r2
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800632e:	bf82      	ittt	hi
 8006330:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006334:	eb03 0b05 	addhi.w	fp, r3, r5
 8006338:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800633c:	460a      	mov	r2, r1
 800633e:	f04f 0500 	mov.w	r5, #0
 8006342:	bf88      	it	hi
 8006344:	608b      	strhi	r3, [r1, #8]
 8006346:	680b      	ldr	r3, [r1, #0]
 8006348:	4680      	mov	r8, r0
 800634a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800634e:	f842 3b1c 	str.w	r3, [r2], #28
 8006352:	460c      	mov	r4, r1
 8006354:	bf98      	it	ls
 8006356:	f04f 0b00 	movls.w	fp, #0
 800635a:	4616      	mov	r6, r2
 800635c:	46aa      	mov	sl, r5
 800635e:	46a9      	mov	r9, r5
 8006360:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006364:	9201      	str	r2, [sp, #4]
 8006366:	9502      	str	r5, [sp, #8]
 8006368:	68a2      	ldr	r2, [r4, #8]
 800636a:	b152      	cbz	r2, 8006382 <_scanf_float+0x66>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b4e      	cmp	r3, #78	@ 0x4e
 8006372:	d865      	bhi.n	8006440 <_scanf_float+0x124>
 8006374:	2b40      	cmp	r3, #64	@ 0x40
 8006376:	d83d      	bhi.n	80063f4 <_scanf_float+0xd8>
 8006378:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800637c:	b2c8      	uxtb	r0, r1
 800637e:	280e      	cmp	r0, #14
 8006380:	d93b      	bls.n	80063fa <_scanf_float+0xde>
 8006382:	f1b9 0f00 	cmp.w	r9, #0
 8006386:	d003      	beq.n	8006390 <_scanf_float+0x74>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006394:	f1ba 0f01 	cmp.w	sl, #1
 8006398:	f200 8118 	bhi.w	80065cc <_scanf_float+0x2b0>
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	429e      	cmp	r6, r3
 80063a0:	f200 8109 	bhi.w	80065b6 <_scanf_float+0x29a>
 80063a4:	2001      	movs	r0, #1
 80063a6:	b007      	add	sp, #28
 80063a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ac:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80063b0:	2a0d      	cmp	r2, #13
 80063b2:	d8e6      	bhi.n	8006382 <_scanf_float+0x66>
 80063b4:	a101      	add	r1, pc, #4	@ (adr r1, 80063bc <_scanf_float+0xa0>)
 80063b6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	08006503 	.word	0x08006503
 80063c0:	08006383 	.word	0x08006383
 80063c4:	08006383 	.word	0x08006383
 80063c8:	08006383 	.word	0x08006383
 80063cc:	08006563 	.word	0x08006563
 80063d0:	0800653b 	.word	0x0800653b
 80063d4:	08006383 	.word	0x08006383
 80063d8:	08006383 	.word	0x08006383
 80063dc:	08006511 	.word	0x08006511
 80063e0:	08006383 	.word	0x08006383
 80063e4:	08006383 	.word	0x08006383
 80063e8:	08006383 	.word	0x08006383
 80063ec:	08006383 	.word	0x08006383
 80063f0:	080064c9 	.word	0x080064c9
 80063f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80063f8:	e7da      	b.n	80063b0 <_scanf_float+0x94>
 80063fa:	290e      	cmp	r1, #14
 80063fc:	d8c1      	bhi.n	8006382 <_scanf_float+0x66>
 80063fe:	a001      	add	r0, pc, #4	@ (adr r0, 8006404 <_scanf_float+0xe8>)
 8006400:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006404:	080064b9 	.word	0x080064b9
 8006408:	08006383 	.word	0x08006383
 800640c:	080064b9 	.word	0x080064b9
 8006410:	0800654f 	.word	0x0800654f
 8006414:	08006383 	.word	0x08006383
 8006418:	08006461 	.word	0x08006461
 800641c:	0800649f 	.word	0x0800649f
 8006420:	0800649f 	.word	0x0800649f
 8006424:	0800649f 	.word	0x0800649f
 8006428:	0800649f 	.word	0x0800649f
 800642c:	0800649f 	.word	0x0800649f
 8006430:	0800649f 	.word	0x0800649f
 8006434:	0800649f 	.word	0x0800649f
 8006438:	0800649f 	.word	0x0800649f
 800643c:	0800649f 	.word	0x0800649f
 8006440:	2b6e      	cmp	r3, #110	@ 0x6e
 8006442:	d809      	bhi.n	8006458 <_scanf_float+0x13c>
 8006444:	2b60      	cmp	r3, #96	@ 0x60
 8006446:	d8b1      	bhi.n	80063ac <_scanf_float+0x90>
 8006448:	2b54      	cmp	r3, #84	@ 0x54
 800644a:	d07b      	beq.n	8006544 <_scanf_float+0x228>
 800644c:	2b59      	cmp	r3, #89	@ 0x59
 800644e:	d198      	bne.n	8006382 <_scanf_float+0x66>
 8006450:	2d07      	cmp	r5, #7
 8006452:	d196      	bne.n	8006382 <_scanf_float+0x66>
 8006454:	2508      	movs	r5, #8
 8006456:	e02c      	b.n	80064b2 <_scanf_float+0x196>
 8006458:	2b74      	cmp	r3, #116	@ 0x74
 800645a:	d073      	beq.n	8006544 <_scanf_float+0x228>
 800645c:	2b79      	cmp	r3, #121	@ 0x79
 800645e:	e7f6      	b.n	800644e <_scanf_float+0x132>
 8006460:	6821      	ldr	r1, [r4, #0]
 8006462:	05c8      	lsls	r0, r1, #23
 8006464:	d51b      	bpl.n	800649e <_scanf_float+0x182>
 8006466:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800646a:	6021      	str	r1, [r4, #0]
 800646c:	f109 0901 	add.w	r9, r9, #1
 8006470:	f1bb 0f00 	cmp.w	fp, #0
 8006474:	d003      	beq.n	800647e <_scanf_float+0x162>
 8006476:	3201      	adds	r2, #1
 8006478:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800647c:	60a2      	str	r2, [r4, #8]
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	3b01      	subs	r3, #1
 8006482:	60a3      	str	r3, [r4, #8]
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	3301      	adds	r3, #1
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3b01      	subs	r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	f340 8087 	ble.w	80065a4 <_scanf_float+0x288>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	e764      	b.n	8006368 <_scanf_float+0x4c>
 800649e:	eb1a 0105 	adds.w	r1, sl, r5
 80064a2:	f47f af6e 	bne.w	8006382 <_scanf_float+0x66>
 80064a6:	460d      	mov	r5, r1
 80064a8:	468a      	mov	sl, r1
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	f806 3b01 	strb.w	r3, [r6], #1
 80064b6:	e7e2      	b.n	800647e <_scanf_float+0x162>
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	0610      	lsls	r0, r2, #24
 80064bc:	f57f af61 	bpl.w	8006382 <_scanf_float+0x66>
 80064c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064c4:	6022      	str	r2, [r4, #0]
 80064c6:	e7f4      	b.n	80064b2 <_scanf_float+0x196>
 80064c8:	f1ba 0f00 	cmp.w	sl, #0
 80064cc:	d10e      	bne.n	80064ec <_scanf_float+0x1d0>
 80064ce:	f1b9 0f00 	cmp.w	r9, #0
 80064d2:	d10e      	bne.n	80064f2 <_scanf_float+0x1d6>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80064da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80064de:	d108      	bne.n	80064f2 <_scanf_float+0x1d6>
 80064e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80064e4:	f04f 0a01 	mov.w	sl, #1
 80064e8:	6022      	str	r2, [r4, #0]
 80064ea:	e7e2      	b.n	80064b2 <_scanf_float+0x196>
 80064ec:	f1ba 0f02 	cmp.w	sl, #2
 80064f0:	d055      	beq.n	800659e <_scanf_float+0x282>
 80064f2:	2d01      	cmp	r5, #1
 80064f4:	d002      	beq.n	80064fc <_scanf_float+0x1e0>
 80064f6:	2d04      	cmp	r5, #4
 80064f8:	f47f af43 	bne.w	8006382 <_scanf_float+0x66>
 80064fc:	3501      	adds	r5, #1
 80064fe:	b2ed      	uxtb	r5, r5
 8006500:	e7d7      	b.n	80064b2 <_scanf_float+0x196>
 8006502:	f1ba 0f01 	cmp.w	sl, #1
 8006506:	f47f af3c 	bne.w	8006382 <_scanf_float+0x66>
 800650a:	f04f 0a02 	mov.w	sl, #2
 800650e:	e7d0      	b.n	80064b2 <_scanf_float+0x196>
 8006510:	b97d      	cbnz	r5, 8006532 <_scanf_float+0x216>
 8006512:	f1b9 0f00 	cmp.w	r9, #0
 8006516:	f47f af37 	bne.w	8006388 <_scanf_float+0x6c>
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006520:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006524:	f040 8103 	bne.w	800672e <_scanf_float+0x412>
 8006528:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800652c:	2501      	movs	r5, #1
 800652e:	6022      	str	r2, [r4, #0]
 8006530:	e7bf      	b.n	80064b2 <_scanf_float+0x196>
 8006532:	2d03      	cmp	r5, #3
 8006534:	d0e2      	beq.n	80064fc <_scanf_float+0x1e0>
 8006536:	2d05      	cmp	r5, #5
 8006538:	e7de      	b.n	80064f8 <_scanf_float+0x1dc>
 800653a:	2d02      	cmp	r5, #2
 800653c:	f47f af21 	bne.w	8006382 <_scanf_float+0x66>
 8006540:	2503      	movs	r5, #3
 8006542:	e7b6      	b.n	80064b2 <_scanf_float+0x196>
 8006544:	2d06      	cmp	r5, #6
 8006546:	f47f af1c 	bne.w	8006382 <_scanf_float+0x66>
 800654a:	2507      	movs	r5, #7
 800654c:	e7b1      	b.n	80064b2 <_scanf_float+0x196>
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	0591      	lsls	r1, r2, #22
 8006552:	f57f af16 	bpl.w	8006382 <_scanf_float+0x66>
 8006556:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800655a:	6022      	str	r2, [r4, #0]
 800655c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006560:	e7a7      	b.n	80064b2 <_scanf_float+0x196>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006568:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800656c:	d006      	beq.n	800657c <_scanf_float+0x260>
 800656e:	0550      	lsls	r0, r2, #21
 8006570:	f57f af07 	bpl.w	8006382 <_scanf_float+0x66>
 8006574:	f1b9 0f00 	cmp.w	r9, #0
 8006578:	f000 80d9 	beq.w	800672e <_scanf_float+0x412>
 800657c:	0591      	lsls	r1, r2, #22
 800657e:	bf58      	it	pl
 8006580:	9902      	ldrpl	r1, [sp, #8]
 8006582:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006586:	bf58      	it	pl
 8006588:	eba9 0101 	subpl.w	r1, r9, r1
 800658c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006590:	f04f 0900 	mov.w	r9, #0
 8006594:	bf58      	it	pl
 8006596:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800659a:	6022      	str	r2, [r4, #0]
 800659c:	e789      	b.n	80064b2 <_scanf_float+0x196>
 800659e:	f04f 0a03 	mov.w	sl, #3
 80065a2:	e786      	b.n	80064b2 <_scanf_float+0x196>
 80065a4:	4639      	mov	r1, r7
 80065a6:	4640      	mov	r0, r8
 80065a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80065ac:	4798      	blx	r3
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f43f aeda 	beq.w	8006368 <_scanf_float+0x4c>
 80065b4:	e6e5      	b.n	8006382 <_scanf_float+0x66>
 80065b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065ba:	463a      	mov	r2, r7
 80065bc:	4640      	mov	r0, r8
 80065be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065c2:	4798      	blx	r3
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	e6e7      	b.n	800639c <_scanf_float+0x80>
 80065cc:	1e6b      	subs	r3, r5, #1
 80065ce:	2b06      	cmp	r3, #6
 80065d0:	d824      	bhi.n	800661c <_scanf_float+0x300>
 80065d2:	2d02      	cmp	r5, #2
 80065d4:	d836      	bhi.n	8006644 <_scanf_float+0x328>
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	429e      	cmp	r6, r3
 80065da:	f67f aee3 	bls.w	80063a4 <_scanf_float+0x88>
 80065de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065e2:	463a      	mov	r2, r7
 80065e4:	4640      	mov	r0, r8
 80065e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065ea:	4798      	blx	r3
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	e7f0      	b.n	80065d6 <_scanf_float+0x2ba>
 80065f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065f8:	463a      	mov	r2, r7
 80065fa:	4640      	mov	r0, r8
 80065fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006600:	4798      	blx	r3
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	3b01      	subs	r3, #1
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800660c:	fa5f fa8a 	uxtb.w	sl, sl
 8006610:	f1ba 0f02 	cmp.w	sl, #2
 8006614:	d1ee      	bne.n	80065f4 <_scanf_float+0x2d8>
 8006616:	3d03      	subs	r5, #3
 8006618:	b2ed      	uxtb	r5, r5
 800661a:	1b76      	subs	r6, r6, r5
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	05da      	lsls	r2, r3, #23
 8006620:	d530      	bpl.n	8006684 <_scanf_float+0x368>
 8006622:	055b      	lsls	r3, r3, #21
 8006624:	d511      	bpl.n	800664a <_scanf_float+0x32e>
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	429e      	cmp	r6, r3
 800662a:	f67f aebb 	bls.w	80063a4 <_scanf_float+0x88>
 800662e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006632:	463a      	mov	r2, r7
 8006634:	4640      	mov	r0, r8
 8006636:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800663a:	4798      	blx	r3
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	3b01      	subs	r3, #1
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	e7f0      	b.n	8006626 <_scanf_float+0x30a>
 8006644:	46aa      	mov	sl, r5
 8006646:	46b3      	mov	fp, r6
 8006648:	e7de      	b.n	8006608 <_scanf_float+0x2ec>
 800664a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	2965      	cmp	r1, #101	@ 0x65
 8006652:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006656:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800665a:	6123      	str	r3, [r4, #16]
 800665c:	d00c      	beq.n	8006678 <_scanf_float+0x35c>
 800665e:	2945      	cmp	r1, #69	@ 0x45
 8006660:	d00a      	beq.n	8006678 <_scanf_float+0x35c>
 8006662:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006666:	463a      	mov	r2, r7
 8006668:	4640      	mov	r0, r8
 800666a:	4798      	blx	r3
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006672:	3b01      	subs	r3, #1
 8006674:	1eb5      	subs	r5, r6, #2
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	463a      	mov	r2, r7
 800667a:	4640      	mov	r0, r8
 800667c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006680:	4798      	blx	r3
 8006682:	462e      	mov	r6, r5
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	f012 0210 	ands.w	r2, r2, #16
 800668a:	d001      	beq.n	8006690 <_scanf_float+0x374>
 800668c:	2000      	movs	r0, #0
 800668e:	e68a      	b.n	80063a6 <_scanf_float+0x8a>
 8006690:	7032      	strb	r2, [r6, #0]
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669c:	d11c      	bne.n	80066d8 <_scanf_float+0x3bc>
 800669e:	9b02      	ldr	r3, [sp, #8]
 80066a0:	454b      	cmp	r3, r9
 80066a2:	eba3 0209 	sub.w	r2, r3, r9
 80066a6:	d123      	bne.n	80066f0 <_scanf_float+0x3d4>
 80066a8:	2200      	movs	r2, #0
 80066aa:	4640      	mov	r0, r8
 80066ac:	9901      	ldr	r1, [sp, #4]
 80066ae:	f000 ff03 	bl	80074b8 <_strtod_r>
 80066b2:	9b03      	ldr	r3, [sp, #12]
 80066b4:	6825      	ldr	r5, [r4, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f015 0f02 	tst.w	r5, #2
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	f103 0204 	add.w	r2, r3, #4
 80066c4:	d01f      	beq.n	8006706 <_scanf_float+0x3ea>
 80066c6:	9903      	ldr	r1, [sp, #12]
 80066c8:	600a      	str	r2, [r1, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	e9c3 6700 	strd	r6, r7, [r3]
 80066d0:	68e3      	ldr	r3, [r4, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60e3      	str	r3, [r4, #12]
 80066d6:	e7d9      	b.n	800668c <_scanf_float+0x370>
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0e4      	beq.n	80066a8 <_scanf_float+0x38c>
 80066de:	9905      	ldr	r1, [sp, #20]
 80066e0:	230a      	movs	r3, #10
 80066e2:	4640      	mov	r0, r8
 80066e4:	3101      	adds	r1, #1
 80066e6:	f000 ff67 	bl	80075b8 <_strtol_r>
 80066ea:	9b04      	ldr	r3, [sp, #16]
 80066ec:	9e05      	ldr	r6, [sp, #20]
 80066ee:	1ac2      	subs	r2, r0, r3
 80066f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80066f4:	429e      	cmp	r6, r3
 80066f6:	bf28      	it	cs
 80066f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80066fc:	4630      	mov	r0, r6
 80066fe:	490d      	ldr	r1, [pc, #52]	@ (8006734 <_scanf_float+0x418>)
 8006700:	f000 f81c 	bl	800673c <siprintf>
 8006704:	e7d0      	b.n	80066a8 <_scanf_float+0x38c>
 8006706:	076d      	lsls	r5, r5, #29
 8006708:	d4dd      	bmi.n	80066c6 <_scanf_float+0x3aa>
 800670a:	9d03      	ldr	r5, [sp, #12]
 800670c:	602a      	str	r2, [r5, #0]
 800670e:	681d      	ldr	r5, [r3, #0]
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	f7fa f97a 	bl	8000a0c <__aeabi_dcmpun>
 8006718:	b120      	cbz	r0, 8006724 <_scanf_float+0x408>
 800671a:	4807      	ldr	r0, [pc, #28]	@ (8006738 <_scanf_float+0x41c>)
 800671c:	f000 fff4 	bl	8007708 <nanf>
 8006720:	6028      	str	r0, [r5, #0]
 8006722:	e7d5      	b.n	80066d0 <_scanf_float+0x3b4>
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7fa f9ce 	bl	8000ac8 <__aeabi_d2f>
 800672c:	e7f8      	b.n	8006720 <_scanf_float+0x404>
 800672e:	f04f 0900 	mov.w	r9, #0
 8006732:	e62d      	b.n	8006390 <_scanf_float+0x74>
 8006734:	0800c456 	.word	0x0800c456
 8006738:	0800c84b 	.word	0x0800c84b

0800673c <siprintf>:
 800673c:	b40e      	push	{r1, r2, r3}
 800673e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006742:	b500      	push	{lr}
 8006744:	b09c      	sub	sp, #112	@ 0x70
 8006746:	ab1d      	add	r3, sp, #116	@ 0x74
 8006748:	9002      	str	r0, [sp, #8]
 800674a:	9006      	str	r0, [sp, #24]
 800674c:	9107      	str	r1, [sp, #28]
 800674e:	9104      	str	r1, [sp, #16]
 8006750:	4808      	ldr	r0, [pc, #32]	@ (8006774 <siprintf+0x38>)
 8006752:	4909      	ldr	r1, [pc, #36]	@ (8006778 <siprintf+0x3c>)
 8006754:	f853 2b04 	ldr.w	r2, [r3], #4
 8006758:	9105      	str	r1, [sp, #20]
 800675a:	6800      	ldr	r0, [r0, #0]
 800675c:	a902      	add	r1, sp, #8
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	f002 f9ba 	bl	8008ad8 <_svfiprintf_r>
 8006764:	2200      	movs	r2, #0
 8006766:	9b02      	ldr	r3, [sp, #8]
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	b01c      	add	sp, #112	@ 0x70
 800676c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006770:	b003      	add	sp, #12
 8006772:	4770      	bx	lr
 8006774:	200001ac 	.word	0x200001ac
 8006778:	ffff0208 	.word	0xffff0208

0800677c <std>:
 800677c:	2300      	movs	r3, #0
 800677e:	b510      	push	{r4, lr}
 8006780:	4604      	mov	r4, r0
 8006782:	e9c0 3300 	strd	r3, r3, [r0]
 8006786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800678a:	6083      	str	r3, [r0, #8]
 800678c:	8181      	strh	r1, [r0, #12]
 800678e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006790:	81c2      	strh	r2, [r0, #14]
 8006792:	6183      	str	r3, [r0, #24]
 8006794:	4619      	mov	r1, r3
 8006796:	2208      	movs	r2, #8
 8006798:	305c      	adds	r0, #92	@ 0x5c
 800679a:	f000 ff59 	bl	8007650 <memset>
 800679e:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <std+0x58>)
 80067a0:	6224      	str	r4, [r4, #32]
 80067a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <std+0x5c>)
 80067a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067a8:	4b0c      	ldr	r3, [pc, #48]	@ (80067dc <std+0x60>)
 80067aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067ac:	4b0c      	ldr	r3, [pc, #48]	@ (80067e0 <std+0x64>)
 80067ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80067b0:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <std+0x68>)
 80067b2:	429c      	cmp	r4, r3
 80067b4:	d006      	beq.n	80067c4 <std+0x48>
 80067b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067ba:	4294      	cmp	r4, r2
 80067bc:	d002      	beq.n	80067c4 <std+0x48>
 80067be:	33d0      	adds	r3, #208	@ 0xd0
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d105      	bne.n	80067d0 <std+0x54>
 80067c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067cc:	f000 bf76 	b.w	80076bc <__retarget_lock_init_recursive>
 80067d0:	bd10      	pop	{r4, pc}
 80067d2:	bf00      	nop
 80067d4:	080098fd 	.word	0x080098fd
 80067d8:	0800991f 	.word	0x0800991f
 80067dc:	08009957 	.word	0x08009957
 80067e0:	0800997b 	.word	0x0800997b
 80067e4:	200007b8 	.word	0x200007b8

080067e8 <stdio_exit_handler>:
 80067e8:	4a02      	ldr	r2, [pc, #8]	@ (80067f4 <stdio_exit_handler+0xc>)
 80067ea:	4903      	ldr	r1, [pc, #12]	@ (80067f8 <stdio_exit_handler+0x10>)
 80067ec:	4803      	ldr	r0, [pc, #12]	@ (80067fc <stdio_exit_handler+0x14>)
 80067ee:	f000 bee5 	b.w	80075bc <_fwalk_sglue>
 80067f2:	bf00      	nop
 80067f4:	20000034 	.word	0x20000034
 80067f8:	08008f49 	.word	0x08008f49
 80067fc:	200001b0 	.word	0x200001b0

08006800 <cleanup_stdio>:
 8006800:	6841      	ldr	r1, [r0, #4]
 8006802:	4b0c      	ldr	r3, [pc, #48]	@ (8006834 <cleanup_stdio+0x34>)
 8006804:	b510      	push	{r4, lr}
 8006806:	4299      	cmp	r1, r3
 8006808:	4604      	mov	r4, r0
 800680a:	d001      	beq.n	8006810 <cleanup_stdio+0x10>
 800680c:	f002 fb9c 	bl	8008f48 <_fflush_r>
 8006810:	68a1      	ldr	r1, [r4, #8]
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <cleanup_stdio+0x38>)
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <cleanup_stdio+0x1e>
 8006818:	4620      	mov	r0, r4
 800681a:	f002 fb95 	bl	8008f48 <_fflush_r>
 800681e:	68e1      	ldr	r1, [r4, #12]
 8006820:	4b06      	ldr	r3, [pc, #24]	@ (800683c <cleanup_stdio+0x3c>)
 8006822:	4299      	cmp	r1, r3
 8006824:	d004      	beq.n	8006830 <cleanup_stdio+0x30>
 8006826:	4620      	mov	r0, r4
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f002 bb8c 	b.w	8008f48 <_fflush_r>
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	200007b8 	.word	0x200007b8
 8006838:	20000820 	.word	0x20000820
 800683c:	20000888 	.word	0x20000888

08006840 <global_stdio_init.part.0>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <global_stdio_init.part.0+0x30>)
 8006844:	4c0b      	ldr	r4, [pc, #44]	@ (8006874 <global_stdio_init.part.0+0x34>)
 8006846:	4a0c      	ldr	r2, [pc, #48]	@ (8006878 <global_stdio_init.part.0+0x38>)
 8006848:	4620      	mov	r0, r4
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	2104      	movs	r1, #4
 800684e:	2200      	movs	r2, #0
 8006850:	f7ff ff94 	bl	800677c <std>
 8006854:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006858:	2201      	movs	r2, #1
 800685a:	2109      	movs	r1, #9
 800685c:	f7ff ff8e 	bl	800677c <std>
 8006860:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006864:	2202      	movs	r2, #2
 8006866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800686a:	2112      	movs	r1, #18
 800686c:	f7ff bf86 	b.w	800677c <std>
 8006870:	200008f0 	.word	0x200008f0
 8006874:	200007b8 	.word	0x200007b8
 8006878:	080067e9 	.word	0x080067e9

0800687c <__sfp_lock_acquire>:
 800687c:	4801      	ldr	r0, [pc, #4]	@ (8006884 <__sfp_lock_acquire+0x8>)
 800687e:	f000 bf1e 	b.w	80076be <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	200008f5 	.word	0x200008f5

08006888 <__sfp_lock_release>:
 8006888:	4801      	ldr	r0, [pc, #4]	@ (8006890 <__sfp_lock_release+0x8>)
 800688a:	f000 bf19 	b.w	80076c0 <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	200008f5 	.word	0x200008f5

08006894 <__sinit>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
 8006898:	f7ff fff0 	bl	800687c <__sfp_lock_acquire>
 800689c:	6a23      	ldr	r3, [r4, #32]
 800689e:	b11b      	cbz	r3, 80068a8 <__sinit+0x14>
 80068a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a4:	f7ff bff0 	b.w	8006888 <__sfp_lock_release>
 80068a8:	4b04      	ldr	r3, [pc, #16]	@ (80068bc <__sinit+0x28>)
 80068aa:	6223      	str	r3, [r4, #32]
 80068ac:	4b04      	ldr	r3, [pc, #16]	@ (80068c0 <__sinit+0x2c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f5      	bne.n	80068a0 <__sinit+0xc>
 80068b4:	f7ff ffc4 	bl	8006840 <global_stdio_init.part.0>
 80068b8:	e7f2      	b.n	80068a0 <__sinit+0xc>
 80068ba:	bf00      	nop
 80068bc:	08006801 	.word	0x08006801
 80068c0:	200008f0 	.word	0x200008f0

080068c4 <sulp>:
 80068c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c8:	460f      	mov	r7, r1
 80068ca:	4690      	mov	r8, r2
 80068cc:	f002 fee2 	bl	8009694 <__ulp>
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	f1b8 0f00 	cmp.w	r8, #0
 80068d8:	d011      	beq.n	80068fe <sulp+0x3a>
 80068da:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80068de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dd0b      	ble.n	80068fe <sulp+0x3a>
 80068e6:	2400      	movs	r4, #0
 80068e8:	051b      	lsls	r3, r3, #20
 80068ea:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80068ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	f7f9 fdef 	bl	80004d8 <__aeabi_dmul>
 80068fa:	4604      	mov	r4, r0
 80068fc:	460d      	mov	r5, r1
 80068fe:	4620      	mov	r0, r4
 8006900:	4629      	mov	r1, r5
 8006902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006908 <_strtod_l>:
 8006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	b09f      	sub	sp, #124	@ 0x7c
 800690e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006910:	2200      	movs	r2, #0
 8006912:	460c      	mov	r4, r1
 8006914:	921a      	str	r2, [sp, #104]	@ 0x68
 8006916:	f04f 0a00 	mov.w	sl, #0
 800691a:	f04f 0b00 	mov.w	fp, #0
 800691e:	460a      	mov	r2, r1
 8006920:	9005      	str	r0, [sp, #20]
 8006922:	9219      	str	r2, [sp, #100]	@ 0x64
 8006924:	7811      	ldrb	r1, [r2, #0]
 8006926:	292b      	cmp	r1, #43	@ 0x2b
 8006928:	d048      	beq.n	80069bc <_strtod_l+0xb4>
 800692a:	d836      	bhi.n	800699a <_strtod_l+0x92>
 800692c:	290d      	cmp	r1, #13
 800692e:	d830      	bhi.n	8006992 <_strtod_l+0x8a>
 8006930:	2908      	cmp	r1, #8
 8006932:	d830      	bhi.n	8006996 <_strtod_l+0x8e>
 8006934:	2900      	cmp	r1, #0
 8006936:	d039      	beq.n	80069ac <_strtod_l+0xa4>
 8006938:	2200      	movs	r2, #0
 800693a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800693c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800693e:	782a      	ldrb	r2, [r5, #0]
 8006940:	2a30      	cmp	r2, #48	@ 0x30
 8006942:	f040 80b1 	bne.w	8006aa8 <_strtod_l+0x1a0>
 8006946:	786a      	ldrb	r2, [r5, #1]
 8006948:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800694c:	2a58      	cmp	r2, #88	@ 0x58
 800694e:	d16c      	bne.n	8006a2a <_strtod_l+0x122>
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006954:	4a8e      	ldr	r2, [pc, #568]	@ (8006b90 <_strtod_l+0x288>)
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	ab1a      	add	r3, sp, #104	@ 0x68
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	9805      	ldr	r0, [sp, #20]
 800695e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006960:	a919      	add	r1, sp, #100	@ 0x64
 8006962:	f001 fd8d 	bl	8008480 <__gethex>
 8006966:	f010 060f 	ands.w	r6, r0, #15
 800696a:	4604      	mov	r4, r0
 800696c:	d005      	beq.n	800697a <_strtod_l+0x72>
 800696e:	2e06      	cmp	r6, #6
 8006970:	d126      	bne.n	80069c0 <_strtod_l+0xb8>
 8006972:	2300      	movs	r3, #0
 8006974:	3501      	adds	r5, #1
 8006976:	9519      	str	r5, [sp, #100]	@ 0x64
 8006978:	930b      	str	r3, [sp, #44]	@ 0x2c
 800697a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8584 	bne.w	800748a <_strtod_l+0xb82>
 8006982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006984:	b1bb      	cbz	r3, 80069b6 <_strtod_l+0xae>
 8006986:	4650      	mov	r0, sl
 8006988:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800698c:	b01f      	add	sp, #124	@ 0x7c
 800698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006992:	2920      	cmp	r1, #32
 8006994:	d1d0      	bne.n	8006938 <_strtod_l+0x30>
 8006996:	3201      	adds	r2, #1
 8006998:	e7c3      	b.n	8006922 <_strtod_l+0x1a>
 800699a:	292d      	cmp	r1, #45	@ 0x2d
 800699c:	d1cc      	bne.n	8006938 <_strtod_l+0x30>
 800699e:	2101      	movs	r1, #1
 80069a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80069a2:	1c51      	adds	r1, r2, #1
 80069a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80069a6:	7852      	ldrb	r2, [r2, #1]
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	d1c7      	bne.n	800693c <_strtod_l+0x34>
 80069ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069ae:	9419      	str	r4, [sp, #100]	@ 0x64
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 8568 	bne.w	8007486 <_strtod_l+0xb7e>
 80069b6:	4650      	mov	r0, sl
 80069b8:	4659      	mov	r1, fp
 80069ba:	e7e7      	b.n	800698c <_strtod_l+0x84>
 80069bc:	2100      	movs	r1, #0
 80069be:	e7ef      	b.n	80069a0 <_strtod_l+0x98>
 80069c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80069c2:	b13a      	cbz	r2, 80069d4 <_strtod_l+0xcc>
 80069c4:	2135      	movs	r1, #53	@ 0x35
 80069c6:	a81c      	add	r0, sp, #112	@ 0x70
 80069c8:	f002 ff54 	bl	8009874 <__copybits>
 80069cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069ce:	9805      	ldr	r0, [sp, #20]
 80069d0:	f002 fb2e 	bl	8009030 <_Bfree>
 80069d4:	3e01      	subs	r6, #1
 80069d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80069d8:	2e04      	cmp	r6, #4
 80069da:	d806      	bhi.n	80069ea <_strtod_l+0xe2>
 80069dc:	e8df f006 	tbb	[pc, r6]
 80069e0:	201d0314 	.word	0x201d0314
 80069e4:	14          	.byte	0x14
 80069e5:	00          	.byte	0x00
 80069e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80069ea:	05e1      	lsls	r1, r4, #23
 80069ec:	bf48      	it	mi
 80069ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80069f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069f6:	0d1b      	lsrs	r3, r3, #20
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1bd      	bne.n	800697a <_strtod_l+0x72>
 80069fe:	f000 fe33 	bl	8007668 <__errno>
 8006a02:	2322      	movs	r3, #34	@ 0x22
 8006a04:	6003      	str	r3, [r0, #0]
 8006a06:	e7b8      	b.n	800697a <_strtod_l+0x72>
 8006a08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006a0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006a10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a14:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a18:	e7e7      	b.n	80069ea <_strtod_l+0xe2>
 8006a1a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006b94 <_strtod_l+0x28c>
 8006a1e:	e7e4      	b.n	80069ea <_strtod_l+0xe2>
 8006a20:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006a24:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006a28:	e7df      	b.n	80069ea <_strtod_l+0xe2>
 8006a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b30      	cmp	r3, #48	@ 0x30
 8006a34:	d0f9      	beq.n	8006a2a <_strtod_l+0x122>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d09f      	beq.n	800697a <_strtod_l+0x72>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a40:	220a      	movs	r2, #10
 8006a42:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a44:	2300      	movs	r3, #0
 8006a46:	461f      	mov	r7, r3
 8006a48:	9308      	str	r3, [sp, #32]
 8006a4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a4c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006a4e:	7805      	ldrb	r5, [r0, #0]
 8006a50:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006a54:	b2d9      	uxtb	r1, r3
 8006a56:	2909      	cmp	r1, #9
 8006a58:	d928      	bls.n	8006aac <_strtod_l+0x1a4>
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	494e      	ldr	r1, [pc, #312]	@ (8006b98 <_strtod_l+0x290>)
 8006a5e:	f000 fdcb 	bl	80075f8 <strncmp>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d032      	beq.n	8006acc <_strtod_l+0x1c4>
 8006a66:	2000      	movs	r0, #0
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4681      	mov	r9, r0
 8006a6c:	463d      	mov	r5, r7
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2a65      	cmp	r2, #101	@ 0x65
 8006a72:	d001      	beq.n	8006a78 <_strtod_l+0x170>
 8006a74:	2a45      	cmp	r2, #69	@ 0x45
 8006a76:	d114      	bne.n	8006aa2 <_strtod_l+0x19a>
 8006a78:	b91d      	cbnz	r5, 8006a82 <_strtod_l+0x17a>
 8006a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a7c:	4302      	orrs	r2, r0
 8006a7e:	d095      	beq.n	80069ac <_strtod_l+0xa4>
 8006a80:	2500      	movs	r5, #0
 8006a82:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a84:	1c62      	adds	r2, r4, #1
 8006a86:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a88:	7862      	ldrb	r2, [r4, #1]
 8006a8a:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a8c:	d077      	beq.n	8006b7e <_strtod_l+0x276>
 8006a8e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a90:	d07b      	beq.n	8006b8a <_strtod_l+0x282>
 8006a92:	f04f 0c00 	mov.w	ip, #0
 8006a96:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a9a:	2909      	cmp	r1, #9
 8006a9c:	f240 8082 	bls.w	8006ba4 <_strtod_l+0x29c>
 8006aa0:	9419      	str	r4, [sp, #100]	@ 0x64
 8006aa2:	f04f 0800 	mov.w	r8, #0
 8006aa6:	e0a2      	b.n	8006bee <_strtod_l+0x2e6>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e7c7      	b.n	8006a3c <_strtod_l+0x134>
 8006aac:	2f08      	cmp	r7, #8
 8006aae:	bfd5      	itete	le
 8006ab0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006ab2:	9908      	ldrgt	r1, [sp, #32]
 8006ab4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ab8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006abc:	f100 0001 	add.w	r0, r0, #1
 8006ac0:	bfd4      	ite	le
 8006ac2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006ac4:	9308      	strgt	r3, [sp, #32]
 8006ac6:	3701      	adds	r7, #1
 8006ac8:	9019      	str	r0, [sp, #100]	@ 0x64
 8006aca:	e7bf      	b.n	8006a4c <_strtod_l+0x144>
 8006acc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ad2:	785a      	ldrb	r2, [r3, #1]
 8006ad4:	b37f      	cbz	r7, 8006b36 <_strtod_l+0x22e>
 8006ad6:	4681      	mov	r9, r0
 8006ad8:	463d      	mov	r5, r7
 8006ada:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006ade:	2b09      	cmp	r3, #9
 8006ae0:	d912      	bls.n	8006b08 <_strtod_l+0x200>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e7c4      	b.n	8006a70 <_strtod_l+0x168>
 8006ae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ae8:	3001      	adds	r0, #1
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	9219      	str	r2, [sp, #100]	@ 0x64
 8006aee:	785a      	ldrb	r2, [r3, #1]
 8006af0:	2a30      	cmp	r2, #48	@ 0x30
 8006af2:	d0f8      	beq.n	8006ae6 <_strtod_l+0x1de>
 8006af4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	f200 84cb 	bhi.w	8007494 <_strtod_l+0xb8c>
 8006afe:	4681      	mov	r9, r0
 8006b00:	2000      	movs	r0, #0
 8006b02:	4605      	mov	r5, r0
 8006b04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b06:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b08:	3a30      	subs	r2, #48	@ 0x30
 8006b0a:	f100 0301 	add.w	r3, r0, #1
 8006b0e:	d02a      	beq.n	8006b66 <_strtod_l+0x25e>
 8006b10:	4499      	add	r9, r3
 8006b12:	210a      	movs	r1, #10
 8006b14:	462b      	mov	r3, r5
 8006b16:	eb00 0c05 	add.w	ip, r0, r5
 8006b1a:	4563      	cmp	r3, ip
 8006b1c:	d10d      	bne.n	8006b3a <_strtod_l+0x232>
 8006b1e:	1c69      	adds	r1, r5, #1
 8006b20:	4401      	add	r1, r0
 8006b22:	4428      	add	r0, r5
 8006b24:	2808      	cmp	r0, #8
 8006b26:	dc16      	bgt.n	8006b56 <_strtod_l+0x24e>
 8006b28:	230a      	movs	r3, #10
 8006b2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b2c:	fb03 2300 	mla	r3, r3, r0, r2
 8006b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b32:	2300      	movs	r3, #0
 8006b34:	e018      	b.n	8006b68 <_strtod_l+0x260>
 8006b36:	4638      	mov	r0, r7
 8006b38:	e7da      	b.n	8006af0 <_strtod_l+0x1e8>
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	f103 0301 	add.w	r3, r3, #1
 8006b40:	dc03      	bgt.n	8006b4a <_strtod_l+0x242>
 8006b42:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006b44:	434e      	muls	r6, r1
 8006b46:	960a      	str	r6, [sp, #40]	@ 0x28
 8006b48:	e7e7      	b.n	8006b1a <_strtod_l+0x212>
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	bfde      	ittt	le
 8006b4e:	9e08      	ldrle	r6, [sp, #32]
 8006b50:	434e      	mulle	r6, r1
 8006b52:	9608      	strle	r6, [sp, #32]
 8006b54:	e7e1      	b.n	8006b1a <_strtod_l+0x212>
 8006b56:	280f      	cmp	r0, #15
 8006b58:	dceb      	bgt.n	8006b32 <_strtod_l+0x22a>
 8006b5a:	230a      	movs	r3, #10
 8006b5c:	9808      	ldr	r0, [sp, #32]
 8006b5e:	fb03 2300 	mla	r3, r3, r0, r2
 8006b62:	9308      	str	r3, [sp, #32]
 8006b64:	e7e5      	b.n	8006b32 <_strtod_l+0x22a>
 8006b66:	4629      	mov	r1, r5
 8006b68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	1c50      	adds	r0, r2, #1
 8006b6e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006b70:	7852      	ldrb	r2, [r2, #1]
 8006b72:	4618      	mov	r0, r3
 8006b74:	e7b1      	b.n	8006ada <_strtod_l+0x1d2>
 8006b76:	f04f 0900 	mov.w	r9, #0
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e77d      	b.n	8006a7a <_strtod_l+0x172>
 8006b7e:	f04f 0c00 	mov.w	ip, #0
 8006b82:	1ca2      	adds	r2, r4, #2
 8006b84:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b86:	78a2      	ldrb	r2, [r4, #2]
 8006b88:	e785      	b.n	8006a96 <_strtod_l+0x18e>
 8006b8a:	f04f 0c01 	mov.w	ip, #1
 8006b8e:	e7f8      	b.n	8006b82 <_strtod_l+0x27a>
 8006b90:	0800c474 	.word	0x0800c474
 8006b94:	7ff00000 	.word	0x7ff00000
 8006b98:	0800c45b 	.word	0x0800c45b
 8006b9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b9e:	1c51      	adds	r1, r2, #1
 8006ba0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006ba2:	7852      	ldrb	r2, [r2, #1]
 8006ba4:	2a30      	cmp	r2, #48	@ 0x30
 8006ba6:	d0f9      	beq.n	8006b9c <_strtod_l+0x294>
 8006ba8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006bac:	2908      	cmp	r1, #8
 8006bae:	f63f af78 	bhi.w	8006aa2 <_strtod_l+0x19a>
 8006bb2:	f04f 080a 	mov.w	r8, #10
 8006bb6:	3a30      	subs	r2, #48	@ 0x30
 8006bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006bbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bc0:	1c56      	adds	r6, r2, #1
 8006bc2:	9619      	str	r6, [sp, #100]	@ 0x64
 8006bc4:	7852      	ldrb	r2, [r2, #1]
 8006bc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006bca:	f1be 0f09 	cmp.w	lr, #9
 8006bce:	d939      	bls.n	8006c44 <_strtod_l+0x33c>
 8006bd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006bd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006bd6:	1a76      	subs	r6, r6, r1
 8006bd8:	2e08      	cmp	r6, #8
 8006bda:	dc03      	bgt.n	8006be4 <_strtod_l+0x2dc>
 8006bdc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006bde:	4588      	cmp	r8, r1
 8006be0:	bfa8      	it	ge
 8006be2:	4688      	movge	r8, r1
 8006be4:	f1bc 0f00 	cmp.w	ip, #0
 8006be8:	d001      	beq.n	8006bee <_strtod_l+0x2e6>
 8006bea:	f1c8 0800 	rsb	r8, r8, #0
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	d14e      	bne.n	8006c90 <_strtod_l+0x388>
 8006bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bf4:	4308      	orrs	r0, r1
 8006bf6:	f47f aec0 	bne.w	800697a <_strtod_l+0x72>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f47f aed6 	bne.w	80069ac <_strtod_l+0xa4>
 8006c00:	2a69      	cmp	r2, #105	@ 0x69
 8006c02:	d028      	beq.n	8006c56 <_strtod_l+0x34e>
 8006c04:	dc25      	bgt.n	8006c52 <_strtod_l+0x34a>
 8006c06:	2a49      	cmp	r2, #73	@ 0x49
 8006c08:	d025      	beq.n	8006c56 <_strtod_l+0x34e>
 8006c0a:	2a4e      	cmp	r2, #78	@ 0x4e
 8006c0c:	f47f aece 	bne.w	80069ac <_strtod_l+0xa4>
 8006c10:	499a      	ldr	r1, [pc, #616]	@ (8006e7c <_strtod_l+0x574>)
 8006c12:	a819      	add	r0, sp, #100	@ 0x64
 8006c14:	f001 fe56 	bl	80088c4 <__match>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f43f aec7 	beq.w	80069ac <_strtod_l+0xa4>
 8006c1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b28      	cmp	r3, #40	@ 0x28
 8006c24:	d12e      	bne.n	8006c84 <_strtod_l+0x37c>
 8006c26:	4996      	ldr	r1, [pc, #600]	@ (8006e80 <_strtod_l+0x578>)
 8006c28:	aa1c      	add	r2, sp, #112	@ 0x70
 8006c2a:	a819      	add	r0, sp, #100	@ 0x64
 8006c2c:	f001 fe5e 	bl	80088ec <__hexnan>
 8006c30:	2805      	cmp	r0, #5
 8006c32:	d127      	bne.n	8006c84 <_strtod_l+0x37c>
 8006c34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006c36:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006c3a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006c3e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006c42:	e69a      	b.n	800697a <_strtod_l+0x72>
 8006c44:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006c46:	fb08 2101 	mla	r1, r8, r1, r2
 8006c4a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006c4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c50:	e7b5      	b.n	8006bbe <_strtod_l+0x2b6>
 8006c52:	2a6e      	cmp	r2, #110	@ 0x6e
 8006c54:	e7da      	b.n	8006c0c <_strtod_l+0x304>
 8006c56:	498b      	ldr	r1, [pc, #556]	@ (8006e84 <_strtod_l+0x57c>)
 8006c58:	a819      	add	r0, sp, #100	@ 0x64
 8006c5a:	f001 fe33 	bl	80088c4 <__match>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f43f aea4 	beq.w	80069ac <_strtod_l+0xa4>
 8006c64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c66:	4988      	ldr	r1, [pc, #544]	@ (8006e88 <_strtod_l+0x580>)
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	a819      	add	r0, sp, #100	@ 0x64
 8006c6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c6e:	f001 fe29 	bl	80088c4 <__match>
 8006c72:	b910      	cbnz	r0, 8006c7a <_strtod_l+0x372>
 8006c74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c76:	3301      	adds	r3, #1
 8006c78:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c7a:	f04f 0a00 	mov.w	sl, #0
 8006c7e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006e8c <_strtod_l+0x584>
 8006c82:	e67a      	b.n	800697a <_strtod_l+0x72>
 8006c84:	4882      	ldr	r0, [pc, #520]	@ (8006e90 <_strtod_l+0x588>)
 8006c86:	f000 fd39 	bl	80076fc <nan>
 8006c8a:	4682      	mov	sl, r0
 8006c8c:	468b      	mov	fp, r1
 8006c8e:	e674      	b.n	800697a <_strtod_l+0x72>
 8006c90:	eba8 0309 	sub.w	r3, r8, r9
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	bf08      	it	eq
 8006c98:	462f      	moveq	r7, r5
 8006c9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c9c:	2d10      	cmp	r5, #16
 8006c9e:	462c      	mov	r4, r5
 8006ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ca2:	bfa8      	it	ge
 8006ca4:	2410      	movge	r4, #16
 8006ca6:	f7f9 fb9d 	bl	80003e4 <__aeabi_ui2d>
 8006caa:	2d09      	cmp	r5, #9
 8006cac:	4682      	mov	sl, r0
 8006cae:	468b      	mov	fp, r1
 8006cb0:	dc11      	bgt.n	8006cd6 <_strtod_l+0x3ce>
 8006cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f43f ae60 	beq.w	800697a <_strtod_l+0x72>
 8006cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cbc:	dd76      	ble.n	8006dac <_strtod_l+0x4a4>
 8006cbe:	2b16      	cmp	r3, #22
 8006cc0:	dc5d      	bgt.n	8006d7e <_strtod_l+0x476>
 8006cc2:	4974      	ldr	r1, [pc, #464]	@ (8006e94 <_strtod_l+0x58c>)
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cca:	465b      	mov	r3, fp
 8006ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd0:	f7f9 fc02 	bl	80004d8 <__aeabi_dmul>
 8006cd4:	e7d9      	b.n	8006c8a <_strtod_l+0x382>
 8006cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8006e94 <_strtod_l+0x58c>)
 8006cd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ce0:	f7f9 fbfa 	bl	80004d8 <__aeabi_dmul>
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	9808      	ldr	r0, [sp, #32]
 8006ce8:	468b      	mov	fp, r1
 8006cea:	f7f9 fb7b 	bl	80003e4 <__aeabi_ui2d>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	f7f9 fa39 	bl	800016c <__adddf3>
 8006cfa:	2d0f      	cmp	r5, #15
 8006cfc:	4682      	mov	sl, r0
 8006cfe:	468b      	mov	fp, r1
 8006d00:	ddd7      	ble.n	8006cb2 <_strtod_l+0x3aa>
 8006d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d04:	1b2c      	subs	r4, r5, r4
 8006d06:	441c      	add	r4, r3
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	f340 8096 	ble.w	8006e3a <_strtod_l+0x532>
 8006d0e:	f014 030f 	ands.w	r3, r4, #15
 8006d12:	d00a      	beq.n	8006d2a <_strtod_l+0x422>
 8006d14:	495f      	ldr	r1, [pc, #380]	@ (8006e94 <_strtod_l+0x58c>)
 8006d16:	4652      	mov	r2, sl
 8006d18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d20:	465b      	mov	r3, fp
 8006d22:	f7f9 fbd9 	bl	80004d8 <__aeabi_dmul>
 8006d26:	4682      	mov	sl, r0
 8006d28:	468b      	mov	fp, r1
 8006d2a:	f034 040f 	bics.w	r4, r4, #15
 8006d2e:	d073      	beq.n	8006e18 <_strtod_l+0x510>
 8006d30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006d34:	dd48      	ble.n	8006dc8 <_strtod_l+0x4c0>
 8006d36:	2400      	movs	r4, #0
 8006d38:	46a0      	mov	r8, r4
 8006d3a:	46a1      	mov	r9, r4
 8006d3c:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d3e:	2322      	movs	r3, #34	@ 0x22
 8006d40:	f04f 0a00 	mov.w	sl, #0
 8006d44:	9a05      	ldr	r2, [sp, #20]
 8006d46:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006e8c <_strtod_l+0x584>
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f43f ae13 	beq.w	800697a <_strtod_l+0x72>
 8006d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d56:	9805      	ldr	r0, [sp, #20]
 8006d58:	f002 f96a 	bl	8009030 <_Bfree>
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	9805      	ldr	r0, [sp, #20]
 8006d60:	f002 f966 	bl	8009030 <_Bfree>
 8006d64:	4641      	mov	r1, r8
 8006d66:	9805      	ldr	r0, [sp, #20]
 8006d68:	f002 f962 	bl	8009030 <_Bfree>
 8006d6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d6e:	9805      	ldr	r0, [sp, #20]
 8006d70:	f002 f95e 	bl	8009030 <_Bfree>
 8006d74:	4621      	mov	r1, r4
 8006d76:	9805      	ldr	r0, [sp, #20]
 8006d78:	f002 f95a 	bl	8009030 <_Bfree>
 8006d7c:	e5fd      	b.n	800697a <_strtod_l+0x72>
 8006d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d84:	4293      	cmp	r3, r2
 8006d86:	dbbc      	blt.n	8006d02 <_strtod_l+0x3fa>
 8006d88:	4c42      	ldr	r4, [pc, #264]	@ (8006e94 <_strtod_l+0x58c>)
 8006d8a:	f1c5 050f 	rsb	r5, r5, #15
 8006d8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d92:	4652      	mov	r2, sl
 8006d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d98:	465b      	mov	r3, fp
 8006d9a:	f7f9 fb9d 	bl	80004d8 <__aeabi_dmul>
 8006d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da0:	1b5d      	subs	r5, r3, r5
 8006da2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006da6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006daa:	e791      	b.n	8006cd0 <_strtod_l+0x3c8>
 8006dac:	3316      	adds	r3, #22
 8006dae:	dba8      	blt.n	8006d02 <_strtod_l+0x3fa>
 8006db0:	4b38      	ldr	r3, [pc, #224]	@ (8006e94 <_strtod_l+0x58c>)
 8006db2:	eba9 0808 	sub.w	r8, r9, r8
 8006db6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006dba:	4650      	mov	r0, sl
 8006dbc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	f7f9 fcb3 	bl	800072c <__aeabi_ddiv>
 8006dc6:	e760      	b.n	8006c8a <_strtod_l+0x382>
 8006dc8:	4b33      	ldr	r3, [pc, #204]	@ (8006e98 <_strtod_l+0x590>)
 8006dca:	4650      	mov	r0, sl
 8006dcc:	9308      	str	r3, [sp, #32]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	461e      	mov	r6, r3
 8006dd4:	1124      	asrs	r4, r4, #4
 8006dd6:	2c01      	cmp	r4, #1
 8006dd8:	dc21      	bgt.n	8006e1e <_strtod_l+0x516>
 8006dda:	b10b      	cbz	r3, 8006de0 <_strtod_l+0x4d8>
 8006ddc:	4682      	mov	sl, r0
 8006dde:	468b      	mov	fp, r1
 8006de0:	492d      	ldr	r1, [pc, #180]	@ (8006e98 <_strtod_l+0x590>)
 8006de2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006de6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006dea:	4652      	mov	r2, sl
 8006dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df0:	465b      	mov	r3, fp
 8006df2:	f7f9 fb71 	bl	80004d8 <__aeabi_dmul>
 8006df6:	4b25      	ldr	r3, [pc, #148]	@ (8006e8c <_strtod_l+0x584>)
 8006df8:	460a      	mov	r2, r1
 8006dfa:	400b      	ands	r3, r1
 8006dfc:	4927      	ldr	r1, [pc, #156]	@ (8006e9c <_strtod_l+0x594>)
 8006dfe:	4682      	mov	sl, r0
 8006e00:	428b      	cmp	r3, r1
 8006e02:	d898      	bhi.n	8006d36 <_strtod_l+0x42e>
 8006e04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	bf86      	itte	hi
 8006e0c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006e10:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006ea0 <_strtod_l+0x598>
 8006e14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9308      	str	r3, [sp, #32]
 8006e1c:	e07a      	b.n	8006f14 <_strtod_l+0x60c>
 8006e1e:	07e2      	lsls	r2, r4, #31
 8006e20:	d505      	bpl.n	8006e2e <_strtod_l+0x526>
 8006e22:	9b08      	ldr	r3, [sp, #32]
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fb56 	bl	80004d8 <__aeabi_dmul>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9a08      	ldr	r2, [sp, #32]
 8006e30:	3601      	adds	r6, #1
 8006e32:	3208      	adds	r2, #8
 8006e34:	1064      	asrs	r4, r4, #1
 8006e36:	9208      	str	r2, [sp, #32]
 8006e38:	e7cd      	b.n	8006dd6 <_strtod_l+0x4ce>
 8006e3a:	d0ed      	beq.n	8006e18 <_strtod_l+0x510>
 8006e3c:	4264      	negs	r4, r4
 8006e3e:	f014 020f 	ands.w	r2, r4, #15
 8006e42:	d00a      	beq.n	8006e5a <_strtod_l+0x552>
 8006e44:	4b13      	ldr	r3, [pc, #76]	@ (8006e94 <_strtod_l+0x58c>)
 8006e46:	4650      	mov	r0, sl
 8006e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fc6b 	bl	800072c <__aeabi_ddiv>
 8006e56:	4682      	mov	sl, r0
 8006e58:	468b      	mov	fp, r1
 8006e5a:	1124      	asrs	r4, r4, #4
 8006e5c:	d0dc      	beq.n	8006e18 <_strtod_l+0x510>
 8006e5e:	2c1f      	cmp	r4, #31
 8006e60:	dd20      	ble.n	8006ea4 <_strtod_l+0x59c>
 8006e62:	2400      	movs	r4, #0
 8006e64:	46a0      	mov	r8, r4
 8006e66:	46a1      	mov	r9, r4
 8006e68:	940a      	str	r4, [sp, #40]	@ 0x28
 8006e6a:	2322      	movs	r3, #34	@ 0x22
 8006e6c:	9a05      	ldr	r2, [sp, #20]
 8006e6e:	f04f 0a00 	mov.w	sl, #0
 8006e72:	f04f 0b00 	mov.w	fp, #0
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	e768      	b.n	8006d4c <_strtod_l+0x444>
 8006e7a:	bf00      	nop
 8006e7c:	0800c42f 	.word	0x0800c42f
 8006e80:	0800c460 	.word	0x0800c460
 8006e84:	0800c427 	.word	0x0800c427
 8006e88:	0800c5bc 	.word	0x0800c5bc
 8006e8c:	7ff00000 	.word	0x7ff00000
 8006e90:	0800c84b 	.word	0x0800c84b
 8006e94:	0800c748 	.word	0x0800c748
 8006e98:	0800c720 	.word	0x0800c720
 8006e9c:	7ca00000 	.word	0x7ca00000
 8006ea0:	7fefffff 	.word	0x7fefffff
 8006ea4:	f014 0310 	ands.w	r3, r4, #16
 8006ea8:	bf18      	it	ne
 8006eaa:	236a      	movne	r3, #106	@ 0x6a
 8006eac:	4650      	mov	r0, sl
 8006eae:	9308      	str	r3, [sp, #32]
 8006eb0:	4659      	mov	r1, fp
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4ea9      	ldr	r6, [pc, #676]	@ (800715c <_strtod_l+0x854>)
 8006eb6:	07e2      	lsls	r2, r4, #31
 8006eb8:	d504      	bpl.n	8006ec4 <_strtod_l+0x5bc>
 8006eba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ebe:	f7f9 fb0b 	bl	80004d8 <__aeabi_dmul>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	1064      	asrs	r4, r4, #1
 8006ec6:	f106 0608 	add.w	r6, r6, #8
 8006eca:	d1f4      	bne.n	8006eb6 <_strtod_l+0x5ae>
 8006ecc:	b10b      	cbz	r3, 8006ed2 <_strtod_l+0x5ca>
 8006ece:	4682      	mov	sl, r0
 8006ed0:	468b      	mov	fp, r1
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	b1b3      	cbz	r3, 8006f04 <_strtod_l+0x5fc>
 8006ed6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006eda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	dd0f      	ble.n	8006f04 <_strtod_l+0x5fc>
 8006ee4:	2b1f      	cmp	r3, #31
 8006ee6:	dd57      	ble.n	8006f98 <_strtod_l+0x690>
 8006ee8:	2b34      	cmp	r3, #52	@ 0x34
 8006eea:	bfd8      	it	le
 8006eec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006ef0:	f04f 0a00 	mov.w	sl, #0
 8006ef4:	bfcf      	iteee	gt
 8006ef6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006efa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006efe:	4093      	lslle	r3, r2
 8006f00:	ea03 0b01 	andle.w	fp, r3, r1
 8006f04:	2200      	movs	r2, #0
 8006f06:	2300      	movs	r3, #0
 8006f08:	4650      	mov	r0, sl
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	f7f9 fd4c 	bl	80009a8 <__aeabi_dcmpeq>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d1a6      	bne.n	8006e62 <_strtod_l+0x55a>
 8006f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f16:	463a      	mov	r2, r7
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	9805      	ldr	r0, [sp, #20]
 8006f20:	f002 f8ee 	bl	8009100 <__s2b>
 8006f24:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f43f af05 	beq.w	8006d36 <_strtod_l+0x42e>
 8006f2c:	2400      	movs	r4, #0
 8006f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f30:	eba9 0308 	sub.w	r3, r9, r8
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	bfa8      	it	ge
 8006f38:	2300      	movge	r3, #0
 8006f3a:	46a0      	mov	r8, r4
 8006f3c:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f42:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f46:	9805      	ldr	r0, [sp, #20]
 8006f48:	6859      	ldr	r1, [r3, #4]
 8006f4a:	f002 f831 	bl	8008fb0 <_Balloc>
 8006f4e:	4681      	mov	r9, r0
 8006f50:	2800      	cmp	r0, #0
 8006f52:	f43f aef4 	beq.w	8006d3e <_strtod_l+0x436>
 8006f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f58:	300c      	adds	r0, #12
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	f103 010c 	add.w	r1, r3, #12
 8006f60:	3202      	adds	r2, #2
 8006f62:	0092      	lsls	r2, r2, #2
 8006f64:	f000 fbbb 	bl	80076de <memcpy>
 8006f68:	ab1c      	add	r3, sp, #112	@ 0x70
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	4652      	mov	r2, sl
 8006f72:	465b      	mov	r3, fp
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f7a:	f002 fbf3 	bl	8009764 <__d2b>
 8006f7e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f43f aedc 	beq.w	8006d3e <_strtod_l+0x436>
 8006f86:	2101      	movs	r1, #1
 8006f88:	9805      	ldr	r0, [sp, #20]
 8006f8a:	f002 f94f 	bl	800922c <__i2b>
 8006f8e:	4680      	mov	r8, r0
 8006f90:	b948      	cbnz	r0, 8006fa6 <_strtod_l+0x69e>
 8006f92:	f04f 0800 	mov.w	r8, #0
 8006f96:	e6d2      	b.n	8006d3e <_strtod_l+0x436>
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	ea03 0a0a 	and.w	sl, r3, sl
 8006fa4:	e7ae      	b.n	8006f04 <_strtod_l+0x5fc>
 8006fa6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006fa8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	bfab      	itete	ge
 8006fae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006fb0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006fb2:	18ef      	addge	r7, r5, r3
 8006fb4:	1b5e      	sublt	r6, r3, r5
 8006fb6:	9b08      	ldr	r3, [sp, #32]
 8006fb8:	bfa8      	it	ge
 8006fba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006fbc:	eba5 0503 	sub.w	r5, r5, r3
 8006fc0:	4415      	add	r5, r2
 8006fc2:	4b67      	ldr	r3, [pc, #412]	@ (8007160 <_strtod_l+0x858>)
 8006fc4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8006fc8:	bfb8      	it	lt
 8006fca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006fcc:	429d      	cmp	r5, r3
 8006fce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006fd2:	da50      	bge.n	8007076 <_strtod_l+0x76e>
 8006fd4:	1b5b      	subs	r3, r3, r5
 8006fd6:	2b1f      	cmp	r3, #31
 8006fd8:	f04f 0101 	mov.w	r1, #1
 8006fdc:	eba2 0203 	sub.w	r2, r2, r3
 8006fe0:	dc3d      	bgt.n	800705e <_strtod_l+0x756>
 8006fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fec:	18bd      	adds	r5, r7, r2
 8006fee:	9b08      	ldr	r3, [sp, #32]
 8006ff0:	42af      	cmp	r7, r5
 8006ff2:	4416      	add	r6, r2
 8006ff4:	441e      	add	r6, r3
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	bfa8      	it	ge
 8006ffa:	462b      	movge	r3, r5
 8006ffc:	42b3      	cmp	r3, r6
 8006ffe:	bfa8      	it	ge
 8007000:	4633      	movge	r3, r6
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfc2      	ittt	gt
 8007006:	1aed      	subgt	r5, r5, r3
 8007008:	1af6      	subgt	r6, r6, r3
 800700a:	1aff      	subgt	r7, r7, r3
 800700c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800700e:	2b00      	cmp	r3, #0
 8007010:	dd16      	ble.n	8007040 <_strtod_l+0x738>
 8007012:	4641      	mov	r1, r8
 8007014:	461a      	mov	r2, r3
 8007016:	9805      	ldr	r0, [sp, #20]
 8007018:	f002 f9c6 	bl	80093a8 <__pow5mult>
 800701c:	4680      	mov	r8, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	d0b7      	beq.n	8006f92 <_strtod_l+0x68a>
 8007022:	4601      	mov	r1, r0
 8007024:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007026:	9805      	ldr	r0, [sp, #20]
 8007028:	f002 f916 	bl	8009258 <__multiply>
 800702c:	900e      	str	r0, [sp, #56]	@ 0x38
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f ae85 	beq.w	8006d3e <_strtod_l+0x436>
 8007034:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007036:	9805      	ldr	r0, [sp, #20]
 8007038:	f001 fffa 	bl	8009030 <_Bfree>
 800703c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007040:	2d00      	cmp	r5, #0
 8007042:	dc1d      	bgt.n	8007080 <_strtod_l+0x778>
 8007044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	dd23      	ble.n	8007092 <_strtod_l+0x78a>
 800704a:	4649      	mov	r1, r9
 800704c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800704e:	9805      	ldr	r0, [sp, #20]
 8007050:	f002 f9aa 	bl	80093a8 <__pow5mult>
 8007054:	4681      	mov	r9, r0
 8007056:	b9e0      	cbnz	r0, 8007092 <_strtod_l+0x78a>
 8007058:	f04f 0900 	mov.w	r9, #0
 800705c:	e66f      	b.n	8006d3e <_strtod_l+0x436>
 800705e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007062:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007066:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800706a:	35e2      	adds	r5, #226	@ 0xe2
 800706c:	fa01 f305 	lsl.w	r3, r1, r5
 8007070:	9310      	str	r3, [sp, #64]	@ 0x40
 8007072:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007074:	e7ba      	b.n	8006fec <_strtod_l+0x6e4>
 8007076:	2300      	movs	r3, #0
 8007078:	9310      	str	r3, [sp, #64]	@ 0x40
 800707a:	2301      	movs	r3, #1
 800707c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800707e:	e7b5      	b.n	8006fec <_strtod_l+0x6e4>
 8007080:	462a      	mov	r2, r5
 8007082:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007084:	9805      	ldr	r0, [sp, #20]
 8007086:	f002 f9e9 	bl	800945c <__lshift>
 800708a:	901a      	str	r0, [sp, #104]	@ 0x68
 800708c:	2800      	cmp	r0, #0
 800708e:	d1d9      	bne.n	8007044 <_strtod_l+0x73c>
 8007090:	e655      	b.n	8006d3e <_strtod_l+0x436>
 8007092:	2e00      	cmp	r6, #0
 8007094:	dd07      	ble.n	80070a6 <_strtod_l+0x79e>
 8007096:	4649      	mov	r1, r9
 8007098:	4632      	mov	r2, r6
 800709a:	9805      	ldr	r0, [sp, #20]
 800709c:	f002 f9de 	bl	800945c <__lshift>
 80070a0:	4681      	mov	r9, r0
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d0d8      	beq.n	8007058 <_strtod_l+0x750>
 80070a6:	2f00      	cmp	r7, #0
 80070a8:	dd08      	ble.n	80070bc <_strtod_l+0x7b4>
 80070aa:	4641      	mov	r1, r8
 80070ac:	463a      	mov	r2, r7
 80070ae:	9805      	ldr	r0, [sp, #20]
 80070b0:	f002 f9d4 	bl	800945c <__lshift>
 80070b4:	4680      	mov	r8, r0
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f ae41 	beq.w	8006d3e <_strtod_l+0x436>
 80070bc:	464a      	mov	r2, r9
 80070be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070c0:	9805      	ldr	r0, [sp, #20]
 80070c2:	f002 fa53 	bl	800956c <__mdiff>
 80070c6:	4604      	mov	r4, r0
 80070c8:	2800      	cmp	r0, #0
 80070ca:	f43f ae38 	beq.w	8006d3e <_strtod_l+0x436>
 80070ce:	68c3      	ldr	r3, [r0, #12]
 80070d0:	4641      	mov	r1, r8
 80070d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070d4:	2300      	movs	r3, #0
 80070d6:	60c3      	str	r3, [r0, #12]
 80070d8:	f002 fa2c 	bl	8009534 <__mcmp>
 80070dc:	2800      	cmp	r0, #0
 80070de:	da45      	bge.n	800716c <_strtod_l+0x864>
 80070e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070e2:	ea53 030a 	orrs.w	r3, r3, sl
 80070e6:	d16b      	bne.n	80071c0 <_strtod_l+0x8b8>
 80070e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d167      	bne.n	80071c0 <_strtod_l+0x8b8>
 80070f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070f4:	0d1b      	lsrs	r3, r3, #20
 80070f6:	051b      	lsls	r3, r3, #20
 80070f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070fc:	d960      	bls.n	80071c0 <_strtod_l+0x8b8>
 80070fe:	6963      	ldr	r3, [r4, #20]
 8007100:	b913      	cbnz	r3, 8007108 <_strtod_l+0x800>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	2b01      	cmp	r3, #1
 8007106:	dd5b      	ble.n	80071c0 <_strtod_l+0x8b8>
 8007108:	4621      	mov	r1, r4
 800710a:	2201      	movs	r2, #1
 800710c:	9805      	ldr	r0, [sp, #20]
 800710e:	f002 f9a5 	bl	800945c <__lshift>
 8007112:	4641      	mov	r1, r8
 8007114:	4604      	mov	r4, r0
 8007116:	f002 fa0d 	bl	8009534 <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	dd50      	ble.n	80071c0 <_strtod_l+0x8b8>
 800711e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007122:	9a08      	ldr	r2, [sp, #32]
 8007124:	0d1b      	lsrs	r3, r3, #20
 8007126:	051b      	lsls	r3, r3, #20
 8007128:	2a00      	cmp	r2, #0
 800712a:	d06a      	beq.n	8007202 <_strtod_l+0x8fa>
 800712c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007130:	d867      	bhi.n	8007202 <_strtod_l+0x8fa>
 8007132:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007136:	f67f ae98 	bls.w	8006e6a <_strtod_l+0x562>
 800713a:	4650      	mov	r0, sl
 800713c:	4659      	mov	r1, fp
 800713e:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <_strtod_l+0x85c>)
 8007140:	2200      	movs	r2, #0
 8007142:	f7f9 f9c9 	bl	80004d8 <__aeabi_dmul>
 8007146:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <_strtod_l+0x860>)
 8007148:	4682      	mov	sl, r0
 800714a:	400b      	ands	r3, r1
 800714c:	468b      	mov	fp, r1
 800714e:	2b00      	cmp	r3, #0
 8007150:	f47f ae00 	bne.w	8006d54 <_strtod_l+0x44c>
 8007154:	2322      	movs	r3, #34	@ 0x22
 8007156:	9a05      	ldr	r2, [sp, #20]
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e5fb      	b.n	8006d54 <_strtod_l+0x44c>
 800715c:	0800c488 	.word	0x0800c488
 8007160:	fffffc02 	.word	0xfffffc02
 8007164:	39500000 	.word	0x39500000
 8007168:	7ff00000 	.word	0x7ff00000
 800716c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007170:	d165      	bne.n	800723e <_strtod_l+0x936>
 8007172:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007178:	b35a      	cbz	r2, 80071d2 <_strtod_l+0x8ca>
 800717a:	4a99      	ldr	r2, [pc, #612]	@ (80073e0 <_strtod_l+0xad8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d12b      	bne.n	80071d8 <_strtod_l+0x8d0>
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	4651      	mov	r1, sl
 8007184:	b303      	cbz	r3, 80071c8 <_strtod_l+0x8c0>
 8007186:	465a      	mov	r2, fp
 8007188:	4b96      	ldr	r3, [pc, #600]	@ (80073e4 <_strtod_l+0xadc>)
 800718a:	4013      	ands	r3, r2
 800718c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007194:	d81b      	bhi.n	80071ce <_strtod_l+0x8c6>
 8007196:	0d1b      	lsrs	r3, r3, #20
 8007198:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	4299      	cmp	r1, r3
 80071a2:	d119      	bne.n	80071d8 <_strtod_l+0x8d0>
 80071a4:	4b90      	ldr	r3, [pc, #576]	@ (80073e8 <_strtod_l+0xae0>)
 80071a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d102      	bne.n	80071b2 <_strtod_l+0x8aa>
 80071ac:	3101      	adds	r1, #1
 80071ae:	f43f adc6 	beq.w	8006d3e <_strtod_l+0x436>
 80071b2:	f04f 0a00 	mov.w	sl, #0
 80071b6:	4b8b      	ldr	r3, [pc, #556]	@ (80073e4 <_strtod_l+0xadc>)
 80071b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071ba:	401a      	ands	r2, r3
 80071bc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80071c0:	9b08      	ldr	r3, [sp, #32]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1b9      	bne.n	800713a <_strtod_l+0x832>
 80071c6:	e5c5      	b.n	8006d54 <_strtod_l+0x44c>
 80071c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071cc:	e7e8      	b.n	80071a0 <_strtod_l+0x898>
 80071ce:	4613      	mov	r3, r2
 80071d0:	e7e6      	b.n	80071a0 <_strtod_l+0x898>
 80071d2:	ea53 030a 	orrs.w	r3, r3, sl
 80071d6:	d0a2      	beq.n	800711e <_strtod_l+0x816>
 80071d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071da:	b1db      	cbz	r3, 8007214 <_strtod_l+0x90c>
 80071dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071de:	4213      	tst	r3, r2
 80071e0:	d0ee      	beq.n	80071c0 <_strtod_l+0x8b8>
 80071e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e4:	4650      	mov	r0, sl
 80071e6:	4659      	mov	r1, fp
 80071e8:	9a08      	ldr	r2, [sp, #32]
 80071ea:	b1bb      	cbz	r3, 800721c <_strtod_l+0x914>
 80071ec:	f7ff fb6a 	bl	80068c4 <sulp>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071f8:	f7f8 ffb8 	bl	800016c <__adddf3>
 80071fc:	4682      	mov	sl, r0
 80071fe:	468b      	mov	fp, r1
 8007200:	e7de      	b.n	80071c0 <_strtod_l+0x8b8>
 8007202:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007206:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800720a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800720e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007212:	e7d5      	b.n	80071c0 <_strtod_l+0x8b8>
 8007214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007216:	ea13 0f0a 	tst.w	r3, sl
 800721a:	e7e1      	b.n	80071e0 <_strtod_l+0x8d8>
 800721c:	f7ff fb52 	bl	80068c4 <sulp>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007228:	f7f8 ff9e 	bl	8000168 <__aeabi_dsub>
 800722c:	2200      	movs	r2, #0
 800722e:	2300      	movs	r3, #0
 8007230:	4682      	mov	sl, r0
 8007232:	468b      	mov	fp, r1
 8007234:	f7f9 fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 8007238:	2800      	cmp	r0, #0
 800723a:	d0c1      	beq.n	80071c0 <_strtod_l+0x8b8>
 800723c:	e615      	b.n	8006e6a <_strtod_l+0x562>
 800723e:	4641      	mov	r1, r8
 8007240:	4620      	mov	r0, r4
 8007242:	f002 fae7 	bl	8009814 <__ratio>
 8007246:	2200      	movs	r2, #0
 8007248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800724c:	4606      	mov	r6, r0
 800724e:	460f      	mov	r7, r1
 8007250:	f7f9 fbbe 	bl	80009d0 <__aeabi_dcmple>
 8007254:	2800      	cmp	r0, #0
 8007256:	d06d      	beq.n	8007334 <_strtod_l+0xa2c>
 8007258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d178      	bne.n	8007350 <_strtod_l+0xa48>
 800725e:	f1ba 0f00 	cmp.w	sl, #0
 8007262:	d156      	bne.n	8007312 <_strtod_l+0xa0a>
 8007264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800726a:	2b00      	cmp	r3, #0
 800726c:	d158      	bne.n	8007320 <_strtod_l+0xa18>
 800726e:	2200      	movs	r2, #0
 8007270:	4630      	mov	r0, r6
 8007272:	4639      	mov	r1, r7
 8007274:	4b5d      	ldr	r3, [pc, #372]	@ (80073ec <_strtod_l+0xae4>)
 8007276:	f7f9 fba1 	bl	80009bc <__aeabi_dcmplt>
 800727a:	2800      	cmp	r0, #0
 800727c:	d157      	bne.n	800732e <_strtod_l+0xa26>
 800727e:	4630      	mov	r0, r6
 8007280:	4639      	mov	r1, r7
 8007282:	2200      	movs	r2, #0
 8007284:	4b5a      	ldr	r3, [pc, #360]	@ (80073f0 <_strtod_l+0xae8>)
 8007286:	f7f9 f927 	bl	80004d8 <__aeabi_dmul>
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007292:	9606      	str	r6, [sp, #24]
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800729a:	4d52      	ldr	r5, [pc, #328]	@ (80073e4 <_strtod_l+0xadc>)
 800729c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80072a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a2:	401d      	ands	r5, r3
 80072a4:	4b53      	ldr	r3, [pc, #332]	@ (80073f4 <_strtod_l+0xaec>)
 80072a6:	429d      	cmp	r5, r3
 80072a8:	f040 80aa 	bne.w	8007400 <_strtod_l+0xaf8>
 80072ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072ae:	4650      	mov	r0, sl
 80072b0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80072b4:	4659      	mov	r1, fp
 80072b6:	f002 f9ed 	bl	8009694 <__ulp>
 80072ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072be:	f7f9 f90b 	bl	80004d8 <__aeabi_dmul>
 80072c2:	4652      	mov	r2, sl
 80072c4:	465b      	mov	r3, fp
 80072c6:	f7f8 ff51 	bl	800016c <__adddf3>
 80072ca:	460b      	mov	r3, r1
 80072cc:	4945      	ldr	r1, [pc, #276]	@ (80073e4 <_strtod_l+0xadc>)
 80072ce:	4a4a      	ldr	r2, [pc, #296]	@ (80073f8 <_strtod_l+0xaf0>)
 80072d0:	4019      	ands	r1, r3
 80072d2:	4291      	cmp	r1, r2
 80072d4:	4682      	mov	sl, r0
 80072d6:	d942      	bls.n	800735e <_strtod_l+0xa56>
 80072d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072da:	4b43      	ldr	r3, [pc, #268]	@ (80073e8 <_strtod_l+0xae0>)
 80072dc:	429a      	cmp	r2, r3
 80072de:	d103      	bne.n	80072e8 <_strtod_l+0x9e0>
 80072e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072e2:	3301      	adds	r3, #1
 80072e4:	f43f ad2b 	beq.w	8006d3e <_strtod_l+0x436>
 80072e8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80072ec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80073e8 <_strtod_l+0xae0>
 80072f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072f2:	9805      	ldr	r0, [sp, #20]
 80072f4:	f001 fe9c 	bl	8009030 <_Bfree>
 80072f8:	4649      	mov	r1, r9
 80072fa:	9805      	ldr	r0, [sp, #20]
 80072fc:	f001 fe98 	bl	8009030 <_Bfree>
 8007300:	4641      	mov	r1, r8
 8007302:	9805      	ldr	r0, [sp, #20]
 8007304:	f001 fe94 	bl	8009030 <_Bfree>
 8007308:	4621      	mov	r1, r4
 800730a:	9805      	ldr	r0, [sp, #20]
 800730c:	f001 fe90 	bl	8009030 <_Bfree>
 8007310:	e618      	b.n	8006f44 <_strtod_l+0x63c>
 8007312:	f1ba 0f01 	cmp.w	sl, #1
 8007316:	d103      	bne.n	8007320 <_strtod_l+0xa18>
 8007318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	f43f ada5 	beq.w	8006e6a <_strtod_l+0x562>
 8007320:	2200      	movs	r2, #0
 8007322:	4b36      	ldr	r3, [pc, #216]	@ (80073fc <_strtod_l+0xaf4>)
 8007324:	2600      	movs	r6, #0
 8007326:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800732a:	4f30      	ldr	r7, [pc, #192]	@ (80073ec <_strtod_l+0xae4>)
 800732c:	e7b3      	b.n	8007296 <_strtod_l+0x98e>
 800732e:	2600      	movs	r6, #0
 8007330:	4f2f      	ldr	r7, [pc, #188]	@ (80073f0 <_strtod_l+0xae8>)
 8007332:	e7ac      	b.n	800728e <_strtod_l+0x986>
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	4b2d      	ldr	r3, [pc, #180]	@ (80073f0 <_strtod_l+0xae8>)
 800733a:	2200      	movs	r2, #0
 800733c:	f7f9 f8cc 	bl	80004d8 <__aeabi_dmul>
 8007340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007342:	4606      	mov	r6, r0
 8007344:	460f      	mov	r7, r1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0a1      	beq.n	800728e <_strtod_l+0x986>
 800734a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800734e:	e7a2      	b.n	8007296 <_strtod_l+0x98e>
 8007350:	2200      	movs	r2, #0
 8007352:	4b26      	ldr	r3, [pc, #152]	@ (80073ec <_strtod_l+0xae4>)
 8007354:	4616      	mov	r6, r2
 8007356:	461f      	mov	r7, r3
 8007358:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800735c:	e79b      	b.n	8007296 <_strtod_l+0x98e>
 800735e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007362:	9b08      	ldr	r3, [sp, #32]
 8007364:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1c1      	bne.n	80072f0 <_strtod_l+0x9e8>
 800736c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007370:	0d1b      	lsrs	r3, r3, #20
 8007372:	051b      	lsls	r3, r3, #20
 8007374:	429d      	cmp	r5, r3
 8007376:	d1bb      	bne.n	80072f0 <_strtod_l+0x9e8>
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 feee 	bl	800115c <__aeabi_d2lz>
 8007380:	f7f9 f87c 	bl	800047c <__aeabi_l2d>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4630      	mov	r0, r6
 800738a:	4639      	mov	r1, r7
 800738c:	f7f8 feec 	bl	8000168 <__aeabi_dsub>
 8007390:	460b      	mov	r3, r1
 8007392:	4602      	mov	r2, r0
 8007394:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007398:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800739c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800739e:	ea46 060a 	orr.w	r6, r6, sl
 80073a2:	431e      	orrs	r6, r3
 80073a4:	d069      	beq.n	800747a <_strtod_l+0xb72>
 80073a6:	a30a      	add	r3, pc, #40	@ (adr r3, 80073d0 <_strtod_l+0xac8>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f7f9 fb06 	bl	80009bc <__aeabi_dcmplt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f47f accf 	bne.w	8006d54 <_strtod_l+0x44c>
 80073b6:	a308      	add	r3, pc, #32	@ (adr r3, 80073d8 <_strtod_l+0xad0>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073c0:	f7f9 fb1a 	bl	80009f8 <__aeabi_dcmpgt>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d093      	beq.n	80072f0 <_strtod_l+0x9e8>
 80073c8:	e4c4      	b.n	8006d54 <_strtod_l+0x44c>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	94a03595 	.word	0x94a03595
 80073d4:	3fdfffff 	.word	0x3fdfffff
 80073d8:	35afe535 	.word	0x35afe535
 80073dc:	3fe00000 	.word	0x3fe00000
 80073e0:	000fffff 	.word	0x000fffff
 80073e4:	7ff00000 	.word	0x7ff00000
 80073e8:	7fefffff 	.word	0x7fefffff
 80073ec:	3ff00000 	.word	0x3ff00000
 80073f0:	3fe00000 	.word	0x3fe00000
 80073f4:	7fe00000 	.word	0x7fe00000
 80073f8:	7c9fffff 	.word	0x7c9fffff
 80073fc:	bff00000 	.word	0xbff00000
 8007400:	9b08      	ldr	r3, [sp, #32]
 8007402:	b323      	cbz	r3, 800744e <_strtod_l+0xb46>
 8007404:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007408:	d821      	bhi.n	800744e <_strtod_l+0xb46>
 800740a:	a327      	add	r3, pc, #156	@ (adr r3, 80074a8 <_strtod_l+0xba0>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	4630      	mov	r0, r6
 8007412:	4639      	mov	r1, r7
 8007414:	f7f9 fadc 	bl	80009d0 <__aeabi_dcmple>
 8007418:	b1a0      	cbz	r0, 8007444 <_strtod_l+0xb3c>
 800741a:	4639      	mov	r1, r7
 800741c:	4630      	mov	r0, r6
 800741e:	f7f9 fb33 	bl	8000a88 <__aeabi_d2uiz>
 8007422:	2801      	cmp	r0, #1
 8007424:	bf38      	it	cc
 8007426:	2001      	movcc	r0, #1
 8007428:	f7f8 ffdc 	bl	80003e4 <__aeabi_ui2d>
 800742c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800742e:	4606      	mov	r6, r0
 8007430:	460f      	mov	r7, r1
 8007432:	b9fb      	cbnz	r3, 8007474 <_strtod_l+0xb6c>
 8007434:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007438:	9014      	str	r0, [sp, #80]	@ 0x50
 800743a:	9315      	str	r3, [sp, #84]	@ 0x54
 800743c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007440:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007444:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007446:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800744a:	1b5b      	subs	r3, r3, r5
 800744c:	9311      	str	r3, [sp, #68]	@ 0x44
 800744e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007452:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007456:	f002 f91d 	bl	8009694 <__ulp>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4650      	mov	r0, sl
 8007460:	4659      	mov	r1, fp
 8007462:	f7f9 f839 	bl	80004d8 <__aeabi_dmul>
 8007466:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800746a:	f7f8 fe7f 	bl	800016c <__adddf3>
 800746e:	4682      	mov	sl, r0
 8007470:	468b      	mov	fp, r1
 8007472:	e776      	b.n	8007362 <_strtod_l+0xa5a>
 8007474:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007478:	e7e0      	b.n	800743c <_strtod_l+0xb34>
 800747a:	a30d      	add	r3, pc, #52	@ (adr r3, 80074b0 <_strtod_l+0xba8>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f7f9 fa9c 	bl	80009bc <__aeabi_dcmplt>
 8007484:	e79e      	b.n	80073c4 <_strtod_l+0xabc>
 8007486:	2300      	movs	r3, #0
 8007488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800748a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800748c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	f7ff ba77 	b.w	8006982 <_strtod_l+0x7a>
 8007494:	2a65      	cmp	r2, #101	@ 0x65
 8007496:	f43f ab6e 	beq.w	8006b76 <_strtod_l+0x26e>
 800749a:	2a45      	cmp	r2, #69	@ 0x45
 800749c:	f43f ab6b 	beq.w	8006b76 <_strtod_l+0x26e>
 80074a0:	2301      	movs	r3, #1
 80074a2:	f7ff bba6 	b.w	8006bf2 <_strtod_l+0x2ea>
 80074a6:	bf00      	nop
 80074a8:	ffc00000 	.word	0xffc00000
 80074ac:	41dfffff 	.word	0x41dfffff
 80074b0:	94a03595 	.word	0x94a03595
 80074b4:	3fcfffff 	.word	0x3fcfffff

080074b8 <_strtod_r>:
 80074b8:	4b01      	ldr	r3, [pc, #4]	@ (80074c0 <_strtod_r+0x8>)
 80074ba:	f7ff ba25 	b.w	8006908 <_strtod_l>
 80074be:	bf00      	nop
 80074c0:	20000040 	.word	0x20000040

080074c4 <_strtol_l.constprop.0>:
 80074c4:	2b24      	cmp	r3, #36	@ 0x24
 80074c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ca:	4686      	mov	lr, r0
 80074cc:	4690      	mov	r8, r2
 80074ce:	d801      	bhi.n	80074d4 <_strtol_l.constprop.0+0x10>
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d106      	bne.n	80074e2 <_strtol_l.constprop.0+0x1e>
 80074d4:	f000 f8c8 	bl	8007668 <__errno>
 80074d8:	2316      	movs	r3, #22
 80074da:	6003      	str	r3, [r0, #0]
 80074dc:	2000      	movs	r0, #0
 80074de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e2:	460d      	mov	r5, r1
 80074e4:	4833      	ldr	r0, [pc, #204]	@ (80075b4 <_strtol_l.constprop.0+0xf0>)
 80074e6:	462a      	mov	r2, r5
 80074e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ec:	5d06      	ldrb	r6, [r0, r4]
 80074ee:	f016 0608 	ands.w	r6, r6, #8
 80074f2:	d1f8      	bne.n	80074e6 <_strtol_l.constprop.0+0x22>
 80074f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80074f6:	d12d      	bne.n	8007554 <_strtol_l.constprop.0+0x90>
 80074f8:	2601      	movs	r6, #1
 80074fa:	782c      	ldrb	r4, [r5, #0]
 80074fc:	1c95      	adds	r5, r2, #2
 80074fe:	f033 0210 	bics.w	r2, r3, #16
 8007502:	d109      	bne.n	8007518 <_strtol_l.constprop.0+0x54>
 8007504:	2c30      	cmp	r4, #48	@ 0x30
 8007506:	d12a      	bne.n	800755e <_strtol_l.constprop.0+0x9a>
 8007508:	782a      	ldrb	r2, [r5, #0]
 800750a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800750e:	2a58      	cmp	r2, #88	@ 0x58
 8007510:	d125      	bne.n	800755e <_strtol_l.constprop.0+0x9a>
 8007512:	2310      	movs	r3, #16
 8007514:	786c      	ldrb	r4, [r5, #1]
 8007516:	3502      	adds	r5, #2
 8007518:	2200      	movs	r2, #0
 800751a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800751e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007522:	fbbc f9f3 	udiv	r9, ip, r3
 8007526:	4610      	mov	r0, r2
 8007528:	fb03 ca19 	mls	sl, r3, r9, ip
 800752c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007530:	2f09      	cmp	r7, #9
 8007532:	d81b      	bhi.n	800756c <_strtol_l.constprop.0+0xa8>
 8007534:	463c      	mov	r4, r7
 8007536:	42a3      	cmp	r3, r4
 8007538:	dd27      	ble.n	800758a <_strtol_l.constprop.0+0xc6>
 800753a:	1c57      	adds	r7, r2, #1
 800753c:	d007      	beq.n	800754e <_strtol_l.constprop.0+0x8a>
 800753e:	4581      	cmp	r9, r0
 8007540:	d320      	bcc.n	8007584 <_strtol_l.constprop.0+0xc0>
 8007542:	d101      	bne.n	8007548 <_strtol_l.constprop.0+0x84>
 8007544:	45a2      	cmp	sl, r4
 8007546:	db1d      	blt.n	8007584 <_strtol_l.constprop.0+0xc0>
 8007548:	2201      	movs	r2, #1
 800754a:	fb00 4003 	mla	r0, r0, r3, r4
 800754e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007552:	e7eb      	b.n	800752c <_strtol_l.constprop.0+0x68>
 8007554:	2c2b      	cmp	r4, #43	@ 0x2b
 8007556:	bf04      	itt	eq
 8007558:	782c      	ldrbeq	r4, [r5, #0]
 800755a:	1c95      	addeq	r5, r2, #2
 800755c:	e7cf      	b.n	80074fe <_strtol_l.constprop.0+0x3a>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1da      	bne.n	8007518 <_strtol_l.constprop.0+0x54>
 8007562:	2c30      	cmp	r4, #48	@ 0x30
 8007564:	bf0c      	ite	eq
 8007566:	2308      	moveq	r3, #8
 8007568:	230a      	movne	r3, #10
 800756a:	e7d5      	b.n	8007518 <_strtol_l.constprop.0+0x54>
 800756c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007570:	2f19      	cmp	r7, #25
 8007572:	d801      	bhi.n	8007578 <_strtol_l.constprop.0+0xb4>
 8007574:	3c37      	subs	r4, #55	@ 0x37
 8007576:	e7de      	b.n	8007536 <_strtol_l.constprop.0+0x72>
 8007578:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800757c:	2f19      	cmp	r7, #25
 800757e:	d804      	bhi.n	800758a <_strtol_l.constprop.0+0xc6>
 8007580:	3c57      	subs	r4, #87	@ 0x57
 8007582:	e7d8      	b.n	8007536 <_strtol_l.constprop.0+0x72>
 8007584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007588:	e7e1      	b.n	800754e <_strtol_l.constprop.0+0x8a>
 800758a:	1c53      	adds	r3, r2, #1
 800758c:	d108      	bne.n	80075a0 <_strtol_l.constprop.0+0xdc>
 800758e:	2322      	movs	r3, #34	@ 0x22
 8007590:	4660      	mov	r0, ip
 8007592:	f8ce 3000 	str.w	r3, [lr]
 8007596:	f1b8 0f00 	cmp.w	r8, #0
 800759a:	d0a0      	beq.n	80074de <_strtol_l.constprop.0+0x1a>
 800759c:	1e69      	subs	r1, r5, #1
 800759e:	e006      	b.n	80075ae <_strtol_l.constprop.0+0xea>
 80075a0:	b106      	cbz	r6, 80075a4 <_strtol_l.constprop.0+0xe0>
 80075a2:	4240      	negs	r0, r0
 80075a4:	f1b8 0f00 	cmp.w	r8, #0
 80075a8:	d099      	beq.n	80074de <_strtol_l.constprop.0+0x1a>
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	d1f6      	bne.n	800759c <_strtol_l.constprop.0+0xd8>
 80075ae:	f8c8 1000 	str.w	r1, [r8]
 80075b2:	e794      	b.n	80074de <_strtol_l.constprop.0+0x1a>
 80075b4:	0800c4b9 	.word	0x0800c4b9

080075b8 <_strtol_r>:
 80075b8:	f7ff bf84 	b.w	80074c4 <_strtol_l.constprop.0>

080075bc <_fwalk_sglue>:
 80075bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c0:	4607      	mov	r7, r0
 80075c2:	4688      	mov	r8, r1
 80075c4:	4614      	mov	r4, r2
 80075c6:	2600      	movs	r6, #0
 80075c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075cc:	f1b9 0901 	subs.w	r9, r9, #1
 80075d0:	d505      	bpl.n	80075de <_fwalk_sglue+0x22>
 80075d2:	6824      	ldr	r4, [r4, #0]
 80075d4:	2c00      	cmp	r4, #0
 80075d6:	d1f7      	bne.n	80075c8 <_fwalk_sglue+0xc>
 80075d8:	4630      	mov	r0, r6
 80075da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075de:	89ab      	ldrh	r3, [r5, #12]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d907      	bls.n	80075f4 <_fwalk_sglue+0x38>
 80075e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075e8:	3301      	adds	r3, #1
 80075ea:	d003      	beq.n	80075f4 <_fwalk_sglue+0x38>
 80075ec:	4629      	mov	r1, r5
 80075ee:	4638      	mov	r0, r7
 80075f0:	47c0      	blx	r8
 80075f2:	4306      	orrs	r6, r0
 80075f4:	3568      	adds	r5, #104	@ 0x68
 80075f6:	e7e9      	b.n	80075cc <_fwalk_sglue+0x10>

080075f8 <strncmp>:
 80075f8:	b510      	push	{r4, lr}
 80075fa:	b16a      	cbz	r2, 8007618 <strncmp+0x20>
 80075fc:	3901      	subs	r1, #1
 80075fe:	1884      	adds	r4, r0, r2
 8007600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007604:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007608:	429a      	cmp	r2, r3
 800760a:	d103      	bne.n	8007614 <strncmp+0x1c>
 800760c:	42a0      	cmp	r0, r4
 800760e:	d001      	beq.n	8007614 <strncmp+0x1c>
 8007610:	2a00      	cmp	r2, #0
 8007612:	d1f5      	bne.n	8007600 <strncmp+0x8>
 8007614:	1ad0      	subs	r0, r2, r3
 8007616:	bd10      	pop	{r4, pc}
 8007618:	4610      	mov	r0, r2
 800761a:	e7fc      	b.n	8007616 <strncmp+0x1e>

0800761c <memmove>:
 800761c:	4288      	cmp	r0, r1
 800761e:	b510      	push	{r4, lr}
 8007620:	eb01 0402 	add.w	r4, r1, r2
 8007624:	d902      	bls.n	800762c <memmove+0x10>
 8007626:	4284      	cmp	r4, r0
 8007628:	4623      	mov	r3, r4
 800762a:	d807      	bhi.n	800763c <memmove+0x20>
 800762c:	1e43      	subs	r3, r0, #1
 800762e:	42a1      	cmp	r1, r4
 8007630:	d008      	beq.n	8007644 <memmove+0x28>
 8007632:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800763a:	e7f8      	b.n	800762e <memmove+0x12>
 800763c:	4601      	mov	r1, r0
 800763e:	4402      	add	r2, r0
 8007640:	428a      	cmp	r2, r1
 8007642:	d100      	bne.n	8007646 <memmove+0x2a>
 8007644:	bd10      	pop	{r4, pc}
 8007646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800764a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800764e:	e7f7      	b.n	8007640 <memmove+0x24>

08007650 <memset>:
 8007650:	4603      	mov	r3, r0
 8007652:	4402      	add	r2, r0
 8007654:	4293      	cmp	r3, r2
 8007656:	d100      	bne.n	800765a <memset+0xa>
 8007658:	4770      	bx	lr
 800765a:	f803 1b01 	strb.w	r1, [r3], #1
 800765e:	e7f9      	b.n	8007654 <memset+0x4>

08007660 <_localeconv_r>:
 8007660:	4800      	ldr	r0, [pc, #0]	@ (8007664 <_localeconv_r+0x4>)
 8007662:	4770      	bx	lr
 8007664:	20000130 	.word	0x20000130

08007668 <__errno>:
 8007668:	4b01      	ldr	r3, [pc, #4]	@ (8007670 <__errno+0x8>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	200001ac 	.word	0x200001ac

08007674 <__libc_init_array>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	2600      	movs	r6, #0
 8007678:	4d0c      	ldr	r5, [pc, #48]	@ (80076ac <__libc_init_array+0x38>)
 800767a:	4c0d      	ldr	r4, [pc, #52]	@ (80076b0 <__libc_init_array+0x3c>)
 800767c:	1b64      	subs	r4, r4, r5
 800767e:	10a4      	asrs	r4, r4, #2
 8007680:	42a6      	cmp	r6, r4
 8007682:	d109      	bne.n	8007698 <__libc_init_array+0x24>
 8007684:	f002 fd44 	bl	800a110 <_init>
 8007688:	2600      	movs	r6, #0
 800768a:	4d0a      	ldr	r5, [pc, #40]	@ (80076b4 <__libc_init_array+0x40>)
 800768c:	4c0a      	ldr	r4, [pc, #40]	@ (80076b8 <__libc_init_array+0x44>)
 800768e:	1b64      	subs	r4, r4, r5
 8007690:	10a4      	asrs	r4, r4, #2
 8007692:	42a6      	cmp	r6, r4
 8007694:	d105      	bne.n	80076a2 <__libc_init_array+0x2e>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	f855 3b04 	ldr.w	r3, [r5], #4
 800769c:	4798      	blx	r3
 800769e:	3601      	adds	r6, #1
 80076a0:	e7ee      	b.n	8007680 <__libc_init_array+0xc>
 80076a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a6:	4798      	blx	r3
 80076a8:	3601      	adds	r6, #1
 80076aa:	e7f2      	b.n	8007692 <__libc_init_array+0x1e>
 80076ac:	0800c854 	.word	0x0800c854
 80076b0:	0800c854 	.word	0x0800c854
 80076b4:	0800c854 	.word	0x0800c854
 80076b8:	0800c858 	.word	0x0800c858

080076bc <__retarget_lock_init_recursive>:
 80076bc:	4770      	bx	lr

080076be <__retarget_lock_acquire_recursive>:
 80076be:	4770      	bx	lr

080076c0 <__retarget_lock_release_recursive>:
 80076c0:	4770      	bx	lr

080076c2 <memchr>:
 80076c2:	4603      	mov	r3, r0
 80076c4:	b510      	push	{r4, lr}
 80076c6:	b2c9      	uxtb	r1, r1
 80076c8:	4402      	add	r2, r0
 80076ca:	4293      	cmp	r3, r2
 80076cc:	4618      	mov	r0, r3
 80076ce:	d101      	bne.n	80076d4 <memchr+0x12>
 80076d0:	2000      	movs	r0, #0
 80076d2:	e003      	b.n	80076dc <memchr+0x1a>
 80076d4:	7804      	ldrb	r4, [r0, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	428c      	cmp	r4, r1
 80076da:	d1f6      	bne.n	80076ca <memchr+0x8>
 80076dc:	bd10      	pop	{r4, pc}

080076de <memcpy>:
 80076de:	440a      	add	r2, r1
 80076e0:	4291      	cmp	r1, r2
 80076e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80076e6:	d100      	bne.n	80076ea <memcpy+0xc>
 80076e8:	4770      	bx	lr
 80076ea:	b510      	push	{r4, lr}
 80076ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f0:	4291      	cmp	r1, r2
 80076f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076f6:	d1f9      	bne.n	80076ec <memcpy+0xe>
 80076f8:	bd10      	pop	{r4, pc}
	...

080076fc <nan>:
 80076fc:	2000      	movs	r0, #0
 80076fe:	4901      	ldr	r1, [pc, #4]	@ (8007704 <nan+0x8>)
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	7ff80000 	.word	0x7ff80000

08007708 <nanf>:
 8007708:	4800      	ldr	r0, [pc, #0]	@ (800770c <nanf+0x4>)
 800770a:	4770      	bx	lr
 800770c:	7fc00000 	.word	0x7fc00000

08007710 <quorem>:
 8007710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	6903      	ldr	r3, [r0, #16]
 8007716:	690c      	ldr	r4, [r1, #16]
 8007718:	4607      	mov	r7, r0
 800771a:	42a3      	cmp	r3, r4
 800771c:	db7e      	blt.n	800781c <quorem+0x10c>
 800771e:	3c01      	subs	r4, #1
 8007720:	00a3      	lsls	r3, r4, #2
 8007722:	f100 0514 	add.w	r5, r0, #20
 8007726:	f101 0814 	add.w	r8, r1, #20
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800773a:	3301      	adds	r3, #1
 800773c:	429a      	cmp	r2, r3
 800773e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007742:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007746:	d32e      	bcc.n	80077a6 <quorem+0x96>
 8007748:	f04f 0a00 	mov.w	sl, #0
 800774c:	46c4      	mov	ip, r8
 800774e:	46ae      	mov	lr, r5
 8007750:	46d3      	mov	fp, sl
 8007752:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007756:	b298      	uxth	r0, r3
 8007758:	fb06 a000 	mla	r0, r6, r0, sl
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	0c02      	lsrs	r2, r0, #16
 8007760:	fb06 2303 	mla	r3, r6, r3, r2
 8007764:	f8de 2000 	ldr.w	r2, [lr]
 8007768:	b280      	uxth	r0, r0
 800776a:	b292      	uxth	r2, r2
 800776c:	1a12      	subs	r2, r2, r0
 800776e:	445a      	add	r2, fp
 8007770:	f8de 0000 	ldr.w	r0, [lr]
 8007774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007778:	b29b      	uxth	r3, r3
 800777a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800777e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007782:	b292      	uxth	r2, r2
 8007784:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007788:	45e1      	cmp	r9, ip
 800778a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800778e:	f84e 2b04 	str.w	r2, [lr], #4
 8007792:	d2de      	bcs.n	8007752 <quorem+0x42>
 8007794:	9b00      	ldr	r3, [sp, #0]
 8007796:	58eb      	ldr	r3, [r5, r3]
 8007798:	b92b      	cbnz	r3, 80077a6 <quorem+0x96>
 800779a:	9b01      	ldr	r3, [sp, #4]
 800779c:	3b04      	subs	r3, #4
 800779e:	429d      	cmp	r5, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	d32f      	bcc.n	8007804 <quorem+0xf4>
 80077a4:	613c      	str	r4, [r7, #16]
 80077a6:	4638      	mov	r0, r7
 80077a8:	f001 fec4 	bl	8009534 <__mcmp>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	db25      	blt.n	80077fc <quorem+0xec>
 80077b0:	4629      	mov	r1, r5
 80077b2:	2000      	movs	r0, #0
 80077b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80077b8:	f8d1 c000 	ldr.w	ip, [r1]
 80077bc:	fa1f fe82 	uxth.w	lr, r2
 80077c0:	fa1f f38c 	uxth.w	r3, ip
 80077c4:	eba3 030e 	sub.w	r3, r3, lr
 80077c8:	4403      	add	r3, r0
 80077ca:	0c12      	lsrs	r2, r2, #16
 80077cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80077d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077da:	45c1      	cmp	r9, r8
 80077dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077e0:	f841 3b04 	str.w	r3, [r1], #4
 80077e4:	d2e6      	bcs.n	80077b4 <quorem+0xa4>
 80077e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077ee:	b922      	cbnz	r2, 80077fa <quorem+0xea>
 80077f0:	3b04      	subs	r3, #4
 80077f2:	429d      	cmp	r5, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	d30b      	bcc.n	8007810 <quorem+0x100>
 80077f8:	613c      	str	r4, [r7, #16]
 80077fa:	3601      	adds	r6, #1
 80077fc:	4630      	mov	r0, r6
 80077fe:	b003      	add	sp, #12
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	3b04      	subs	r3, #4
 8007808:	2a00      	cmp	r2, #0
 800780a:	d1cb      	bne.n	80077a4 <quorem+0x94>
 800780c:	3c01      	subs	r4, #1
 800780e:	e7c6      	b.n	800779e <quorem+0x8e>
 8007810:	6812      	ldr	r2, [r2, #0]
 8007812:	3b04      	subs	r3, #4
 8007814:	2a00      	cmp	r2, #0
 8007816:	d1ef      	bne.n	80077f8 <quorem+0xe8>
 8007818:	3c01      	subs	r4, #1
 800781a:	e7ea      	b.n	80077f2 <quorem+0xe2>
 800781c:	2000      	movs	r0, #0
 800781e:	e7ee      	b.n	80077fe <quorem+0xee>

08007820 <_dtoa_r>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	4614      	mov	r4, r2
 8007826:	461d      	mov	r5, r3
 8007828:	69c7      	ldr	r7, [r0, #28]
 800782a:	b097      	sub	sp, #92	@ 0x5c
 800782c:	4683      	mov	fp, r0
 800782e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007832:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007834:	b97f      	cbnz	r7, 8007856 <_dtoa_r+0x36>
 8007836:	2010      	movs	r0, #16
 8007838:	f001 fa4a 	bl	8008cd0 <malloc>
 800783c:	4602      	mov	r2, r0
 800783e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007842:	b920      	cbnz	r0, 800784e <_dtoa_r+0x2e>
 8007844:	21ef      	movs	r1, #239	@ 0xef
 8007846:	4ba8      	ldr	r3, [pc, #672]	@ (8007ae8 <_dtoa_r+0x2c8>)
 8007848:	48a8      	ldr	r0, [pc, #672]	@ (8007aec <_dtoa_r+0x2cc>)
 800784a:	f002 f92b 	bl	8009aa4 <__assert_func>
 800784e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007852:	6007      	str	r7, [r0, #0]
 8007854:	60c7      	str	r7, [r0, #12]
 8007856:	f8db 301c 	ldr.w	r3, [fp, #28]
 800785a:	6819      	ldr	r1, [r3, #0]
 800785c:	b159      	cbz	r1, 8007876 <_dtoa_r+0x56>
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	2301      	movs	r3, #1
 8007862:	4093      	lsls	r3, r2
 8007864:	604a      	str	r2, [r1, #4]
 8007866:	608b      	str	r3, [r1, #8]
 8007868:	4658      	mov	r0, fp
 800786a:	f001 fbe1 	bl	8009030 <_Bfree>
 800786e:	2200      	movs	r2, #0
 8007870:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	1e2b      	subs	r3, r5, #0
 8007878:	bfaf      	iteee	ge
 800787a:	2300      	movge	r3, #0
 800787c:	2201      	movlt	r2, #1
 800787e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007882:	9303      	strlt	r3, [sp, #12]
 8007884:	bfa8      	it	ge
 8007886:	6033      	strge	r3, [r6, #0]
 8007888:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800788c:	4b98      	ldr	r3, [pc, #608]	@ (8007af0 <_dtoa_r+0x2d0>)
 800788e:	bfb8      	it	lt
 8007890:	6032      	strlt	r2, [r6, #0]
 8007892:	ea33 0308 	bics.w	r3, r3, r8
 8007896:	d112      	bne.n	80078be <_dtoa_r+0x9e>
 8007898:	f242 730f 	movw	r3, #9999	@ 0x270f
 800789c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80078a4:	4323      	orrs	r3, r4
 80078a6:	f000 8550 	beq.w	800834a <_dtoa_r+0xb2a>
 80078aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007af4 <_dtoa_r+0x2d4>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8552 	beq.w	800835a <_dtoa_r+0xb3a>
 80078b6:	f10a 0303 	add.w	r3, sl, #3
 80078ba:	f000 bd4c 	b.w	8008356 <_dtoa_r+0xb36>
 80078be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80078c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ca:	2200      	movs	r2, #0
 80078cc:	2300      	movs	r3, #0
 80078ce:	f7f9 f86b 	bl	80009a8 <__aeabi_dcmpeq>
 80078d2:	4607      	mov	r7, r0
 80078d4:	b158      	cbz	r0, 80078ee <_dtoa_r+0xce>
 80078d6:	2301      	movs	r3, #1
 80078d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078de:	b113      	cbz	r3, 80078e6 <_dtoa_r+0xc6>
 80078e0:	4b85      	ldr	r3, [pc, #532]	@ (8007af8 <_dtoa_r+0x2d8>)
 80078e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007afc <_dtoa_r+0x2dc>
 80078ea:	f000 bd36 	b.w	800835a <_dtoa_r+0xb3a>
 80078ee:	ab14      	add	r3, sp, #80	@ 0x50
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	ab15      	add	r3, sp, #84	@ 0x54
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4658      	mov	r0, fp
 80078f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078fc:	f001 ff32 	bl	8009764 <__d2b>
 8007900:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007904:	4681      	mov	r9, r0
 8007906:	2e00      	cmp	r6, #0
 8007908:	d077      	beq.n	80079fa <_dtoa_r+0x1da>
 800790a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800790e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007910:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007918:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800791c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007920:	9712      	str	r7, [sp, #72]	@ 0x48
 8007922:	4619      	mov	r1, r3
 8007924:	2200      	movs	r2, #0
 8007926:	4b76      	ldr	r3, [pc, #472]	@ (8007b00 <_dtoa_r+0x2e0>)
 8007928:	f7f8 fc1e 	bl	8000168 <__aeabi_dsub>
 800792c:	a368      	add	r3, pc, #416	@ (adr r3, 8007ad0 <_dtoa_r+0x2b0>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fdd1 	bl	80004d8 <__aeabi_dmul>
 8007936:	a368      	add	r3, pc, #416	@ (adr r3, 8007ad8 <_dtoa_r+0x2b8>)
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f7f8 fc16 	bl	800016c <__adddf3>
 8007940:	4604      	mov	r4, r0
 8007942:	4630      	mov	r0, r6
 8007944:	460d      	mov	r5, r1
 8007946:	f7f8 fd5d 	bl	8000404 <__aeabi_i2d>
 800794a:	a365      	add	r3, pc, #404	@ (adr r3, 8007ae0 <_dtoa_r+0x2c0>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f7f8 fdc2 	bl	80004d8 <__aeabi_dmul>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4620      	mov	r0, r4
 800795a:	4629      	mov	r1, r5
 800795c:	f7f8 fc06 	bl	800016c <__adddf3>
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	f7f9 f868 	bl	8000a38 <__aeabi_d2iz>
 8007968:	2200      	movs	r2, #0
 800796a:	4607      	mov	r7, r0
 800796c:	2300      	movs	r3, #0
 800796e:	4620      	mov	r0, r4
 8007970:	4629      	mov	r1, r5
 8007972:	f7f9 f823 	bl	80009bc <__aeabi_dcmplt>
 8007976:	b140      	cbz	r0, 800798a <_dtoa_r+0x16a>
 8007978:	4638      	mov	r0, r7
 800797a:	f7f8 fd43 	bl	8000404 <__aeabi_i2d>
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	f7f9 f811 	bl	80009a8 <__aeabi_dcmpeq>
 8007986:	b900      	cbnz	r0, 800798a <_dtoa_r+0x16a>
 8007988:	3f01      	subs	r7, #1
 800798a:	2f16      	cmp	r7, #22
 800798c:	d853      	bhi.n	8007a36 <_dtoa_r+0x216>
 800798e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007992:	4b5c      	ldr	r3, [pc, #368]	@ (8007b04 <_dtoa_r+0x2e4>)
 8007994:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f9 f80e 	bl	80009bc <__aeabi_dcmplt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d04a      	beq.n	8007a3a <_dtoa_r+0x21a>
 80079a4:	2300      	movs	r3, #0
 80079a6:	3f01      	subs	r7, #1
 80079a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80079ac:	1b9b      	subs	r3, r3, r6
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	bf46      	itte	mi
 80079b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80079b6:	2300      	movmi	r3, #0
 80079b8:	f04f 0800 	movpl.w	r8, #0
 80079bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80079be:	bf48      	it	mi
 80079c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80079c2:	2f00      	cmp	r7, #0
 80079c4:	db3b      	blt.n	8007a3e <_dtoa_r+0x21e>
 80079c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80079ca:	443b      	add	r3, r7
 80079cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ce:	2300      	movs	r3, #0
 80079d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079d4:	2b09      	cmp	r3, #9
 80079d6:	d866      	bhi.n	8007aa6 <_dtoa_r+0x286>
 80079d8:	2b05      	cmp	r3, #5
 80079da:	bfc4      	itt	gt
 80079dc:	3b04      	subgt	r3, #4
 80079de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80079e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079e2:	bfc8      	it	gt
 80079e4:	2400      	movgt	r4, #0
 80079e6:	f1a3 0302 	sub.w	r3, r3, #2
 80079ea:	bfd8      	it	le
 80079ec:	2401      	movle	r4, #1
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d864      	bhi.n	8007abc <_dtoa_r+0x29c>
 80079f2:	e8df f003 	tbb	[pc, r3]
 80079f6:	382b      	.short	0x382b
 80079f8:	5636      	.short	0x5636
 80079fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80079fe:	441e      	add	r6, r3
 8007a00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	bfc1      	itttt	gt
 8007a08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a18:	bfd6      	itet	le
 8007a1a:	f1c3 0320 	rsble	r3, r3, #32
 8007a1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a22:	fa04 f003 	lslle.w	r0, r4, r3
 8007a26:	f7f8 fcdd 	bl	80003e4 <__aeabi_ui2d>
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a30:	3e01      	subs	r6, #1
 8007a32:	9212      	str	r2, [sp, #72]	@ 0x48
 8007a34:	e775      	b.n	8007922 <_dtoa_r+0x102>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e7b6      	b.n	80079a8 <_dtoa_r+0x188>
 8007a3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007a3c:	e7b5      	b.n	80079aa <_dtoa_r+0x18a>
 8007a3e:	427b      	negs	r3, r7
 8007a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a42:	2300      	movs	r3, #0
 8007a44:	eba8 0807 	sub.w	r8, r8, r7
 8007a48:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a4a:	e7c2      	b.n	80079d2 <_dtoa_r+0x1b2>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dc35      	bgt.n	8007ac2 <_dtoa_r+0x2a2>
 8007a56:	2301      	movs	r3, #1
 8007a58:	461a      	mov	r2, r3
 8007a5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007a60:	e00b      	b.n	8007a7a <_dtoa_r+0x25a>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e7f3      	b.n	8007a4e <_dtoa_r+0x22e>
 8007a66:	2300      	movs	r3, #0
 8007a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a6c:	18fb      	adds	r3, r7, r3
 8007a6e:	9308      	str	r3, [sp, #32]
 8007a70:	3301      	adds	r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	9307      	str	r3, [sp, #28]
 8007a76:	bfb8      	it	lt
 8007a78:	2301      	movlt	r3, #1
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a82:	f102 0514 	add.w	r5, r2, #20
 8007a86:	429d      	cmp	r5, r3
 8007a88:	d91f      	bls.n	8007aca <_dtoa_r+0x2aa>
 8007a8a:	6041      	str	r1, [r0, #4]
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	f001 fa8f 	bl	8008fb0 <_Balloc>
 8007a92:	4682      	mov	sl, r0
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d139      	bne.n	8007b0c <_dtoa_r+0x2ec>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b08 <_dtoa_r+0x2e8>)
 8007aa0:	e6d2      	b.n	8007848 <_dtoa_r+0x28>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e7e0      	b.n	8007a68 <_dtoa_r+0x248>
 8007aa6:	2401      	movs	r4, #1
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007aac:	9320      	str	r3, [sp, #128]	@ 0x80
 8007aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ab8:	2312      	movs	r3, #18
 8007aba:	e7d0      	b.n	8007a5e <_dtoa_r+0x23e>
 8007abc:	2301      	movs	r3, #1
 8007abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ac0:	e7f5      	b.n	8007aae <_dtoa_r+0x28e>
 8007ac2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ac4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ac8:	e7d7      	b.n	8007a7a <_dtoa_r+0x25a>
 8007aca:	3101      	adds	r1, #1
 8007acc:	0052      	lsls	r2, r2, #1
 8007ace:	e7d8      	b.n	8007a82 <_dtoa_r+0x262>
 8007ad0:	636f4361 	.word	0x636f4361
 8007ad4:	3fd287a7 	.word	0x3fd287a7
 8007ad8:	8b60c8b3 	.word	0x8b60c8b3
 8007adc:	3fc68a28 	.word	0x3fc68a28
 8007ae0:	509f79fb 	.word	0x509f79fb
 8007ae4:	3fd34413 	.word	0x3fd34413
 8007ae8:	0800c5c6 	.word	0x0800c5c6
 8007aec:	0800c5dd 	.word	0x0800c5dd
 8007af0:	7ff00000 	.word	0x7ff00000
 8007af4:	0800c5c2 	.word	0x0800c5c2
 8007af8:	0800c433 	.word	0x0800c433
 8007afc:	0800c432 	.word	0x0800c432
 8007b00:	3ff80000 	.word	0x3ff80000
 8007b04:	0800c748 	.word	0x0800c748
 8007b08:	0800c635 	.word	0x0800c635
 8007b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b10:	6018      	str	r0, [r3, #0]
 8007b12:	9b07      	ldr	r3, [sp, #28]
 8007b14:	2b0e      	cmp	r3, #14
 8007b16:	f200 80a4 	bhi.w	8007c62 <_dtoa_r+0x442>
 8007b1a:	2c00      	cmp	r4, #0
 8007b1c:	f000 80a1 	beq.w	8007c62 <_dtoa_r+0x442>
 8007b20:	2f00      	cmp	r7, #0
 8007b22:	dd33      	ble.n	8007b8c <_dtoa_r+0x36c>
 8007b24:	4b86      	ldr	r3, [pc, #536]	@ (8007d40 <_dtoa_r+0x520>)
 8007b26:	f007 020f 	and.w	r2, r7, #15
 8007b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b2e:	05f8      	lsls	r0, r7, #23
 8007b30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b3c:	d516      	bpl.n	8007b6c <_dtoa_r+0x34c>
 8007b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b42:	4b80      	ldr	r3, [pc, #512]	@ (8007d44 <_dtoa_r+0x524>)
 8007b44:	2603      	movs	r6, #3
 8007b46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b4a:	f7f8 fdef 	bl	800072c <__aeabi_ddiv>
 8007b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b52:	f004 040f 	and.w	r4, r4, #15
 8007b56:	4d7b      	ldr	r5, [pc, #492]	@ (8007d44 <_dtoa_r+0x524>)
 8007b58:	b954      	cbnz	r4, 8007b70 <_dtoa_r+0x350>
 8007b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b62:	f7f8 fde3 	bl	800072c <__aeabi_ddiv>
 8007b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b6a:	e028      	b.n	8007bbe <_dtoa_r+0x39e>
 8007b6c:	2602      	movs	r6, #2
 8007b6e:	e7f2      	b.n	8007b56 <_dtoa_r+0x336>
 8007b70:	07e1      	lsls	r1, r4, #31
 8007b72:	d508      	bpl.n	8007b86 <_dtoa_r+0x366>
 8007b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b7c:	f7f8 fcac 	bl	80004d8 <__aeabi_dmul>
 8007b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b84:	3601      	adds	r6, #1
 8007b86:	1064      	asrs	r4, r4, #1
 8007b88:	3508      	adds	r5, #8
 8007b8a:	e7e5      	b.n	8007b58 <_dtoa_r+0x338>
 8007b8c:	f000 80d2 	beq.w	8007d34 <_dtoa_r+0x514>
 8007b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b94:	427c      	negs	r4, r7
 8007b96:	4b6a      	ldr	r3, [pc, #424]	@ (8007d40 <_dtoa_r+0x520>)
 8007b98:	f004 020f 	and.w	r2, r4, #15
 8007b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	f7f8 fc98 	bl	80004d8 <__aeabi_dmul>
 8007ba8:	2602      	movs	r6, #2
 8007baa:	2300      	movs	r3, #0
 8007bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb0:	4d64      	ldr	r5, [pc, #400]	@ (8007d44 <_dtoa_r+0x524>)
 8007bb2:	1124      	asrs	r4, r4, #4
 8007bb4:	2c00      	cmp	r4, #0
 8007bb6:	f040 80b2 	bne.w	8007d1e <_dtoa_r+0x4fe>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1d3      	bne.n	8007b66 <_dtoa_r+0x346>
 8007bbe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80b7 	beq.w	8007d38 <_dtoa_r+0x518>
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8007d48 <_dtoa_r+0x528>)
 8007bd2:	f7f8 fef3 	bl	80009bc <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f000 80ae 	beq.w	8007d38 <_dtoa_r+0x518>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80aa 	beq.w	8007d38 <_dtoa_r+0x518>
 8007be4:	9b08      	ldr	r3, [sp, #32]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dd37      	ble.n	8007c5a <_dtoa_r+0x43a>
 8007bea:	1e7b      	subs	r3, r7, #1
 8007bec:	4620      	mov	r0, r4
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	4b55      	ldr	r3, [pc, #340]	@ (8007d4c <_dtoa_r+0x52c>)
 8007bf6:	f7f8 fc6f 	bl	80004d8 <__aeabi_dmul>
 8007bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfe:	9c08      	ldr	r4, [sp, #32]
 8007c00:	3601      	adds	r6, #1
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7f8 fbfe 	bl	8000404 <__aeabi_i2d>
 8007c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c0c:	f7f8 fc64 	bl	80004d8 <__aeabi_dmul>
 8007c10:	2200      	movs	r2, #0
 8007c12:	4b4f      	ldr	r3, [pc, #316]	@ (8007d50 <_dtoa_r+0x530>)
 8007c14:	f7f8 faaa 	bl	800016c <__adddf3>
 8007c18:	4605      	mov	r5, r0
 8007c1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c1e:	2c00      	cmp	r4, #0
 8007c20:	f040 809a 	bne.w	8007d58 <_dtoa_r+0x538>
 8007c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8007d54 <_dtoa_r+0x534>)
 8007c2c:	f7f8 fa9c 	bl	8000168 <__aeabi_dsub>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4633      	mov	r3, r6
 8007c3c:	f7f8 fedc 	bl	80009f8 <__aeabi_dcmpgt>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	f040 828e 	bne.w	8008162 <_dtoa_r+0x942>
 8007c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c50:	f7f8 feb4 	bl	80009bc <__aeabi_dcmplt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	f040 8127 	bne.w	8007ea8 <_dtoa_r+0x688>
 8007c5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f2c0 8163 	blt.w	8007f30 <_dtoa_r+0x710>
 8007c6a:	2f0e      	cmp	r7, #14
 8007c6c:	f300 8160 	bgt.w	8007f30 <_dtoa_r+0x710>
 8007c70:	4b33      	ldr	r3, [pc, #204]	@ (8007d40 <_dtoa_r+0x520>)
 8007c72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	da03      	bge.n	8007c8c <_dtoa_r+0x46c>
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f340 8100 	ble.w	8007e8c <_dtoa_r+0x66c>
 8007c8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c90:	4656      	mov	r6, sl
 8007c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 fd47 	bl	800072c <__aeabi_ddiv>
 8007c9e:	f7f8 fecb 	bl	8000a38 <__aeabi_d2iz>
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	f7f8 fbae 	bl	8000404 <__aeabi_i2d>
 8007ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cac:	f7f8 fc14 	bl	80004d8 <__aeabi_dmul>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f7f8 fa56 	bl	8000168 <__aeabi_dsub>
 8007cbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007cc0:	9d07      	ldr	r5, [sp, #28]
 8007cc2:	f806 4b01 	strb.w	r4, [r6], #1
 8007cc6:	eba6 040a 	sub.w	r4, r6, sl
 8007cca:	42a5      	cmp	r5, r4
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	f040 8116 	bne.w	8007f00 <_dtoa_r+0x6e0>
 8007cd4:	f7f8 fa4a 	bl	800016c <__adddf3>
 8007cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cdc:	4604      	mov	r4, r0
 8007cde:	460d      	mov	r5, r1
 8007ce0:	f7f8 fe8a 	bl	80009f8 <__aeabi_dcmpgt>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f040 80f8 	bne.w	8007eda <_dtoa_r+0x6ba>
 8007cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fe59 	bl	80009a8 <__aeabi_dcmpeq>
 8007cf6:	b118      	cbz	r0, 8007d00 <_dtoa_r+0x4e0>
 8007cf8:	f018 0f01 	tst.w	r8, #1
 8007cfc:	f040 80ed 	bne.w	8007eda <_dtoa_r+0x6ba>
 8007d00:	4649      	mov	r1, r9
 8007d02:	4658      	mov	r0, fp
 8007d04:	f001 f994 	bl	8009030 <_Bfree>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	7033      	strb	r3, [r6, #0]
 8007d0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d0e:	3701      	adds	r7, #1
 8007d10:	601f      	str	r7, [r3, #0]
 8007d12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8320 	beq.w	800835a <_dtoa_r+0xb3a>
 8007d1a:	601e      	str	r6, [r3, #0]
 8007d1c:	e31d      	b.n	800835a <_dtoa_r+0xb3a>
 8007d1e:	07e2      	lsls	r2, r4, #31
 8007d20:	d505      	bpl.n	8007d2e <_dtoa_r+0x50e>
 8007d22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d26:	f7f8 fbd7 	bl	80004d8 <__aeabi_dmul>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	1064      	asrs	r4, r4, #1
 8007d30:	3508      	adds	r5, #8
 8007d32:	e73f      	b.n	8007bb4 <_dtoa_r+0x394>
 8007d34:	2602      	movs	r6, #2
 8007d36:	e742      	b.n	8007bbe <_dtoa_r+0x39e>
 8007d38:	9c07      	ldr	r4, [sp, #28]
 8007d3a:	9704      	str	r7, [sp, #16]
 8007d3c:	e761      	b.n	8007c02 <_dtoa_r+0x3e2>
 8007d3e:	bf00      	nop
 8007d40:	0800c748 	.word	0x0800c748
 8007d44:	0800c720 	.word	0x0800c720
 8007d48:	3ff00000 	.word	0x3ff00000
 8007d4c:	40240000 	.word	0x40240000
 8007d50:	401c0000 	.word	0x401c0000
 8007d54:	40140000 	.word	0x40140000
 8007d58:	4b70      	ldr	r3, [pc, #448]	@ (8007f1c <_dtoa_r+0x6fc>)
 8007d5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d64:	4454      	add	r4, sl
 8007d66:	2900      	cmp	r1, #0
 8007d68:	d045      	beq.n	8007df6 <_dtoa_r+0x5d6>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	496c      	ldr	r1, [pc, #432]	@ (8007f20 <_dtoa_r+0x700>)
 8007d6e:	f7f8 fcdd 	bl	800072c <__aeabi_ddiv>
 8007d72:	4633      	mov	r3, r6
 8007d74:	462a      	mov	r2, r5
 8007d76:	f7f8 f9f7 	bl	8000168 <__aeabi_dsub>
 8007d7a:	4656      	mov	r6, sl
 8007d7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d84:	f7f8 fe58 	bl	8000a38 <__aeabi_d2iz>
 8007d88:	4605      	mov	r5, r0
 8007d8a:	f7f8 fb3b 	bl	8000404 <__aeabi_i2d>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d96:	f7f8 f9e7 	bl	8000168 <__aeabi_dsub>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	3530      	adds	r5, #48	@ 0x30
 8007da0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007da4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007da8:	f806 5b01 	strb.w	r5, [r6], #1
 8007dac:	f7f8 fe06 	bl	80009bc <__aeabi_dcmplt>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d163      	bne.n	8007e7c <_dtoa_r+0x65c>
 8007db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db8:	2000      	movs	r0, #0
 8007dba:	495a      	ldr	r1, [pc, #360]	@ (8007f24 <_dtoa_r+0x704>)
 8007dbc:	f7f8 f9d4 	bl	8000168 <__aeabi_dsub>
 8007dc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dc4:	f7f8 fdfa 	bl	80009bc <__aeabi_dcmplt>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	f040 8087 	bne.w	8007edc <_dtoa_r+0x6bc>
 8007dce:	42a6      	cmp	r6, r4
 8007dd0:	f43f af43 	beq.w	8007c5a <_dtoa_r+0x43a>
 8007dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4b53      	ldr	r3, [pc, #332]	@ (8007f28 <_dtoa_r+0x708>)
 8007ddc:	f7f8 fb7c 	bl	80004d8 <__aeabi_dmul>
 8007de0:	2200      	movs	r2, #0
 8007de2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dea:	4b4f      	ldr	r3, [pc, #316]	@ (8007f28 <_dtoa_r+0x708>)
 8007dec:	f7f8 fb74 	bl	80004d8 <__aeabi_dmul>
 8007df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df4:	e7c4      	b.n	8007d80 <_dtoa_r+0x560>
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f7f8 fb6d 	bl	80004d8 <__aeabi_dmul>
 8007dfe:	4656      	mov	r6, sl
 8007e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e04:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e0a:	f7f8 fe15 	bl	8000a38 <__aeabi_d2iz>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	f7f8 faf8 	bl	8000404 <__aeabi_i2d>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1c:	f7f8 f9a4 	bl	8000168 <__aeabi_dsub>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	3530      	adds	r5, #48	@ 0x30
 8007e26:	f806 5b01 	strb.w	r5, [r6], #1
 8007e2a:	42a6      	cmp	r6, r4
 8007e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	d124      	bne.n	8007e80 <_dtoa_r+0x660>
 8007e36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e3a:	4b39      	ldr	r3, [pc, #228]	@ (8007f20 <_dtoa_r+0x700>)
 8007e3c:	f7f8 f996 	bl	800016c <__adddf3>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e48:	f7f8 fdd6 	bl	80009f8 <__aeabi_dcmpgt>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d145      	bne.n	8007edc <_dtoa_r+0x6bc>
 8007e50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e54:	2000      	movs	r0, #0
 8007e56:	4932      	ldr	r1, [pc, #200]	@ (8007f20 <_dtoa_r+0x700>)
 8007e58:	f7f8 f986 	bl	8000168 <__aeabi_dsub>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e64:	f7f8 fdaa 	bl	80009bc <__aeabi_dcmplt>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	f43f aef6 	beq.w	8007c5a <_dtoa_r+0x43a>
 8007e6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007e70:	1e73      	subs	r3, r6, #1
 8007e72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e78:	2b30      	cmp	r3, #48	@ 0x30
 8007e7a:	d0f8      	beq.n	8007e6e <_dtoa_r+0x64e>
 8007e7c:	9f04      	ldr	r7, [sp, #16]
 8007e7e:	e73f      	b.n	8007d00 <_dtoa_r+0x4e0>
 8007e80:	4b29      	ldr	r3, [pc, #164]	@ (8007f28 <_dtoa_r+0x708>)
 8007e82:	f7f8 fb29 	bl	80004d8 <__aeabi_dmul>
 8007e86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e8a:	e7bc      	b.n	8007e06 <_dtoa_r+0x5e6>
 8007e8c:	d10c      	bne.n	8007ea8 <_dtoa_r+0x688>
 8007e8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e92:	2200      	movs	r2, #0
 8007e94:	4b25      	ldr	r3, [pc, #148]	@ (8007f2c <_dtoa_r+0x70c>)
 8007e96:	f7f8 fb1f 	bl	80004d8 <__aeabi_dmul>
 8007e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e9e:	f7f8 fda1 	bl	80009e4 <__aeabi_dcmpge>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	f000 815b 	beq.w	800815e <_dtoa_r+0x93e>
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	4625      	mov	r5, r4
 8007eac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eae:	4656      	mov	r6, sl
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	2700      	movs	r7, #0
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4658      	mov	r0, fp
 8007eba:	f001 f8b9 	bl	8009030 <_Bfree>
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	d0dc      	beq.n	8007e7c <_dtoa_r+0x65c>
 8007ec2:	b12f      	cbz	r7, 8007ed0 <_dtoa_r+0x6b0>
 8007ec4:	42af      	cmp	r7, r5
 8007ec6:	d003      	beq.n	8007ed0 <_dtoa_r+0x6b0>
 8007ec8:	4639      	mov	r1, r7
 8007eca:	4658      	mov	r0, fp
 8007ecc:	f001 f8b0 	bl	8009030 <_Bfree>
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	f001 f8ac 	bl	8009030 <_Bfree>
 8007ed8:	e7d0      	b.n	8007e7c <_dtoa_r+0x65c>
 8007eda:	9704      	str	r7, [sp, #16]
 8007edc:	4633      	mov	r3, r6
 8007ede:	461e      	mov	r6, r3
 8007ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee4:	2a39      	cmp	r2, #57	@ 0x39
 8007ee6:	d107      	bne.n	8007ef8 <_dtoa_r+0x6d8>
 8007ee8:	459a      	cmp	sl, r3
 8007eea:	d1f8      	bne.n	8007ede <_dtoa_r+0x6be>
 8007eec:	9a04      	ldr	r2, [sp, #16]
 8007eee:	3201      	adds	r2, #1
 8007ef0:	9204      	str	r2, [sp, #16]
 8007ef2:	2230      	movs	r2, #48	@ 0x30
 8007ef4:	f88a 2000 	strb.w	r2, [sl]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	3201      	adds	r2, #1
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	e7bd      	b.n	8007e7c <_dtoa_r+0x65c>
 8007f00:	2200      	movs	r2, #0
 8007f02:	4b09      	ldr	r3, [pc, #36]	@ (8007f28 <_dtoa_r+0x708>)
 8007f04:	f7f8 fae8 	bl	80004d8 <__aeabi_dmul>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	f7f8 fd4a 	bl	80009a8 <__aeabi_dcmpeq>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f43f aebc 	beq.w	8007c92 <_dtoa_r+0x472>
 8007f1a:	e6f1      	b.n	8007d00 <_dtoa_r+0x4e0>
 8007f1c:	0800c748 	.word	0x0800c748
 8007f20:	3fe00000 	.word	0x3fe00000
 8007f24:	3ff00000 	.word	0x3ff00000
 8007f28:	40240000 	.word	0x40240000
 8007f2c:	40140000 	.word	0x40140000
 8007f30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	f000 80db 	beq.w	80080ee <_dtoa_r+0x8ce>
 8007f38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f3a:	2a01      	cmp	r2, #1
 8007f3c:	f300 80bf 	bgt.w	80080be <_dtoa_r+0x89e>
 8007f40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	f000 80b7 	beq.w	80080b6 <_dtoa_r+0x896>
 8007f48:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f4c:	4646      	mov	r6, r8
 8007f4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f52:	2101      	movs	r1, #1
 8007f54:	441a      	add	r2, r3
 8007f56:	4658      	mov	r0, fp
 8007f58:	4498      	add	r8, r3
 8007f5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f5c:	f001 f966 	bl	800922c <__i2b>
 8007f60:	4605      	mov	r5, r0
 8007f62:	b15e      	cbz	r6, 8007f7c <_dtoa_r+0x75c>
 8007f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dd08      	ble.n	8007f7c <_dtoa_r+0x75c>
 8007f6a:	42b3      	cmp	r3, r6
 8007f6c:	bfa8      	it	ge
 8007f6e:	4633      	movge	r3, r6
 8007f70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f72:	eba8 0803 	sub.w	r8, r8, r3
 8007f76:	1af6      	subs	r6, r6, r3
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f7e:	b1f3      	cbz	r3, 8007fbe <_dtoa_r+0x79e>
 8007f80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 80b7 	beq.w	80080f6 <_dtoa_r+0x8d6>
 8007f88:	b18c      	cbz	r4, 8007fae <_dtoa_r+0x78e>
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	4658      	mov	r0, fp
 8007f90:	f001 fa0a 	bl	80093a8 <__pow5mult>
 8007f94:	464a      	mov	r2, r9
 8007f96:	4601      	mov	r1, r0
 8007f98:	4605      	mov	r5, r0
 8007f9a:	4658      	mov	r0, fp
 8007f9c:	f001 f95c 	bl	8009258 <__multiply>
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	9004      	str	r0, [sp, #16]
 8007fa4:	4658      	mov	r0, fp
 8007fa6:	f001 f843 	bl	8009030 <_Bfree>
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	4699      	mov	r9, r3
 8007fae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fb0:	1b1a      	subs	r2, r3, r4
 8007fb2:	d004      	beq.n	8007fbe <_dtoa_r+0x79e>
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	4658      	mov	r0, fp
 8007fb8:	f001 f9f6 	bl	80093a8 <__pow5mult>
 8007fbc:	4681      	mov	r9, r0
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	4658      	mov	r0, fp
 8007fc2:	f001 f933 	bl	800922c <__i2b>
 8007fc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fc8:	4604      	mov	r4, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 81c9 	beq.w	8008362 <_dtoa_r+0xb42>
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f001 f9e7 	bl	80093a8 <__pow5mult>
 8007fda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fdc:	4604      	mov	r4, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	f300 808f 	bgt.w	8008102 <_dtoa_r+0x8e2>
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f040 8087 	bne.w	80080fa <_dtoa_r+0x8da>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 8083 	bne.w	80080fe <_dtoa_r+0x8de>
 8007ff8:	9b03      	ldr	r3, [sp, #12]
 8007ffa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ffe:	0d1b      	lsrs	r3, r3, #20
 8008000:	051b      	lsls	r3, r3, #20
 8008002:	b12b      	cbz	r3, 8008010 <_dtoa_r+0x7f0>
 8008004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008006:	f108 0801 	add.w	r8, r8, #1
 800800a:	3301      	adds	r3, #1
 800800c:	9309      	str	r3, [sp, #36]	@ 0x24
 800800e:	2301      	movs	r3, #1
 8008010:	930a      	str	r3, [sp, #40]	@ 0x28
 8008012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 81aa 	beq.w	800836e <_dtoa_r+0xb4e>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008020:	6918      	ldr	r0, [r3, #16]
 8008022:	f001 f8b7 	bl	8009194 <__hi0bits>
 8008026:	f1c0 0020 	rsb	r0, r0, #32
 800802a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802c:	4418      	add	r0, r3
 800802e:	f010 001f 	ands.w	r0, r0, #31
 8008032:	d071      	beq.n	8008118 <_dtoa_r+0x8f8>
 8008034:	f1c0 0320 	rsb	r3, r0, #32
 8008038:	2b04      	cmp	r3, #4
 800803a:	dd65      	ble.n	8008108 <_dtoa_r+0x8e8>
 800803c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803e:	f1c0 001c 	rsb	r0, r0, #28
 8008042:	4403      	add	r3, r0
 8008044:	4480      	add	r8, r0
 8008046:	4406      	add	r6, r0
 8008048:	9309      	str	r3, [sp, #36]	@ 0x24
 800804a:	f1b8 0f00 	cmp.w	r8, #0
 800804e:	dd05      	ble.n	800805c <_dtoa_r+0x83c>
 8008050:	4649      	mov	r1, r9
 8008052:	4642      	mov	r2, r8
 8008054:	4658      	mov	r0, fp
 8008056:	f001 fa01 	bl	800945c <__lshift>
 800805a:	4681      	mov	r9, r0
 800805c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd05      	ble.n	800806e <_dtoa_r+0x84e>
 8008062:	4621      	mov	r1, r4
 8008064:	461a      	mov	r2, r3
 8008066:	4658      	mov	r0, fp
 8008068:	f001 f9f8 	bl	800945c <__lshift>
 800806c:	4604      	mov	r4, r0
 800806e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d053      	beq.n	800811c <_dtoa_r+0x8fc>
 8008074:	4621      	mov	r1, r4
 8008076:	4648      	mov	r0, r9
 8008078:	f001 fa5c 	bl	8009534 <__mcmp>
 800807c:	2800      	cmp	r0, #0
 800807e:	da4d      	bge.n	800811c <_dtoa_r+0x8fc>
 8008080:	1e7b      	subs	r3, r7, #1
 8008082:	4649      	mov	r1, r9
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	220a      	movs	r2, #10
 8008088:	2300      	movs	r3, #0
 800808a:	4658      	mov	r0, fp
 800808c:	f000 fff2 	bl	8009074 <__multadd>
 8008090:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008092:	4681      	mov	r9, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 816c 	beq.w	8008372 <_dtoa_r+0xb52>
 800809a:	2300      	movs	r3, #0
 800809c:	4629      	mov	r1, r5
 800809e:	220a      	movs	r2, #10
 80080a0:	4658      	mov	r0, fp
 80080a2:	f000 ffe7 	bl	8009074 <__multadd>
 80080a6:	9b08      	ldr	r3, [sp, #32]
 80080a8:	4605      	mov	r5, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dc61      	bgt.n	8008172 <_dtoa_r+0x952>
 80080ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	dc3b      	bgt.n	800812c <_dtoa_r+0x90c>
 80080b4:	e05d      	b.n	8008172 <_dtoa_r+0x952>
 80080b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80080b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80080bc:	e746      	b.n	8007f4c <_dtoa_r+0x72c>
 80080be:	9b07      	ldr	r3, [sp, #28]
 80080c0:	1e5c      	subs	r4, r3, #1
 80080c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080c4:	42a3      	cmp	r3, r4
 80080c6:	bfbf      	itttt	lt
 80080c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80080ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80080cc:	1ae3      	sublt	r3, r4, r3
 80080ce:	18d2      	addlt	r2, r2, r3
 80080d0:	bfa8      	it	ge
 80080d2:	1b1c      	subge	r4, r3, r4
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	bfbe      	ittt	lt
 80080d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80080da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80080dc:	2400      	movlt	r4, #0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bfb5      	itete	lt
 80080e2:	eba8 0603 	sublt.w	r6, r8, r3
 80080e6:	4646      	movge	r6, r8
 80080e8:	2300      	movlt	r3, #0
 80080ea:	9b07      	ldrge	r3, [sp, #28]
 80080ec:	e730      	b.n	8007f50 <_dtoa_r+0x730>
 80080ee:	4646      	mov	r6, r8
 80080f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80080f4:	e735      	b.n	8007f62 <_dtoa_r+0x742>
 80080f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080f8:	e75c      	b.n	8007fb4 <_dtoa_r+0x794>
 80080fa:	2300      	movs	r3, #0
 80080fc:	e788      	b.n	8008010 <_dtoa_r+0x7f0>
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	e786      	b.n	8008010 <_dtoa_r+0x7f0>
 8008102:	2300      	movs	r3, #0
 8008104:	930a      	str	r3, [sp, #40]	@ 0x28
 8008106:	e788      	b.n	800801a <_dtoa_r+0x7fa>
 8008108:	d09f      	beq.n	800804a <_dtoa_r+0x82a>
 800810a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800810c:	331c      	adds	r3, #28
 800810e:	441a      	add	r2, r3
 8008110:	4498      	add	r8, r3
 8008112:	441e      	add	r6, r3
 8008114:	9209      	str	r2, [sp, #36]	@ 0x24
 8008116:	e798      	b.n	800804a <_dtoa_r+0x82a>
 8008118:	4603      	mov	r3, r0
 800811a:	e7f6      	b.n	800810a <_dtoa_r+0x8ea>
 800811c:	9b07      	ldr	r3, [sp, #28]
 800811e:	9704      	str	r7, [sp, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	dc20      	bgt.n	8008166 <_dtoa_r+0x946>
 8008124:	9308      	str	r3, [sp, #32]
 8008126:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008128:	2b02      	cmp	r3, #2
 800812a:	dd1e      	ble.n	800816a <_dtoa_r+0x94a>
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f47f aebc 	bne.w	8007eac <_dtoa_r+0x68c>
 8008134:	4621      	mov	r1, r4
 8008136:	2205      	movs	r2, #5
 8008138:	4658      	mov	r0, fp
 800813a:	f000 ff9b 	bl	8009074 <__multadd>
 800813e:	4601      	mov	r1, r0
 8008140:	4604      	mov	r4, r0
 8008142:	4648      	mov	r0, r9
 8008144:	f001 f9f6 	bl	8009534 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	f77f aeaf 	ble.w	8007eac <_dtoa_r+0x68c>
 800814e:	2331      	movs	r3, #49	@ 0x31
 8008150:	4656      	mov	r6, sl
 8008152:	f806 3b01 	strb.w	r3, [r6], #1
 8008156:	9b04      	ldr	r3, [sp, #16]
 8008158:	3301      	adds	r3, #1
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	e6aa      	b.n	8007eb4 <_dtoa_r+0x694>
 800815e:	9c07      	ldr	r4, [sp, #28]
 8008160:	9704      	str	r7, [sp, #16]
 8008162:	4625      	mov	r5, r4
 8008164:	e7f3      	b.n	800814e <_dtoa_r+0x92e>
 8008166:	9b07      	ldr	r3, [sp, #28]
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8104 	beq.w	800837a <_dtoa_r+0xb5a>
 8008172:	2e00      	cmp	r6, #0
 8008174:	dd05      	ble.n	8008182 <_dtoa_r+0x962>
 8008176:	4629      	mov	r1, r5
 8008178:	4632      	mov	r2, r6
 800817a:	4658      	mov	r0, fp
 800817c:	f001 f96e 	bl	800945c <__lshift>
 8008180:	4605      	mov	r5, r0
 8008182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008184:	2b00      	cmp	r3, #0
 8008186:	d05a      	beq.n	800823e <_dtoa_r+0xa1e>
 8008188:	4658      	mov	r0, fp
 800818a:	6869      	ldr	r1, [r5, #4]
 800818c:	f000 ff10 	bl	8008fb0 <_Balloc>
 8008190:	4606      	mov	r6, r0
 8008192:	b928      	cbnz	r0, 80081a0 <_dtoa_r+0x980>
 8008194:	4602      	mov	r2, r0
 8008196:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800819a:	4b83      	ldr	r3, [pc, #524]	@ (80083a8 <_dtoa_r+0xb88>)
 800819c:	f7ff bb54 	b.w	8007848 <_dtoa_r+0x28>
 80081a0:	692a      	ldr	r2, [r5, #16]
 80081a2:	f105 010c 	add.w	r1, r5, #12
 80081a6:	3202      	adds	r2, #2
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	300c      	adds	r0, #12
 80081ac:	f7ff fa97 	bl	80076de <memcpy>
 80081b0:	2201      	movs	r2, #1
 80081b2:	4631      	mov	r1, r6
 80081b4:	4658      	mov	r0, fp
 80081b6:	f001 f951 	bl	800945c <__lshift>
 80081ba:	462f      	mov	r7, r5
 80081bc:	4605      	mov	r5, r0
 80081be:	f10a 0301 	add.w	r3, sl, #1
 80081c2:	9307      	str	r3, [sp, #28]
 80081c4:	9b08      	ldr	r3, [sp, #32]
 80081c6:	4453      	add	r3, sl
 80081c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081ca:	9b02      	ldr	r3, [sp, #8]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80081d2:	9b07      	ldr	r3, [sp, #28]
 80081d4:	4621      	mov	r1, r4
 80081d6:	3b01      	subs	r3, #1
 80081d8:	4648      	mov	r0, r9
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	f7ff fa98 	bl	8007710 <quorem>
 80081e0:	4639      	mov	r1, r7
 80081e2:	9008      	str	r0, [sp, #32]
 80081e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80081e8:	4648      	mov	r0, r9
 80081ea:	f001 f9a3 	bl	8009534 <__mcmp>
 80081ee:	462a      	mov	r2, r5
 80081f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80081f2:	4621      	mov	r1, r4
 80081f4:	4658      	mov	r0, fp
 80081f6:	f001 f9b9 	bl	800956c <__mdiff>
 80081fa:	68c2      	ldr	r2, [r0, #12]
 80081fc:	4606      	mov	r6, r0
 80081fe:	bb02      	cbnz	r2, 8008242 <_dtoa_r+0xa22>
 8008200:	4601      	mov	r1, r0
 8008202:	4648      	mov	r0, r9
 8008204:	f001 f996 	bl	8009534 <__mcmp>
 8008208:	4602      	mov	r2, r0
 800820a:	4631      	mov	r1, r6
 800820c:	4658      	mov	r0, fp
 800820e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008210:	f000 ff0e 	bl	8009030 <_Bfree>
 8008214:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008216:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008218:	9e07      	ldr	r6, [sp, #28]
 800821a:	ea43 0102 	orr.w	r1, r3, r2
 800821e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008220:	4319      	orrs	r1, r3
 8008222:	d110      	bne.n	8008246 <_dtoa_r+0xa26>
 8008224:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008228:	d029      	beq.n	800827e <_dtoa_r+0xa5e>
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	2b00      	cmp	r3, #0
 800822e:	dd02      	ble.n	8008236 <_dtoa_r+0xa16>
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	f883 8000 	strb.w	r8, [r3]
 800823c:	e63b      	b.n	8007eb6 <_dtoa_r+0x696>
 800823e:	4628      	mov	r0, r5
 8008240:	e7bb      	b.n	80081ba <_dtoa_r+0x99a>
 8008242:	2201      	movs	r2, #1
 8008244:	e7e1      	b.n	800820a <_dtoa_r+0x9ea>
 8008246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	db04      	blt.n	8008256 <_dtoa_r+0xa36>
 800824c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800824e:	430b      	orrs	r3, r1
 8008250:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008252:	430b      	orrs	r3, r1
 8008254:	d120      	bne.n	8008298 <_dtoa_r+0xa78>
 8008256:	2a00      	cmp	r2, #0
 8008258:	dded      	ble.n	8008236 <_dtoa_r+0xa16>
 800825a:	4649      	mov	r1, r9
 800825c:	2201      	movs	r2, #1
 800825e:	4658      	mov	r0, fp
 8008260:	f001 f8fc 	bl	800945c <__lshift>
 8008264:	4621      	mov	r1, r4
 8008266:	4681      	mov	r9, r0
 8008268:	f001 f964 	bl	8009534 <__mcmp>
 800826c:	2800      	cmp	r0, #0
 800826e:	dc03      	bgt.n	8008278 <_dtoa_r+0xa58>
 8008270:	d1e1      	bne.n	8008236 <_dtoa_r+0xa16>
 8008272:	f018 0f01 	tst.w	r8, #1
 8008276:	d0de      	beq.n	8008236 <_dtoa_r+0xa16>
 8008278:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800827c:	d1d8      	bne.n	8008230 <_dtoa_r+0xa10>
 800827e:	2339      	movs	r3, #57	@ 0x39
 8008280:	9a02      	ldr	r2, [sp, #8]
 8008282:	7013      	strb	r3, [r2, #0]
 8008284:	4633      	mov	r3, r6
 8008286:	461e      	mov	r6, r3
 8008288:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800828c:	3b01      	subs	r3, #1
 800828e:	2a39      	cmp	r2, #57	@ 0x39
 8008290:	d052      	beq.n	8008338 <_dtoa_r+0xb18>
 8008292:	3201      	adds	r2, #1
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	e60e      	b.n	8007eb6 <_dtoa_r+0x696>
 8008298:	2a00      	cmp	r2, #0
 800829a:	dd07      	ble.n	80082ac <_dtoa_r+0xa8c>
 800829c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082a0:	d0ed      	beq.n	800827e <_dtoa_r+0xa5e>
 80082a2:	9a02      	ldr	r2, [sp, #8]
 80082a4:	f108 0301 	add.w	r3, r8, #1
 80082a8:	7013      	strb	r3, [r2, #0]
 80082aa:	e604      	b.n	8007eb6 <_dtoa_r+0x696>
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	9a07      	ldr	r2, [sp, #28]
 80082b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80082b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d028      	beq.n	800830c <_dtoa_r+0xaec>
 80082ba:	4649      	mov	r1, r9
 80082bc:	2300      	movs	r3, #0
 80082be:	220a      	movs	r2, #10
 80082c0:	4658      	mov	r0, fp
 80082c2:	f000 fed7 	bl	8009074 <__multadd>
 80082c6:	42af      	cmp	r7, r5
 80082c8:	4681      	mov	r9, r0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	f04f 020a 	mov.w	r2, #10
 80082d2:	4639      	mov	r1, r7
 80082d4:	4658      	mov	r0, fp
 80082d6:	d107      	bne.n	80082e8 <_dtoa_r+0xac8>
 80082d8:	f000 fecc 	bl	8009074 <__multadd>
 80082dc:	4607      	mov	r7, r0
 80082de:	4605      	mov	r5, r0
 80082e0:	9b07      	ldr	r3, [sp, #28]
 80082e2:	3301      	adds	r3, #1
 80082e4:	9307      	str	r3, [sp, #28]
 80082e6:	e774      	b.n	80081d2 <_dtoa_r+0x9b2>
 80082e8:	f000 fec4 	bl	8009074 <__multadd>
 80082ec:	4629      	mov	r1, r5
 80082ee:	4607      	mov	r7, r0
 80082f0:	2300      	movs	r3, #0
 80082f2:	220a      	movs	r2, #10
 80082f4:	4658      	mov	r0, fp
 80082f6:	f000 febd 	bl	8009074 <__multadd>
 80082fa:	4605      	mov	r5, r0
 80082fc:	e7f0      	b.n	80082e0 <_dtoa_r+0xac0>
 80082fe:	9b08      	ldr	r3, [sp, #32]
 8008300:	2700      	movs	r7, #0
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfcc      	ite	gt
 8008306:	461e      	movgt	r6, r3
 8008308:	2601      	movle	r6, #1
 800830a:	4456      	add	r6, sl
 800830c:	4649      	mov	r1, r9
 800830e:	2201      	movs	r2, #1
 8008310:	4658      	mov	r0, fp
 8008312:	f001 f8a3 	bl	800945c <__lshift>
 8008316:	4621      	mov	r1, r4
 8008318:	4681      	mov	r9, r0
 800831a:	f001 f90b 	bl	8009534 <__mcmp>
 800831e:	2800      	cmp	r0, #0
 8008320:	dcb0      	bgt.n	8008284 <_dtoa_r+0xa64>
 8008322:	d102      	bne.n	800832a <_dtoa_r+0xb0a>
 8008324:	f018 0f01 	tst.w	r8, #1
 8008328:	d1ac      	bne.n	8008284 <_dtoa_r+0xa64>
 800832a:	4633      	mov	r3, r6
 800832c:	461e      	mov	r6, r3
 800832e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008332:	2a30      	cmp	r2, #48	@ 0x30
 8008334:	d0fa      	beq.n	800832c <_dtoa_r+0xb0c>
 8008336:	e5be      	b.n	8007eb6 <_dtoa_r+0x696>
 8008338:	459a      	cmp	sl, r3
 800833a:	d1a4      	bne.n	8008286 <_dtoa_r+0xa66>
 800833c:	9b04      	ldr	r3, [sp, #16]
 800833e:	3301      	adds	r3, #1
 8008340:	9304      	str	r3, [sp, #16]
 8008342:	2331      	movs	r3, #49	@ 0x31
 8008344:	f88a 3000 	strb.w	r3, [sl]
 8008348:	e5b5      	b.n	8007eb6 <_dtoa_r+0x696>
 800834a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800834c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80083ac <_dtoa_r+0xb8c>
 8008350:	b11b      	cbz	r3, 800835a <_dtoa_r+0xb3a>
 8008352:	f10a 0308 	add.w	r3, sl, #8
 8008356:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	4650      	mov	r0, sl
 800835c:	b017      	add	sp, #92	@ 0x5c
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008364:	2b01      	cmp	r3, #1
 8008366:	f77f ae3d 	ble.w	8007fe4 <_dtoa_r+0x7c4>
 800836a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800836c:	930a      	str	r3, [sp, #40]	@ 0x28
 800836e:	2001      	movs	r0, #1
 8008370:	e65b      	b.n	800802a <_dtoa_r+0x80a>
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f77f aed6 	ble.w	8008126 <_dtoa_r+0x906>
 800837a:	4656      	mov	r6, sl
 800837c:	4621      	mov	r1, r4
 800837e:	4648      	mov	r0, r9
 8008380:	f7ff f9c6 	bl	8007710 <quorem>
 8008384:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008388:	9b08      	ldr	r3, [sp, #32]
 800838a:	f806 8b01 	strb.w	r8, [r6], #1
 800838e:	eba6 020a 	sub.w	r2, r6, sl
 8008392:	4293      	cmp	r3, r2
 8008394:	ddb3      	ble.n	80082fe <_dtoa_r+0xade>
 8008396:	4649      	mov	r1, r9
 8008398:	2300      	movs	r3, #0
 800839a:	220a      	movs	r2, #10
 800839c:	4658      	mov	r0, fp
 800839e:	f000 fe69 	bl	8009074 <__multadd>
 80083a2:	4681      	mov	r9, r0
 80083a4:	e7ea      	b.n	800837c <_dtoa_r+0xb5c>
 80083a6:	bf00      	nop
 80083a8:	0800c635 	.word	0x0800c635
 80083ac:	0800c5b9 	.word	0x0800c5b9

080083b0 <rshift>:
 80083b0:	6903      	ldr	r3, [r0, #16]
 80083b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80083ba:	f100 0414 	add.w	r4, r0, #20
 80083be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80083c2:	dd46      	ble.n	8008452 <rshift+0xa2>
 80083c4:	f011 011f 	ands.w	r1, r1, #31
 80083c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80083cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80083d0:	d10c      	bne.n	80083ec <rshift+0x3c>
 80083d2:	4629      	mov	r1, r5
 80083d4:	f100 0710 	add.w	r7, r0, #16
 80083d8:	42b1      	cmp	r1, r6
 80083da:	d335      	bcc.n	8008448 <rshift+0x98>
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	1eea      	subs	r2, r5, #3
 80083e2:	4296      	cmp	r6, r2
 80083e4:	bf38      	it	cc
 80083e6:	2300      	movcc	r3, #0
 80083e8:	4423      	add	r3, r4
 80083ea:	e015      	b.n	8008418 <rshift+0x68>
 80083ec:	46a1      	mov	r9, r4
 80083ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083f2:	f1c1 0820 	rsb	r8, r1, #32
 80083f6:	40cf      	lsrs	r7, r1
 80083f8:	f105 0e04 	add.w	lr, r5, #4
 80083fc:	4576      	cmp	r6, lr
 80083fe:	46f4      	mov	ip, lr
 8008400:	d816      	bhi.n	8008430 <rshift+0x80>
 8008402:	1a9a      	subs	r2, r3, r2
 8008404:	0092      	lsls	r2, r2, #2
 8008406:	3a04      	subs	r2, #4
 8008408:	3501      	adds	r5, #1
 800840a:	42ae      	cmp	r6, r5
 800840c:	bf38      	it	cc
 800840e:	2200      	movcc	r2, #0
 8008410:	18a3      	adds	r3, r4, r2
 8008412:	50a7      	str	r7, [r4, r2]
 8008414:	b107      	cbz	r7, 8008418 <rshift+0x68>
 8008416:	3304      	adds	r3, #4
 8008418:	42a3      	cmp	r3, r4
 800841a:	eba3 0204 	sub.w	r2, r3, r4
 800841e:	bf08      	it	eq
 8008420:	2300      	moveq	r3, #0
 8008422:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008426:	6102      	str	r2, [r0, #16]
 8008428:	bf08      	it	eq
 800842a:	6143      	streq	r3, [r0, #20]
 800842c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008430:	f8dc c000 	ldr.w	ip, [ip]
 8008434:	fa0c fc08 	lsl.w	ip, ip, r8
 8008438:	ea4c 0707 	orr.w	r7, ip, r7
 800843c:	f849 7b04 	str.w	r7, [r9], #4
 8008440:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008444:	40cf      	lsrs	r7, r1
 8008446:	e7d9      	b.n	80083fc <rshift+0x4c>
 8008448:	f851 cb04 	ldr.w	ip, [r1], #4
 800844c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008450:	e7c2      	b.n	80083d8 <rshift+0x28>
 8008452:	4623      	mov	r3, r4
 8008454:	e7e0      	b.n	8008418 <rshift+0x68>

08008456 <__hexdig_fun>:
 8008456:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800845a:	2b09      	cmp	r3, #9
 800845c:	d802      	bhi.n	8008464 <__hexdig_fun+0xe>
 800845e:	3820      	subs	r0, #32
 8008460:	b2c0      	uxtb	r0, r0
 8008462:	4770      	bx	lr
 8008464:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008468:	2b05      	cmp	r3, #5
 800846a:	d801      	bhi.n	8008470 <__hexdig_fun+0x1a>
 800846c:	3847      	subs	r0, #71	@ 0x47
 800846e:	e7f7      	b.n	8008460 <__hexdig_fun+0xa>
 8008470:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008474:	2b05      	cmp	r3, #5
 8008476:	d801      	bhi.n	800847c <__hexdig_fun+0x26>
 8008478:	3827      	subs	r0, #39	@ 0x27
 800847a:	e7f1      	b.n	8008460 <__hexdig_fun+0xa>
 800847c:	2000      	movs	r0, #0
 800847e:	4770      	bx	lr

08008480 <__gethex>:
 8008480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008484:	468a      	mov	sl, r1
 8008486:	4690      	mov	r8, r2
 8008488:	b085      	sub	sp, #20
 800848a:	9302      	str	r3, [sp, #8]
 800848c:	680b      	ldr	r3, [r1, #0]
 800848e:	9001      	str	r0, [sp, #4]
 8008490:	1c9c      	adds	r4, r3, #2
 8008492:	46a1      	mov	r9, r4
 8008494:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008498:	2830      	cmp	r0, #48	@ 0x30
 800849a:	d0fa      	beq.n	8008492 <__gethex+0x12>
 800849c:	eba9 0303 	sub.w	r3, r9, r3
 80084a0:	f1a3 0b02 	sub.w	fp, r3, #2
 80084a4:	f7ff ffd7 	bl	8008456 <__hexdig_fun>
 80084a8:	4605      	mov	r5, r0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d168      	bne.n	8008580 <__gethex+0x100>
 80084ae:	2201      	movs	r2, #1
 80084b0:	4648      	mov	r0, r9
 80084b2:	499f      	ldr	r1, [pc, #636]	@ (8008730 <__gethex+0x2b0>)
 80084b4:	f7ff f8a0 	bl	80075f8 <strncmp>
 80084b8:	4607      	mov	r7, r0
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d167      	bne.n	800858e <__gethex+0x10e>
 80084be:	f899 0001 	ldrb.w	r0, [r9, #1]
 80084c2:	4626      	mov	r6, r4
 80084c4:	f7ff ffc7 	bl	8008456 <__hexdig_fun>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d062      	beq.n	8008592 <__gethex+0x112>
 80084cc:	4623      	mov	r3, r4
 80084ce:	7818      	ldrb	r0, [r3, #0]
 80084d0:	4699      	mov	r9, r3
 80084d2:	2830      	cmp	r0, #48	@ 0x30
 80084d4:	f103 0301 	add.w	r3, r3, #1
 80084d8:	d0f9      	beq.n	80084ce <__gethex+0x4e>
 80084da:	f7ff ffbc 	bl	8008456 <__hexdig_fun>
 80084de:	fab0 f580 	clz	r5, r0
 80084e2:	f04f 0b01 	mov.w	fp, #1
 80084e6:	096d      	lsrs	r5, r5, #5
 80084e8:	464a      	mov	r2, r9
 80084ea:	4616      	mov	r6, r2
 80084ec:	7830      	ldrb	r0, [r6, #0]
 80084ee:	3201      	adds	r2, #1
 80084f0:	f7ff ffb1 	bl	8008456 <__hexdig_fun>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d1f8      	bne.n	80084ea <__gethex+0x6a>
 80084f8:	2201      	movs	r2, #1
 80084fa:	4630      	mov	r0, r6
 80084fc:	498c      	ldr	r1, [pc, #560]	@ (8008730 <__gethex+0x2b0>)
 80084fe:	f7ff f87b 	bl	80075f8 <strncmp>
 8008502:	2800      	cmp	r0, #0
 8008504:	d13f      	bne.n	8008586 <__gethex+0x106>
 8008506:	b944      	cbnz	r4, 800851a <__gethex+0x9a>
 8008508:	1c74      	adds	r4, r6, #1
 800850a:	4622      	mov	r2, r4
 800850c:	4616      	mov	r6, r2
 800850e:	7830      	ldrb	r0, [r6, #0]
 8008510:	3201      	adds	r2, #1
 8008512:	f7ff ffa0 	bl	8008456 <__hexdig_fun>
 8008516:	2800      	cmp	r0, #0
 8008518:	d1f8      	bne.n	800850c <__gethex+0x8c>
 800851a:	1ba4      	subs	r4, r4, r6
 800851c:	00a7      	lsls	r7, r4, #2
 800851e:	7833      	ldrb	r3, [r6, #0]
 8008520:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008524:	2b50      	cmp	r3, #80	@ 0x50
 8008526:	d13e      	bne.n	80085a6 <__gethex+0x126>
 8008528:	7873      	ldrb	r3, [r6, #1]
 800852a:	2b2b      	cmp	r3, #43	@ 0x2b
 800852c:	d033      	beq.n	8008596 <__gethex+0x116>
 800852e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008530:	d034      	beq.n	800859c <__gethex+0x11c>
 8008532:	2400      	movs	r4, #0
 8008534:	1c71      	adds	r1, r6, #1
 8008536:	7808      	ldrb	r0, [r1, #0]
 8008538:	f7ff ff8d 	bl	8008456 <__hexdig_fun>
 800853c:	1e43      	subs	r3, r0, #1
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b18      	cmp	r3, #24
 8008542:	d830      	bhi.n	80085a6 <__gethex+0x126>
 8008544:	f1a0 0210 	sub.w	r2, r0, #16
 8008548:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800854c:	f7ff ff83 	bl	8008456 <__hexdig_fun>
 8008550:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008554:	fa5f fc8c 	uxtb.w	ip, ip
 8008558:	f1bc 0f18 	cmp.w	ip, #24
 800855c:	f04f 030a 	mov.w	r3, #10
 8008560:	d91e      	bls.n	80085a0 <__gethex+0x120>
 8008562:	b104      	cbz	r4, 8008566 <__gethex+0xe6>
 8008564:	4252      	negs	r2, r2
 8008566:	4417      	add	r7, r2
 8008568:	f8ca 1000 	str.w	r1, [sl]
 800856c:	b1ed      	cbz	r5, 80085aa <__gethex+0x12a>
 800856e:	f1bb 0f00 	cmp.w	fp, #0
 8008572:	bf0c      	ite	eq
 8008574:	2506      	moveq	r5, #6
 8008576:	2500      	movne	r5, #0
 8008578:	4628      	mov	r0, r5
 800857a:	b005      	add	sp, #20
 800857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008580:	2500      	movs	r5, #0
 8008582:	462c      	mov	r4, r5
 8008584:	e7b0      	b.n	80084e8 <__gethex+0x68>
 8008586:	2c00      	cmp	r4, #0
 8008588:	d1c7      	bne.n	800851a <__gethex+0x9a>
 800858a:	4627      	mov	r7, r4
 800858c:	e7c7      	b.n	800851e <__gethex+0x9e>
 800858e:	464e      	mov	r6, r9
 8008590:	462f      	mov	r7, r5
 8008592:	2501      	movs	r5, #1
 8008594:	e7c3      	b.n	800851e <__gethex+0x9e>
 8008596:	2400      	movs	r4, #0
 8008598:	1cb1      	adds	r1, r6, #2
 800859a:	e7cc      	b.n	8008536 <__gethex+0xb6>
 800859c:	2401      	movs	r4, #1
 800859e:	e7fb      	b.n	8008598 <__gethex+0x118>
 80085a0:	fb03 0002 	mla	r0, r3, r2, r0
 80085a4:	e7ce      	b.n	8008544 <__gethex+0xc4>
 80085a6:	4631      	mov	r1, r6
 80085a8:	e7de      	b.n	8008568 <__gethex+0xe8>
 80085aa:	4629      	mov	r1, r5
 80085ac:	eba6 0309 	sub.w	r3, r6, r9
 80085b0:	3b01      	subs	r3, #1
 80085b2:	2b07      	cmp	r3, #7
 80085b4:	dc0a      	bgt.n	80085cc <__gethex+0x14c>
 80085b6:	9801      	ldr	r0, [sp, #4]
 80085b8:	f000 fcfa 	bl	8008fb0 <_Balloc>
 80085bc:	4604      	mov	r4, r0
 80085be:	b940      	cbnz	r0, 80085d2 <__gethex+0x152>
 80085c0:	4602      	mov	r2, r0
 80085c2:	21e4      	movs	r1, #228	@ 0xe4
 80085c4:	4b5b      	ldr	r3, [pc, #364]	@ (8008734 <__gethex+0x2b4>)
 80085c6:	485c      	ldr	r0, [pc, #368]	@ (8008738 <__gethex+0x2b8>)
 80085c8:	f001 fa6c 	bl	8009aa4 <__assert_func>
 80085cc:	3101      	adds	r1, #1
 80085ce:	105b      	asrs	r3, r3, #1
 80085d0:	e7ef      	b.n	80085b2 <__gethex+0x132>
 80085d2:	2300      	movs	r3, #0
 80085d4:	f100 0a14 	add.w	sl, r0, #20
 80085d8:	4655      	mov	r5, sl
 80085da:	469b      	mov	fp, r3
 80085dc:	45b1      	cmp	r9, r6
 80085de:	d337      	bcc.n	8008650 <__gethex+0x1d0>
 80085e0:	f845 bb04 	str.w	fp, [r5], #4
 80085e4:	eba5 050a 	sub.w	r5, r5, sl
 80085e8:	10ad      	asrs	r5, r5, #2
 80085ea:	6125      	str	r5, [r4, #16]
 80085ec:	4658      	mov	r0, fp
 80085ee:	f000 fdd1 	bl	8009194 <__hi0bits>
 80085f2:	016d      	lsls	r5, r5, #5
 80085f4:	f8d8 6000 	ldr.w	r6, [r8]
 80085f8:	1a2d      	subs	r5, r5, r0
 80085fa:	42b5      	cmp	r5, r6
 80085fc:	dd54      	ble.n	80086a8 <__gethex+0x228>
 80085fe:	1bad      	subs	r5, r5, r6
 8008600:	4629      	mov	r1, r5
 8008602:	4620      	mov	r0, r4
 8008604:	f001 f959 	bl	80098ba <__any_on>
 8008608:	4681      	mov	r9, r0
 800860a:	b178      	cbz	r0, 800862c <__gethex+0x1ac>
 800860c:	f04f 0901 	mov.w	r9, #1
 8008610:	1e6b      	subs	r3, r5, #1
 8008612:	1159      	asrs	r1, r3, #5
 8008614:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008618:	f003 021f 	and.w	r2, r3, #31
 800861c:	fa09 f202 	lsl.w	r2, r9, r2
 8008620:	420a      	tst	r2, r1
 8008622:	d003      	beq.n	800862c <__gethex+0x1ac>
 8008624:	454b      	cmp	r3, r9
 8008626:	dc36      	bgt.n	8008696 <__gethex+0x216>
 8008628:	f04f 0902 	mov.w	r9, #2
 800862c:	4629      	mov	r1, r5
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff febe 	bl	80083b0 <rshift>
 8008634:	442f      	add	r7, r5
 8008636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800863a:	42bb      	cmp	r3, r7
 800863c:	da42      	bge.n	80086c4 <__gethex+0x244>
 800863e:	4621      	mov	r1, r4
 8008640:	9801      	ldr	r0, [sp, #4]
 8008642:	f000 fcf5 	bl	8009030 <_Bfree>
 8008646:	2300      	movs	r3, #0
 8008648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800864a:	25a3      	movs	r5, #163	@ 0xa3
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	e793      	b.n	8008578 <__gethex+0xf8>
 8008650:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008654:	2a2e      	cmp	r2, #46	@ 0x2e
 8008656:	d012      	beq.n	800867e <__gethex+0x1fe>
 8008658:	2b20      	cmp	r3, #32
 800865a:	d104      	bne.n	8008666 <__gethex+0x1e6>
 800865c:	f845 bb04 	str.w	fp, [r5], #4
 8008660:	f04f 0b00 	mov.w	fp, #0
 8008664:	465b      	mov	r3, fp
 8008666:	7830      	ldrb	r0, [r6, #0]
 8008668:	9303      	str	r3, [sp, #12]
 800866a:	f7ff fef4 	bl	8008456 <__hexdig_fun>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	f000 000f 	and.w	r0, r0, #15
 8008674:	4098      	lsls	r0, r3
 8008676:	ea4b 0b00 	orr.w	fp, fp, r0
 800867a:	3304      	adds	r3, #4
 800867c:	e7ae      	b.n	80085dc <__gethex+0x15c>
 800867e:	45b1      	cmp	r9, r6
 8008680:	d8ea      	bhi.n	8008658 <__gethex+0x1d8>
 8008682:	2201      	movs	r2, #1
 8008684:	4630      	mov	r0, r6
 8008686:	492a      	ldr	r1, [pc, #168]	@ (8008730 <__gethex+0x2b0>)
 8008688:	9303      	str	r3, [sp, #12]
 800868a:	f7fe ffb5 	bl	80075f8 <strncmp>
 800868e:	9b03      	ldr	r3, [sp, #12]
 8008690:	2800      	cmp	r0, #0
 8008692:	d1e1      	bne.n	8008658 <__gethex+0x1d8>
 8008694:	e7a2      	b.n	80085dc <__gethex+0x15c>
 8008696:	4620      	mov	r0, r4
 8008698:	1ea9      	subs	r1, r5, #2
 800869a:	f001 f90e 	bl	80098ba <__any_on>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d0c2      	beq.n	8008628 <__gethex+0x1a8>
 80086a2:	f04f 0903 	mov.w	r9, #3
 80086a6:	e7c1      	b.n	800862c <__gethex+0x1ac>
 80086a8:	da09      	bge.n	80086be <__gethex+0x23e>
 80086aa:	1b75      	subs	r5, r6, r5
 80086ac:	4621      	mov	r1, r4
 80086ae:	462a      	mov	r2, r5
 80086b0:	9801      	ldr	r0, [sp, #4]
 80086b2:	f000 fed3 	bl	800945c <__lshift>
 80086b6:	4604      	mov	r4, r0
 80086b8:	1b7f      	subs	r7, r7, r5
 80086ba:	f100 0a14 	add.w	sl, r0, #20
 80086be:	f04f 0900 	mov.w	r9, #0
 80086c2:	e7b8      	b.n	8008636 <__gethex+0x1b6>
 80086c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80086c8:	42bd      	cmp	r5, r7
 80086ca:	dd6f      	ble.n	80087ac <__gethex+0x32c>
 80086cc:	1bed      	subs	r5, r5, r7
 80086ce:	42ae      	cmp	r6, r5
 80086d0:	dc34      	bgt.n	800873c <__gethex+0x2bc>
 80086d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d022      	beq.n	8008720 <__gethex+0x2a0>
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d024      	beq.n	8008728 <__gethex+0x2a8>
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d115      	bne.n	800870e <__gethex+0x28e>
 80086e2:	42ae      	cmp	r6, r5
 80086e4:	d113      	bne.n	800870e <__gethex+0x28e>
 80086e6:	2e01      	cmp	r6, #1
 80086e8:	d10b      	bne.n	8008702 <__gethex+0x282>
 80086ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086ee:	9a02      	ldr	r2, [sp, #8]
 80086f0:	2562      	movs	r5, #98	@ 0x62
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	2301      	movs	r3, #1
 80086f6:	6123      	str	r3, [r4, #16]
 80086f8:	f8ca 3000 	str.w	r3, [sl]
 80086fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086fe:	601c      	str	r4, [r3, #0]
 8008700:	e73a      	b.n	8008578 <__gethex+0xf8>
 8008702:	4620      	mov	r0, r4
 8008704:	1e71      	subs	r1, r6, #1
 8008706:	f001 f8d8 	bl	80098ba <__any_on>
 800870a:	2800      	cmp	r0, #0
 800870c:	d1ed      	bne.n	80086ea <__gethex+0x26a>
 800870e:	4621      	mov	r1, r4
 8008710:	9801      	ldr	r0, [sp, #4]
 8008712:	f000 fc8d 	bl	8009030 <_Bfree>
 8008716:	2300      	movs	r3, #0
 8008718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800871a:	2550      	movs	r5, #80	@ 0x50
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	e72b      	b.n	8008578 <__gethex+0xf8>
 8008720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f3      	bne.n	800870e <__gethex+0x28e>
 8008726:	e7e0      	b.n	80086ea <__gethex+0x26a>
 8008728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1dd      	bne.n	80086ea <__gethex+0x26a>
 800872e:	e7ee      	b.n	800870e <__gethex+0x28e>
 8008730:	0800c45b 	.word	0x0800c45b
 8008734:	0800c635 	.word	0x0800c635
 8008738:	0800c646 	.word	0x0800c646
 800873c:	1e6f      	subs	r7, r5, #1
 800873e:	f1b9 0f00 	cmp.w	r9, #0
 8008742:	d130      	bne.n	80087a6 <__gethex+0x326>
 8008744:	b127      	cbz	r7, 8008750 <__gethex+0x2d0>
 8008746:	4639      	mov	r1, r7
 8008748:	4620      	mov	r0, r4
 800874a:	f001 f8b6 	bl	80098ba <__any_on>
 800874e:	4681      	mov	r9, r0
 8008750:	2301      	movs	r3, #1
 8008752:	4629      	mov	r1, r5
 8008754:	1b76      	subs	r6, r6, r5
 8008756:	2502      	movs	r5, #2
 8008758:	117a      	asrs	r2, r7, #5
 800875a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800875e:	f007 071f 	and.w	r7, r7, #31
 8008762:	40bb      	lsls	r3, r7
 8008764:	4213      	tst	r3, r2
 8008766:	4620      	mov	r0, r4
 8008768:	bf18      	it	ne
 800876a:	f049 0902 	orrne.w	r9, r9, #2
 800876e:	f7ff fe1f 	bl	80083b0 <rshift>
 8008772:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008776:	f1b9 0f00 	cmp.w	r9, #0
 800877a:	d047      	beq.n	800880c <__gethex+0x38c>
 800877c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d015      	beq.n	80087b0 <__gethex+0x330>
 8008784:	2b03      	cmp	r3, #3
 8008786:	d017      	beq.n	80087b8 <__gethex+0x338>
 8008788:	2b01      	cmp	r3, #1
 800878a:	d109      	bne.n	80087a0 <__gethex+0x320>
 800878c:	f019 0f02 	tst.w	r9, #2
 8008790:	d006      	beq.n	80087a0 <__gethex+0x320>
 8008792:	f8da 3000 	ldr.w	r3, [sl]
 8008796:	ea49 0903 	orr.w	r9, r9, r3
 800879a:	f019 0f01 	tst.w	r9, #1
 800879e:	d10e      	bne.n	80087be <__gethex+0x33e>
 80087a0:	f045 0510 	orr.w	r5, r5, #16
 80087a4:	e032      	b.n	800880c <__gethex+0x38c>
 80087a6:	f04f 0901 	mov.w	r9, #1
 80087aa:	e7d1      	b.n	8008750 <__gethex+0x2d0>
 80087ac:	2501      	movs	r5, #1
 80087ae:	e7e2      	b.n	8008776 <__gethex+0x2f6>
 80087b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087b2:	f1c3 0301 	rsb	r3, r3, #1
 80087b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f0      	beq.n	80087a0 <__gethex+0x320>
 80087be:	f04f 0c00 	mov.w	ip, #0
 80087c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80087c6:	f104 0314 	add.w	r3, r4, #20
 80087ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80087ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80087dc:	d01b      	beq.n	8008816 <__gethex+0x396>
 80087de:	3201      	adds	r2, #1
 80087e0:	6002      	str	r2, [r0, #0]
 80087e2:	2d02      	cmp	r5, #2
 80087e4:	f104 0314 	add.w	r3, r4, #20
 80087e8:	d13c      	bne.n	8008864 <__gethex+0x3e4>
 80087ea:	f8d8 2000 	ldr.w	r2, [r8]
 80087ee:	3a01      	subs	r2, #1
 80087f0:	42b2      	cmp	r2, r6
 80087f2:	d109      	bne.n	8008808 <__gethex+0x388>
 80087f4:	2201      	movs	r2, #1
 80087f6:	1171      	asrs	r1, r6, #5
 80087f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087fc:	f006 061f 	and.w	r6, r6, #31
 8008800:	fa02 f606 	lsl.w	r6, r2, r6
 8008804:	421e      	tst	r6, r3
 8008806:	d13a      	bne.n	800887e <__gethex+0x3fe>
 8008808:	f045 0520 	orr.w	r5, r5, #32
 800880c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800880e:	601c      	str	r4, [r3, #0]
 8008810:	9b02      	ldr	r3, [sp, #8]
 8008812:	601f      	str	r7, [r3, #0]
 8008814:	e6b0      	b.n	8008578 <__gethex+0xf8>
 8008816:	4299      	cmp	r1, r3
 8008818:	f843 cc04 	str.w	ip, [r3, #-4]
 800881c:	d8d9      	bhi.n	80087d2 <__gethex+0x352>
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	459b      	cmp	fp, r3
 8008822:	db17      	blt.n	8008854 <__gethex+0x3d4>
 8008824:	6861      	ldr	r1, [r4, #4]
 8008826:	9801      	ldr	r0, [sp, #4]
 8008828:	3101      	adds	r1, #1
 800882a:	f000 fbc1 	bl	8008fb0 <_Balloc>
 800882e:	4681      	mov	r9, r0
 8008830:	b918      	cbnz	r0, 800883a <__gethex+0x3ba>
 8008832:	4602      	mov	r2, r0
 8008834:	2184      	movs	r1, #132	@ 0x84
 8008836:	4b19      	ldr	r3, [pc, #100]	@ (800889c <__gethex+0x41c>)
 8008838:	e6c5      	b.n	80085c6 <__gethex+0x146>
 800883a:	6922      	ldr	r2, [r4, #16]
 800883c:	f104 010c 	add.w	r1, r4, #12
 8008840:	3202      	adds	r2, #2
 8008842:	0092      	lsls	r2, r2, #2
 8008844:	300c      	adds	r0, #12
 8008846:	f7fe ff4a 	bl	80076de <memcpy>
 800884a:	4621      	mov	r1, r4
 800884c:	9801      	ldr	r0, [sp, #4]
 800884e:	f000 fbef 	bl	8009030 <_Bfree>
 8008852:	464c      	mov	r4, r9
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	6122      	str	r2, [r4, #16]
 800885a:	2201      	movs	r2, #1
 800885c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008860:	615a      	str	r2, [r3, #20]
 8008862:	e7be      	b.n	80087e2 <__gethex+0x362>
 8008864:	6922      	ldr	r2, [r4, #16]
 8008866:	455a      	cmp	r2, fp
 8008868:	dd0b      	ble.n	8008882 <__gethex+0x402>
 800886a:	2101      	movs	r1, #1
 800886c:	4620      	mov	r0, r4
 800886e:	f7ff fd9f 	bl	80083b0 <rshift>
 8008872:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008876:	3701      	adds	r7, #1
 8008878:	42bb      	cmp	r3, r7
 800887a:	f6ff aee0 	blt.w	800863e <__gethex+0x1be>
 800887e:	2501      	movs	r5, #1
 8008880:	e7c2      	b.n	8008808 <__gethex+0x388>
 8008882:	f016 061f 	ands.w	r6, r6, #31
 8008886:	d0fa      	beq.n	800887e <__gethex+0x3fe>
 8008888:	4453      	add	r3, sl
 800888a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800888e:	f000 fc81 	bl	8009194 <__hi0bits>
 8008892:	f1c6 0620 	rsb	r6, r6, #32
 8008896:	42b0      	cmp	r0, r6
 8008898:	dbe7      	blt.n	800886a <__gethex+0x3ea>
 800889a:	e7f0      	b.n	800887e <__gethex+0x3fe>
 800889c:	0800c635 	.word	0x0800c635

080088a0 <L_shift>:
 80088a0:	f1c2 0208 	rsb	r2, r2, #8
 80088a4:	0092      	lsls	r2, r2, #2
 80088a6:	b570      	push	{r4, r5, r6, lr}
 80088a8:	f1c2 0620 	rsb	r6, r2, #32
 80088ac:	6843      	ldr	r3, [r0, #4]
 80088ae:	6804      	ldr	r4, [r0, #0]
 80088b0:	fa03 f506 	lsl.w	r5, r3, r6
 80088b4:	432c      	orrs	r4, r5
 80088b6:	40d3      	lsrs	r3, r2
 80088b8:	6004      	str	r4, [r0, #0]
 80088ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80088be:	4288      	cmp	r0, r1
 80088c0:	d3f4      	bcc.n	80088ac <L_shift+0xc>
 80088c2:	bd70      	pop	{r4, r5, r6, pc}

080088c4 <__match>:
 80088c4:	b530      	push	{r4, r5, lr}
 80088c6:	6803      	ldr	r3, [r0, #0]
 80088c8:	3301      	adds	r3, #1
 80088ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ce:	b914      	cbnz	r4, 80088d6 <__match+0x12>
 80088d0:	6003      	str	r3, [r0, #0]
 80088d2:	2001      	movs	r0, #1
 80088d4:	bd30      	pop	{r4, r5, pc}
 80088d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80088de:	2d19      	cmp	r5, #25
 80088e0:	bf98      	it	ls
 80088e2:	3220      	addls	r2, #32
 80088e4:	42a2      	cmp	r2, r4
 80088e6:	d0f0      	beq.n	80088ca <__match+0x6>
 80088e8:	2000      	movs	r0, #0
 80088ea:	e7f3      	b.n	80088d4 <__match+0x10>

080088ec <__hexnan>:
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	2500      	movs	r5, #0
 80088f2:	680b      	ldr	r3, [r1, #0]
 80088f4:	4682      	mov	sl, r0
 80088f6:	115e      	asrs	r6, r3, #5
 80088f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088fc:	f013 031f 	ands.w	r3, r3, #31
 8008900:	bf18      	it	ne
 8008902:	3604      	addne	r6, #4
 8008904:	1f37      	subs	r7, r6, #4
 8008906:	4690      	mov	r8, r2
 8008908:	46b9      	mov	r9, r7
 800890a:	463c      	mov	r4, r7
 800890c:	46ab      	mov	fp, r5
 800890e:	b087      	sub	sp, #28
 8008910:	6801      	ldr	r1, [r0, #0]
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f846 5c04 	str.w	r5, [r6, #-4]
 8008918:	9502      	str	r5, [sp, #8]
 800891a:	784a      	ldrb	r2, [r1, #1]
 800891c:	1c4b      	adds	r3, r1, #1
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	b342      	cbz	r2, 8008974 <__hexnan+0x88>
 8008922:	4610      	mov	r0, r2
 8008924:	9105      	str	r1, [sp, #20]
 8008926:	9204      	str	r2, [sp, #16]
 8008928:	f7ff fd95 	bl	8008456 <__hexdig_fun>
 800892c:	2800      	cmp	r0, #0
 800892e:	d151      	bne.n	80089d4 <__hexnan+0xe8>
 8008930:	9a04      	ldr	r2, [sp, #16]
 8008932:	9905      	ldr	r1, [sp, #20]
 8008934:	2a20      	cmp	r2, #32
 8008936:	d818      	bhi.n	800896a <__hexnan+0x7e>
 8008938:	9b02      	ldr	r3, [sp, #8]
 800893a:	459b      	cmp	fp, r3
 800893c:	dd13      	ble.n	8008966 <__hexnan+0x7a>
 800893e:	454c      	cmp	r4, r9
 8008940:	d206      	bcs.n	8008950 <__hexnan+0x64>
 8008942:	2d07      	cmp	r5, #7
 8008944:	dc04      	bgt.n	8008950 <__hexnan+0x64>
 8008946:	462a      	mov	r2, r5
 8008948:	4649      	mov	r1, r9
 800894a:	4620      	mov	r0, r4
 800894c:	f7ff ffa8 	bl	80088a0 <L_shift>
 8008950:	4544      	cmp	r4, r8
 8008952:	d952      	bls.n	80089fa <__hexnan+0x10e>
 8008954:	2300      	movs	r3, #0
 8008956:	f1a4 0904 	sub.w	r9, r4, #4
 800895a:	f844 3c04 	str.w	r3, [r4, #-4]
 800895e:	461d      	mov	r5, r3
 8008960:	464c      	mov	r4, r9
 8008962:	f8cd b008 	str.w	fp, [sp, #8]
 8008966:	9903      	ldr	r1, [sp, #12]
 8008968:	e7d7      	b.n	800891a <__hexnan+0x2e>
 800896a:	2a29      	cmp	r2, #41	@ 0x29
 800896c:	d157      	bne.n	8008a1e <__hexnan+0x132>
 800896e:	3102      	adds	r1, #2
 8008970:	f8ca 1000 	str.w	r1, [sl]
 8008974:	f1bb 0f00 	cmp.w	fp, #0
 8008978:	d051      	beq.n	8008a1e <__hexnan+0x132>
 800897a:	454c      	cmp	r4, r9
 800897c:	d206      	bcs.n	800898c <__hexnan+0xa0>
 800897e:	2d07      	cmp	r5, #7
 8008980:	dc04      	bgt.n	800898c <__hexnan+0xa0>
 8008982:	462a      	mov	r2, r5
 8008984:	4649      	mov	r1, r9
 8008986:	4620      	mov	r0, r4
 8008988:	f7ff ff8a 	bl	80088a0 <L_shift>
 800898c:	4544      	cmp	r4, r8
 800898e:	d936      	bls.n	80089fe <__hexnan+0x112>
 8008990:	4623      	mov	r3, r4
 8008992:	f1a8 0204 	sub.w	r2, r8, #4
 8008996:	f853 1b04 	ldr.w	r1, [r3], #4
 800899a:	429f      	cmp	r7, r3
 800899c:	f842 1f04 	str.w	r1, [r2, #4]!
 80089a0:	d2f9      	bcs.n	8008996 <__hexnan+0xaa>
 80089a2:	1b3b      	subs	r3, r7, r4
 80089a4:	f023 0303 	bic.w	r3, r3, #3
 80089a8:	3304      	adds	r3, #4
 80089aa:	3401      	adds	r4, #1
 80089ac:	3e03      	subs	r6, #3
 80089ae:	42b4      	cmp	r4, r6
 80089b0:	bf88      	it	hi
 80089b2:	2304      	movhi	r3, #4
 80089b4:	2200      	movs	r2, #0
 80089b6:	4443      	add	r3, r8
 80089b8:	f843 2b04 	str.w	r2, [r3], #4
 80089bc:	429f      	cmp	r7, r3
 80089be:	d2fb      	bcs.n	80089b8 <__hexnan+0xcc>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	b91b      	cbnz	r3, 80089cc <__hexnan+0xe0>
 80089c4:	4547      	cmp	r7, r8
 80089c6:	d128      	bne.n	8008a1a <__hexnan+0x12e>
 80089c8:	2301      	movs	r3, #1
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	2005      	movs	r0, #5
 80089ce:	b007      	add	sp, #28
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	3501      	adds	r5, #1
 80089d6:	2d08      	cmp	r5, #8
 80089d8:	f10b 0b01 	add.w	fp, fp, #1
 80089dc:	dd06      	ble.n	80089ec <__hexnan+0x100>
 80089de:	4544      	cmp	r4, r8
 80089e0:	d9c1      	bls.n	8008966 <__hexnan+0x7a>
 80089e2:	2300      	movs	r3, #0
 80089e4:	2501      	movs	r5, #1
 80089e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80089ea:	3c04      	subs	r4, #4
 80089ec:	6822      	ldr	r2, [r4, #0]
 80089ee:	f000 000f 	and.w	r0, r0, #15
 80089f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80089f6:	6020      	str	r0, [r4, #0]
 80089f8:	e7b5      	b.n	8008966 <__hexnan+0x7a>
 80089fa:	2508      	movs	r5, #8
 80089fc:	e7b3      	b.n	8008966 <__hexnan+0x7a>
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0dd      	beq.n	80089c0 <__hexnan+0xd4>
 8008a04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a08:	f1c3 0320 	rsb	r3, r3, #32
 8008a0c:	40da      	lsrs	r2, r3
 8008a0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008a12:	4013      	ands	r3, r2
 8008a14:	f846 3c04 	str.w	r3, [r6, #-4]
 8008a18:	e7d2      	b.n	80089c0 <__hexnan+0xd4>
 8008a1a:	3f04      	subs	r7, #4
 8008a1c:	e7d0      	b.n	80089c0 <__hexnan+0xd4>
 8008a1e:	2004      	movs	r0, #4
 8008a20:	e7d5      	b.n	80089ce <__hexnan+0xe2>

08008a22 <__ssputs_r>:
 8008a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a26:	461f      	mov	r7, r3
 8008a28:	688e      	ldr	r6, [r1, #8]
 8008a2a:	4682      	mov	sl, r0
 8008a2c:	42be      	cmp	r6, r7
 8008a2e:	460c      	mov	r4, r1
 8008a30:	4690      	mov	r8, r2
 8008a32:	680b      	ldr	r3, [r1, #0]
 8008a34:	d82d      	bhi.n	8008a92 <__ssputs_r+0x70>
 8008a36:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a3a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a3e:	d026      	beq.n	8008a8e <__ssputs_r+0x6c>
 8008a40:	6965      	ldr	r5, [r4, #20]
 8008a42:	6909      	ldr	r1, [r1, #16]
 8008a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a48:	eba3 0901 	sub.w	r9, r3, r1
 8008a4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a50:	1c7b      	adds	r3, r7, #1
 8008a52:	444b      	add	r3, r9
 8008a54:	106d      	asrs	r5, r5, #1
 8008a56:	429d      	cmp	r5, r3
 8008a58:	bf38      	it	cc
 8008a5a:	461d      	movcc	r5, r3
 8008a5c:	0553      	lsls	r3, r2, #21
 8008a5e:	d527      	bpl.n	8008ab0 <__ssputs_r+0x8e>
 8008a60:	4629      	mov	r1, r5
 8008a62:	f000 f95f 	bl	8008d24 <_malloc_r>
 8008a66:	4606      	mov	r6, r0
 8008a68:	b360      	cbz	r0, 8008ac4 <__ssputs_r+0xa2>
 8008a6a:	464a      	mov	r2, r9
 8008a6c:	6921      	ldr	r1, [r4, #16]
 8008a6e:	f7fe fe36 	bl	80076de <memcpy>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	6126      	str	r6, [r4, #16]
 8008a80:	444e      	add	r6, r9
 8008a82:	6026      	str	r6, [r4, #0]
 8008a84:	463e      	mov	r6, r7
 8008a86:	6165      	str	r5, [r4, #20]
 8008a88:	eba5 0509 	sub.w	r5, r5, r9
 8008a8c:	60a5      	str	r5, [r4, #8]
 8008a8e:	42be      	cmp	r6, r7
 8008a90:	d900      	bls.n	8008a94 <__ssputs_r+0x72>
 8008a92:	463e      	mov	r6, r7
 8008a94:	4632      	mov	r2, r6
 8008a96:	4641      	mov	r1, r8
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	f7fe fdbf 	bl	800761c <memmove>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	68a3      	ldr	r3, [r4, #8]
 8008aa2:	1b9b      	subs	r3, r3, r6
 8008aa4:	60a3      	str	r3, [r4, #8]
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	4433      	add	r3, r6
 8008aaa:	6023      	str	r3, [r4, #0]
 8008aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	f000 ff66 	bl	8009982 <_realloc_r>
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1e0      	bne.n	8008a7e <__ssputs_r+0x5c>
 8008abc:	4650      	mov	r0, sl
 8008abe:	6921      	ldr	r1, [r4, #16]
 8008ac0:	f001 f822 	bl	8009b08 <_free_r>
 8008ac4:	230c      	movs	r3, #12
 8008ac6:	f8ca 3000 	str.w	r3, [sl]
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	e7e9      	b.n	8008aac <__ssputs_r+0x8a>

08008ad8 <_svfiprintf_r>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	4698      	mov	r8, r3
 8008ade:	898b      	ldrh	r3, [r1, #12]
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	061b      	lsls	r3, r3, #24
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	4614      	mov	r4, r2
 8008ae8:	b09d      	sub	sp, #116	@ 0x74
 8008aea:	d510      	bpl.n	8008b0e <_svfiprintf_r+0x36>
 8008aec:	690b      	ldr	r3, [r1, #16]
 8008aee:	b973      	cbnz	r3, 8008b0e <_svfiprintf_r+0x36>
 8008af0:	2140      	movs	r1, #64	@ 0x40
 8008af2:	f000 f917 	bl	8008d24 <_malloc_r>
 8008af6:	6028      	str	r0, [r5, #0]
 8008af8:	6128      	str	r0, [r5, #16]
 8008afa:	b930      	cbnz	r0, 8008b0a <_svfiprintf_r+0x32>
 8008afc:	230c      	movs	r3, #12
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b04:	b01d      	add	sp, #116	@ 0x74
 8008b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0a:	2340      	movs	r3, #64	@ 0x40
 8008b0c:	616b      	str	r3, [r5, #20]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b12:	2320      	movs	r3, #32
 8008b14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b18:	2330      	movs	r3, #48	@ 0x30
 8008b1a:	f04f 0901 	mov.w	r9, #1
 8008b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b22:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008cbc <_svfiprintf_r+0x1e4>
 8008b26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	469a      	mov	sl, r3
 8008b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b32:	b10a      	cbz	r2, 8008b38 <_svfiprintf_r+0x60>
 8008b34:	2a25      	cmp	r2, #37	@ 0x25
 8008b36:	d1f9      	bne.n	8008b2c <_svfiprintf_r+0x54>
 8008b38:	ebba 0b04 	subs.w	fp, sl, r4
 8008b3c:	d00b      	beq.n	8008b56 <_svfiprintf_r+0x7e>
 8008b3e:	465b      	mov	r3, fp
 8008b40:	4622      	mov	r2, r4
 8008b42:	4629      	mov	r1, r5
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff ff6c 	bl	8008a22 <__ssputs_r>
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f000 80a7 	beq.w	8008c9e <_svfiprintf_r+0x1c6>
 8008b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b52:	445a      	add	r2, fp
 8008b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b56:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 809f 	beq.w	8008c9e <_svfiprintf_r+0x1c6>
 8008b60:	2300      	movs	r3, #0
 8008b62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b6a:	f10a 0a01 	add.w	sl, sl, #1
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	9307      	str	r3, [sp, #28]
 8008b72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b76:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b78:	4654      	mov	r4, sl
 8008b7a:	2205      	movs	r2, #5
 8008b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b80:	484e      	ldr	r0, [pc, #312]	@ (8008cbc <_svfiprintf_r+0x1e4>)
 8008b82:	f7fe fd9e 	bl	80076c2 <memchr>
 8008b86:	9a04      	ldr	r2, [sp, #16]
 8008b88:	b9d8      	cbnz	r0, 8008bc2 <_svfiprintf_r+0xea>
 8008b8a:	06d0      	lsls	r0, r2, #27
 8008b8c:	bf44      	itt	mi
 8008b8e:	2320      	movmi	r3, #32
 8008b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b94:	0711      	lsls	r1, r2, #28
 8008b96:	bf44      	itt	mi
 8008b98:	232b      	movmi	r3, #43	@ 0x2b
 8008b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ba4:	d015      	beq.n	8008bd2 <_svfiprintf_r+0xfa>
 8008ba6:	4654      	mov	r4, sl
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f04f 0c0a 	mov.w	ip, #10
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb6:	3b30      	subs	r3, #48	@ 0x30
 8008bb8:	2b09      	cmp	r3, #9
 8008bba:	d94b      	bls.n	8008c54 <_svfiprintf_r+0x17c>
 8008bbc:	b1b0      	cbz	r0, 8008bec <_svfiprintf_r+0x114>
 8008bbe:	9207      	str	r2, [sp, #28]
 8008bc0:	e014      	b.n	8008bec <_svfiprintf_r+0x114>
 8008bc2:	eba0 0308 	sub.w	r3, r0, r8
 8008bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	46a2      	mov	sl, r4
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	e7d2      	b.n	8008b78 <_svfiprintf_r+0xa0>
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	1d19      	adds	r1, r3, #4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	9103      	str	r1, [sp, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	bfbb      	ittet	lt
 8008bde:	425b      	neglt	r3, r3
 8008be0:	f042 0202 	orrlt.w	r2, r2, #2
 8008be4:	9307      	strge	r3, [sp, #28]
 8008be6:	9307      	strlt	r3, [sp, #28]
 8008be8:	bfb8      	it	lt
 8008bea:	9204      	strlt	r2, [sp, #16]
 8008bec:	7823      	ldrb	r3, [r4, #0]
 8008bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bf0:	d10a      	bne.n	8008c08 <_svfiprintf_r+0x130>
 8008bf2:	7863      	ldrb	r3, [r4, #1]
 8008bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bf6:	d132      	bne.n	8008c5e <_svfiprintf_r+0x186>
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	3402      	adds	r4, #2
 8008bfc:	1d1a      	adds	r2, r3, #4
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	9203      	str	r2, [sp, #12]
 8008c02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c06:	9305      	str	r3, [sp, #20]
 8008c08:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008cc0 <_svfiprintf_r+0x1e8>
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	4650      	mov	r0, sl
 8008c10:	7821      	ldrb	r1, [r4, #0]
 8008c12:	f7fe fd56 	bl	80076c2 <memchr>
 8008c16:	b138      	cbz	r0, 8008c28 <_svfiprintf_r+0x150>
 8008c18:	2240      	movs	r2, #64	@ 0x40
 8008c1a:	9b04      	ldr	r3, [sp, #16]
 8008c1c:	eba0 000a 	sub.w	r0, r0, sl
 8008c20:	4082      	lsls	r2, r0
 8008c22:	4313      	orrs	r3, r2
 8008c24:	3401      	adds	r4, #1
 8008c26:	9304      	str	r3, [sp, #16]
 8008c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2c:	2206      	movs	r2, #6
 8008c2e:	4825      	ldr	r0, [pc, #148]	@ (8008cc4 <_svfiprintf_r+0x1ec>)
 8008c30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c34:	f7fe fd45 	bl	80076c2 <memchr>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d036      	beq.n	8008caa <_svfiprintf_r+0x1d2>
 8008c3c:	4b22      	ldr	r3, [pc, #136]	@ (8008cc8 <_svfiprintf_r+0x1f0>)
 8008c3e:	bb1b      	cbnz	r3, 8008c88 <_svfiprintf_r+0x1b0>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	3307      	adds	r3, #7
 8008c44:	f023 0307 	bic.w	r3, r3, #7
 8008c48:	3308      	adds	r3, #8
 8008c4a:	9303      	str	r3, [sp, #12]
 8008c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c4e:	4433      	add	r3, r6
 8008c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c52:	e76a      	b.n	8008b2a <_svfiprintf_r+0x52>
 8008c54:	460c      	mov	r4, r1
 8008c56:	2001      	movs	r0, #1
 8008c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c5c:	e7a8      	b.n	8008bb0 <_svfiprintf_r+0xd8>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f04f 0c0a 	mov.w	ip, #10
 8008c64:	4619      	mov	r1, r3
 8008c66:	3401      	adds	r4, #1
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c70:	3a30      	subs	r2, #48	@ 0x30
 8008c72:	2a09      	cmp	r2, #9
 8008c74:	d903      	bls.n	8008c7e <_svfiprintf_r+0x1a6>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0c6      	beq.n	8008c08 <_svfiprintf_r+0x130>
 8008c7a:	9105      	str	r1, [sp, #20]
 8008c7c:	e7c4      	b.n	8008c08 <_svfiprintf_r+0x130>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	2301      	movs	r3, #1
 8008c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c86:	e7f0      	b.n	8008c6a <_svfiprintf_r+0x192>
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4638      	mov	r0, r7
 8008c90:	4b0e      	ldr	r3, [pc, #56]	@ (8008ccc <_svfiprintf_r+0x1f4>)
 8008c92:	a904      	add	r1, sp, #16
 8008c94:	f7fc ff84 	bl	8005ba0 <_printf_float>
 8008c98:	1c42      	adds	r2, r0, #1
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	d1d6      	bne.n	8008c4c <_svfiprintf_r+0x174>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	065b      	lsls	r3, r3, #25
 8008ca2:	f53f af2d 	bmi.w	8008b00 <_svfiprintf_r+0x28>
 8008ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ca8:	e72c      	b.n	8008b04 <_svfiprintf_r+0x2c>
 8008caa:	ab03      	add	r3, sp, #12
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	462a      	mov	r2, r5
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <_svfiprintf_r+0x1f4>)
 8008cb4:	a904      	add	r1, sp, #16
 8008cb6:	f7fd fa11 	bl	80060dc <_printf_i>
 8008cba:	e7ed      	b.n	8008c98 <_svfiprintf_r+0x1c0>
 8008cbc:	0800c6a6 	.word	0x0800c6a6
 8008cc0:	0800c6ac 	.word	0x0800c6ac
 8008cc4:	0800c6b0 	.word	0x0800c6b0
 8008cc8:	08005ba1 	.word	0x08005ba1
 8008ccc:	08008a23 	.word	0x08008a23

08008cd0 <malloc>:
 8008cd0:	4b02      	ldr	r3, [pc, #8]	@ (8008cdc <malloc+0xc>)
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	f000 b825 	b.w	8008d24 <_malloc_r>
 8008cda:	bf00      	nop
 8008cdc:	200001ac 	.word	0x200001ac

08008ce0 <sbrk_aligned>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4e0f      	ldr	r6, [pc, #60]	@ (8008d20 <sbrk_aligned+0x40>)
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	6831      	ldr	r1, [r6, #0]
 8008ce8:	4605      	mov	r5, r0
 8008cea:	b911      	cbnz	r1, 8008cf2 <sbrk_aligned+0x12>
 8008cec:	f000 feb8 	bl	8009a60 <_sbrk_r>
 8008cf0:	6030      	str	r0, [r6, #0]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f000 feb3 	bl	8009a60 <_sbrk_r>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	d103      	bne.n	8008d06 <sbrk_aligned+0x26>
 8008cfe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008d02:	4620      	mov	r0, r4
 8008d04:	bd70      	pop	{r4, r5, r6, pc}
 8008d06:	1cc4      	adds	r4, r0, #3
 8008d08:	f024 0403 	bic.w	r4, r4, #3
 8008d0c:	42a0      	cmp	r0, r4
 8008d0e:	d0f8      	beq.n	8008d02 <sbrk_aligned+0x22>
 8008d10:	1a21      	subs	r1, r4, r0
 8008d12:	4628      	mov	r0, r5
 8008d14:	f000 fea4 	bl	8009a60 <_sbrk_r>
 8008d18:	3001      	adds	r0, #1
 8008d1a:	d1f2      	bne.n	8008d02 <sbrk_aligned+0x22>
 8008d1c:	e7ef      	b.n	8008cfe <sbrk_aligned+0x1e>
 8008d1e:	bf00      	nop
 8008d20:	200008f8 	.word	0x200008f8

08008d24 <_malloc_r>:
 8008d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d28:	1ccd      	adds	r5, r1, #3
 8008d2a:	f025 0503 	bic.w	r5, r5, #3
 8008d2e:	3508      	adds	r5, #8
 8008d30:	2d0c      	cmp	r5, #12
 8008d32:	bf38      	it	cc
 8008d34:	250c      	movcc	r5, #12
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	4606      	mov	r6, r0
 8008d3a:	db01      	blt.n	8008d40 <_malloc_r+0x1c>
 8008d3c:	42a9      	cmp	r1, r5
 8008d3e:	d904      	bls.n	8008d4a <_malloc_r+0x26>
 8008d40:	230c      	movs	r3, #12
 8008d42:	6033      	str	r3, [r6, #0]
 8008d44:	2000      	movs	r0, #0
 8008d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e20 <_malloc_r+0xfc>
 8008d4e:	f000 f923 	bl	8008f98 <__malloc_lock>
 8008d52:	f8d8 3000 	ldr.w	r3, [r8]
 8008d56:	461c      	mov	r4, r3
 8008d58:	bb44      	cbnz	r4, 8008dac <_malloc_r+0x88>
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7ff ffbf 	bl	8008ce0 <sbrk_aligned>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	4604      	mov	r4, r0
 8008d66:	d158      	bne.n	8008e1a <_malloc_r+0xf6>
 8008d68:	f8d8 4000 	ldr.w	r4, [r8]
 8008d6c:	4627      	mov	r7, r4
 8008d6e:	2f00      	cmp	r7, #0
 8008d70:	d143      	bne.n	8008dfa <_malloc_r+0xd6>
 8008d72:	2c00      	cmp	r4, #0
 8008d74:	d04b      	beq.n	8008e0e <_malloc_r+0xea>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	4639      	mov	r1, r7
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	eb04 0903 	add.w	r9, r4, r3
 8008d80:	f000 fe6e 	bl	8009a60 <_sbrk_r>
 8008d84:	4581      	cmp	r9, r0
 8008d86:	d142      	bne.n	8008e0e <_malloc_r+0xea>
 8008d88:	6821      	ldr	r1, [r4, #0]
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	1a6d      	subs	r5, r5, r1
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f7ff ffa6 	bl	8008ce0 <sbrk_aligned>
 8008d94:	3001      	adds	r0, #1
 8008d96:	d03a      	beq.n	8008e0e <_malloc_r+0xea>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	442b      	add	r3, r5
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	bb62      	cbnz	r2, 8008e00 <_malloc_r+0xdc>
 8008da6:	f8c8 7000 	str.w	r7, [r8]
 8008daa:	e00f      	b.n	8008dcc <_malloc_r+0xa8>
 8008dac:	6822      	ldr	r2, [r4, #0]
 8008dae:	1b52      	subs	r2, r2, r5
 8008db0:	d420      	bmi.n	8008df4 <_malloc_r+0xd0>
 8008db2:	2a0b      	cmp	r2, #11
 8008db4:	d917      	bls.n	8008de6 <_malloc_r+0xc2>
 8008db6:	1961      	adds	r1, r4, r5
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	6025      	str	r5, [r4, #0]
 8008dbc:	bf18      	it	ne
 8008dbe:	6059      	strne	r1, [r3, #4]
 8008dc0:	6863      	ldr	r3, [r4, #4]
 8008dc2:	bf08      	it	eq
 8008dc4:	f8c8 1000 	streq.w	r1, [r8]
 8008dc8:	5162      	str	r2, [r4, r5]
 8008dca:	604b      	str	r3, [r1, #4]
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 f8e9 	bl	8008fa4 <__malloc_unlock>
 8008dd2:	f104 000b 	add.w	r0, r4, #11
 8008dd6:	1d23      	adds	r3, r4, #4
 8008dd8:	f020 0007 	bic.w	r0, r0, #7
 8008ddc:	1ac2      	subs	r2, r0, r3
 8008dde:	bf1c      	itt	ne
 8008de0:	1a1b      	subne	r3, r3, r0
 8008de2:	50a3      	strne	r3, [r4, r2]
 8008de4:	e7af      	b.n	8008d46 <_malloc_r+0x22>
 8008de6:	6862      	ldr	r2, [r4, #4]
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	bf0c      	ite	eq
 8008dec:	f8c8 2000 	streq.w	r2, [r8]
 8008df0:	605a      	strne	r2, [r3, #4]
 8008df2:	e7eb      	b.n	8008dcc <_malloc_r+0xa8>
 8008df4:	4623      	mov	r3, r4
 8008df6:	6864      	ldr	r4, [r4, #4]
 8008df8:	e7ae      	b.n	8008d58 <_malloc_r+0x34>
 8008dfa:	463c      	mov	r4, r7
 8008dfc:	687f      	ldr	r7, [r7, #4]
 8008dfe:	e7b6      	b.n	8008d6e <_malloc_r+0x4a>
 8008e00:	461a      	mov	r2, r3
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d1fb      	bne.n	8008e00 <_malloc_r+0xdc>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6053      	str	r3, [r2, #4]
 8008e0c:	e7de      	b.n	8008dcc <_malloc_r+0xa8>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	4630      	mov	r0, r6
 8008e12:	6033      	str	r3, [r6, #0]
 8008e14:	f000 f8c6 	bl	8008fa4 <__malloc_unlock>
 8008e18:	e794      	b.n	8008d44 <_malloc_r+0x20>
 8008e1a:	6005      	str	r5, [r0, #0]
 8008e1c:	e7d6      	b.n	8008dcc <_malloc_r+0xa8>
 8008e1e:	bf00      	nop
 8008e20:	200008fc 	.word	0x200008fc

08008e24 <__ascii_mbtowc>:
 8008e24:	b082      	sub	sp, #8
 8008e26:	b901      	cbnz	r1, 8008e2a <__ascii_mbtowc+0x6>
 8008e28:	a901      	add	r1, sp, #4
 8008e2a:	b142      	cbz	r2, 8008e3e <__ascii_mbtowc+0x1a>
 8008e2c:	b14b      	cbz	r3, 8008e42 <__ascii_mbtowc+0x1e>
 8008e2e:	7813      	ldrb	r3, [r2, #0]
 8008e30:	600b      	str	r3, [r1, #0]
 8008e32:	7812      	ldrb	r2, [r2, #0]
 8008e34:	1e10      	subs	r0, r2, #0
 8008e36:	bf18      	it	ne
 8008e38:	2001      	movne	r0, #1
 8008e3a:	b002      	add	sp, #8
 8008e3c:	4770      	bx	lr
 8008e3e:	4610      	mov	r0, r2
 8008e40:	e7fb      	b.n	8008e3a <__ascii_mbtowc+0x16>
 8008e42:	f06f 0001 	mvn.w	r0, #1
 8008e46:	e7f8      	b.n	8008e3a <__ascii_mbtowc+0x16>

08008e48 <__sflush_r>:
 8008e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	0716      	lsls	r6, r2, #28
 8008e50:	4605      	mov	r5, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	d454      	bmi.n	8008f00 <__sflush_r+0xb8>
 8008e56:	684b      	ldr	r3, [r1, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dc02      	bgt.n	8008e62 <__sflush_r+0x1a>
 8008e5c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dd48      	ble.n	8008ef4 <__sflush_r+0xac>
 8008e62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e64:	2e00      	cmp	r6, #0
 8008e66:	d045      	beq.n	8008ef4 <__sflush_r+0xac>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e6e:	682f      	ldr	r7, [r5, #0]
 8008e70:	6a21      	ldr	r1, [r4, #32]
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	d030      	beq.n	8008ed8 <__sflush_r+0x90>
 8008e76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	0759      	lsls	r1, r3, #29
 8008e7c:	d505      	bpl.n	8008e8a <__sflush_r+0x42>
 8008e7e:	6863      	ldr	r3, [r4, #4]
 8008e80:	1ad2      	subs	r2, r2, r3
 8008e82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e84:	b10b      	cbz	r3, 8008e8a <__sflush_r+0x42>
 8008e86:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e88:	1ad2      	subs	r2, r2, r3
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e90:	6a21      	ldr	r1, [r4, #32]
 8008e92:	47b0      	blx	r6
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	d106      	bne.n	8008ea8 <__sflush_r+0x60>
 8008e9a:	6829      	ldr	r1, [r5, #0]
 8008e9c:	291d      	cmp	r1, #29
 8008e9e:	d82b      	bhi.n	8008ef8 <__sflush_r+0xb0>
 8008ea0:	4a28      	ldr	r2, [pc, #160]	@ (8008f44 <__sflush_r+0xfc>)
 8008ea2:	410a      	asrs	r2, r1
 8008ea4:	07d6      	lsls	r6, r2, #31
 8008ea6:	d427      	bmi.n	8008ef8 <__sflush_r+0xb0>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	6062      	str	r2, [r4, #4]
 8008eac:	6922      	ldr	r2, [r4, #16]
 8008eae:	04d9      	lsls	r1, r3, #19
 8008eb0:	6022      	str	r2, [r4, #0]
 8008eb2:	d504      	bpl.n	8008ebe <__sflush_r+0x76>
 8008eb4:	1c42      	adds	r2, r0, #1
 8008eb6:	d101      	bne.n	8008ebc <__sflush_r+0x74>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b903      	cbnz	r3, 8008ebe <__sflush_r+0x76>
 8008ebc:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ebe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ec0:	602f      	str	r7, [r5, #0]
 8008ec2:	b1b9      	cbz	r1, 8008ef4 <__sflush_r+0xac>
 8008ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	d002      	beq.n	8008ed2 <__sflush_r+0x8a>
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f000 fe1b 	bl	8009b08 <_free_r>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ed6:	e00d      	b.n	8008ef4 <__sflush_r+0xac>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4628      	mov	r0, r5
 8008edc:	47b0      	blx	r6
 8008ede:	4602      	mov	r2, r0
 8008ee0:	1c50      	adds	r0, r2, #1
 8008ee2:	d1c9      	bne.n	8008e78 <__sflush_r+0x30>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0c6      	beq.n	8008e78 <__sflush_r+0x30>
 8008eea:	2b1d      	cmp	r3, #29
 8008eec:	d001      	beq.n	8008ef2 <__sflush_r+0xaa>
 8008eee:	2b16      	cmp	r3, #22
 8008ef0:	d11d      	bne.n	8008f2e <__sflush_r+0xe6>
 8008ef2:	602f      	str	r7, [r5, #0]
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	e021      	b.n	8008f3c <__sflush_r+0xf4>
 8008ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	e01a      	b.n	8008f36 <__sflush_r+0xee>
 8008f00:	690f      	ldr	r7, [r1, #16]
 8008f02:	2f00      	cmp	r7, #0
 8008f04:	d0f6      	beq.n	8008ef4 <__sflush_r+0xac>
 8008f06:	0793      	lsls	r3, r2, #30
 8008f08:	bf18      	it	ne
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	680e      	ldr	r6, [r1, #0]
 8008f0e:	bf08      	it	eq
 8008f10:	694b      	ldreq	r3, [r1, #20]
 8008f12:	1bf6      	subs	r6, r6, r7
 8008f14:	600f      	str	r7, [r1, #0]
 8008f16:	608b      	str	r3, [r1, #8]
 8008f18:	2e00      	cmp	r6, #0
 8008f1a:	ddeb      	ble.n	8008ef4 <__sflush_r+0xac>
 8008f1c:	4633      	mov	r3, r6
 8008f1e:	463a      	mov	r2, r7
 8008f20:	4628      	mov	r0, r5
 8008f22:	6a21      	ldr	r1, [r4, #32]
 8008f24:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008f28:	47e0      	blx	ip
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	dc07      	bgt.n	8008f3e <__sflush_r+0xf6>
 8008f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3e:	4407      	add	r7, r0
 8008f40:	1a36      	subs	r6, r6, r0
 8008f42:	e7e9      	b.n	8008f18 <__sflush_r+0xd0>
 8008f44:	dfbffffe 	.word	0xdfbffffe

08008f48 <_fflush_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	690b      	ldr	r3, [r1, #16]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b913      	cbnz	r3, 8008f58 <_fflush_r+0x10>
 8008f52:	2500      	movs	r5, #0
 8008f54:	4628      	mov	r0, r5
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	b118      	cbz	r0, 8008f62 <_fflush_r+0x1a>
 8008f5a:	6a03      	ldr	r3, [r0, #32]
 8008f5c:	b90b      	cbnz	r3, 8008f62 <_fflush_r+0x1a>
 8008f5e:	f7fd fc99 	bl	8006894 <__sinit>
 8008f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0f3      	beq.n	8008f52 <_fflush_r+0xa>
 8008f6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f6c:	07d0      	lsls	r0, r2, #31
 8008f6e:	d404      	bmi.n	8008f7a <_fflush_r+0x32>
 8008f70:	0599      	lsls	r1, r3, #22
 8008f72:	d402      	bmi.n	8008f7a <_fflush_r+0x32>
 8008f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f76:	f7fe fba2 	bl	80076be <__retarget_lock_acquire_recursive>
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7ff ff63 	bl	8008e48 <__sflush_r>
 8008f82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f84:	4605      	mov	r5, r0
 8008f86:	07da      	lsls	r2, r3, #31
 8008f88:	d4e4      	bmi.n	8008f54 <_fflush_r+0xc>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	059b      	lsls	r3, r3, #22
 8008f8e:	d4e1      	bmi.n	8008f54 <_fflush_r+0xc>
 8008f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f92:	f7fe fb95 	bl	80076c0 <__retarget_lock_release_recursive>
 8008f96:	e7dd      	b.n	8008f54 <_fflush_r+0xc>

08008f98 <__malloc_lock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	@ (8008fa0 <__malloc_lock+0x8>)
 8008f9a:	f7fe bb90 	b.w	80076be <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200008f4 	.word	0x200008f4

08008fa4 <__malloc_unlock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	@ (8008fac <__malloc_unlock+0x8>)
 8008fa6:	f7fe bb8b 	b.w	80076c0 <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	200008f4 	.word	0x200008f4

08008fb0 <_Balloc>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	69c6      	ldr	r6, [r0, #28]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	b976      	cbnz	r6, 8008fd8 <_Balloc+0x28>
 8008fba:	2010      	movs	r0, #16
 8008fbc:	f7ff fe88 	bl	8008cd0 <malloc>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	61e0      	str	r0, [r4, #28]
 8008fc4:	b920      	cbnz	r0, 8008fd0 <_Balloc+0x20>
 8008fc6:	216b      	movs	r1, #107	@ 0x6b
 8008fc8:	4b17      	ldr	r3, [pc, #92]	@ (8009028 <_Balloc+0x78>)
 8008fca:	4818      	ldr	r0, [pc, #96]	@ (800902c <_Balloc+0x7c>)
 8008fcc:	f000 fd6a 	bl	8009aa4 <__assert_func>
 8008fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd4:	6006      	str	r6, [r0, #0]
 8008fd6:	60c6      	str	r6, [r0, #12]
 8008fd8:	69e6      	ldr	r6, [r4, #28]
 8008fda:	68f3      	ldr	r3, [r6, #12]
 8008fdc:	b183      	cbz	r3, 8009000 <_Balloc+0x50>
 8008fde:	69e3      	ldr	r3, [r4, #28]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fe6:	b9b8      	cbnz	r0, 8009018 <_Balloc+0x68>
 8008fe8:	2101      	movs	r1, #1
 8008fea:	fa01 f605 	lsl.w	r6, r1, r5
 8008fee:	1d72      	adds	r2, r6, #5
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	f000 fd74 	bl	8009ae0 <_calloc_r>
 8008ff8:	b160      	cbz	r0, 8009014 <_Balloc+0x64>
 8008ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ffe:	e00e      	b.n	800901e <_Balloc+0x6e>
 8009000:	2221      	movs	r2, #33	@ 0x21
 8009002:	2104      	movs	r1, #4
 8009004:	4620      	mov	r0, r4
 8009006:	f000 fd6b 	bl	8009ae0 <_calloc_r>
 800900a:	69e3      	ldr	r3, [r4, #28]
 800900c:	60f0      	str	r0, [r6, #12]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e4      	bne.n	8008fde <_Balloc+0x2e>
 8009014:	2000      	movs	r0, #0
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	6802      	ldr	r2, [r0, #0]
 800901a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800901e:	2300      	movs	r3, #0
 8009020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009024:	e7f7      	b.n	8009016 <_Balloc+0x66>
 8009026:	bf00      	nop
 8009028:	0800c5c6 	.word	0x0800c5c6
 800902c:	0800c6b7 	.word	0x0800c6b7

08009030 <_Bfree>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	69c6      	ldr	r6, [r0, #28]
 8009034:	4605      	mov	r5, r0
 8009036:	460c      	mov	r4, r1
 8009038:	b976      	cbnz	r6, 8009058 <_Bfree+0x28>
 800903a:	2010      	movs	r0, #16
 800903c:	f7ff fe48 	bl	8008cd0 <malloc>
 8009040:	4602      	mov	r2, r0
 8009042:	61e8      	str	r0, [r5, #28]
 8009044:	b920      	cbnz	r0, 8009050 <_Bfree+0x20>
 8009046:	218f      	movs	r1, #143	@ 0x8f
 8009048:	4b08      	ldr	r3, [pc, #32]	@ (800906c <_Bfree+0x3c>)
 800904a:	4809      	ldr	r0, [pc, #36]	@ (8009070 <_Bfree+0x40>)
 800904c:	f000 fd2a 	bl	8009aa4 <__assert_func>
 8009050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009054:	6006      	str	r6, [r0, #0]
 8009056:	60c6      	str	r6, [r0, #12]
 8009058:	b13c      	cbz	r4, 800906a <_Bfree+0x3a>
 800905a:	69eb      	ldr	r3, [r5, #28]
 800905c:	6862      	ldr	r2, [r4, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009064:	6021      	str	r1, [r4, #0]
 8009066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	0800c5c6 	.word	0x0800c5c6
 8009070:	0800c6b7 	.word	0x0800c6b7

08009074 <__multadd>:
 8009074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009078:	4607      	mov	r7, r0
 800907a:	460c      	mov	r4, r1
 800907c:	461e      	mov	r6, r3
 800907e:	2000      	movs	r0, #0
 8009080:	690d      	ldr	r5, [r1, #16]
 8009082:	f101 0c14 	add.w	ip, r1, #20
 8009086:	f8dc 3000 	ldr.w	r3, [ip]
 800908a:	3001      	adds	r0, #1
 800908c:	b299      	uxth	r1, r3
 800908e:	fb02 6101 	mla	r1, r2, r1, r6
 8009092:	0c1e      	lsrs	r6, r3, #16
 8009094:	0c0b      	lsrs	r3, r1, #16
 8009096:	fb02 3306 	mla	r3, r2, r6, r3
 800909a:	b289      	uxth	r1, r1
 800909c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090a0:	4285      	cmp	r5, r0
 80090a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090a6:	f84c 1b04 	str.w	r1, [ip], #4
 80090aa:	dcec      	bgt.n	8009086 <__multadd+0x12>
 80090ac:	b30e      	cbz	r6, 80090f2 <__multadd+0x7e>
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dc19      	bgt.n	80090e8 <__multadd+0x74>
 80090b4:	6861      	ldr	r1, [r4, #4]
 80090b6:	4638      	mov	r0, r7
 80090b8:	3101      	adds	r1, #1
 80090ba:	f7ff ff79 	bl	8008fb0 <_Balloc>
 80090be:	4680      	mov	r8, r0
 80090c0:	b928      	cbnz	r0, 80090ce <__multadd+0x5a>
 80090c2:	4602      	mov	r2, r0
 80090c4:	21ba      	movs	r1, #186	@ 0xba
 80090c6:	4b0c      	ldr	r3, [pc, #48]	@ (80090f8 <__multadd+0x84>)
 80090c8:	480c      	ldr	r0, [pc, #48]	@ (80090fc <__multadd+0x88>)
 80090ca:	f000 fceb 	bl	8009aa4 <__assert_func>
 80090ce:	6922      	ldr	r2, [r4, #16]
 80090d0:	f104 010c 	add.w	r1, r4, #12
 80090d4:	3202      	adds	r2, #2
 80090d6:	0092      	lsls	r2, r2, #2
 80090d8:	300c      	adds	r0, #12
 80090da:	f7fe fb00 	bl	80076de <memcpy>
 80090de:	4621      	mov	r1, r4
 80090e0:	4638      	mov	r0, r7
 80090e2:	f7ff ffa5 	bl	8009030 <_Bfree>
 80090e6:	4644      	mov	r4, r8
 80090e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090ec:	3501      	adds	r5, #1
 80090ee:	615e      	str	r6, [r3, #20]
 80090f0:	6125      	str	r5, [r4, #16]
 80090f2:	4620      	mov	r0, r4
 80090f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f8:	0800c635 	.word	0x0800c635
 80090fc:	0800c6b7 	.word	0x0800c6b7

08009100 <__s2b>:
 8009100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009104:	4615      	mov	r5, r2
 8009106:	2209      	movs	r2, #9
 8009108:	461f      	mov	r7, r3
 800910a:	3308      	adds	r3, #8
 800910c:	460c      	mov	r4, r1
 800910e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009112:	4606      	mov	r6, r0
 8009114:	2201      	movs	r2, #1
 8009116:	2100      	movs	r1, #0
 8009118:	429a      	cmp	r2, r3
 800911a:	db09      	blt.n	8009130 <__s2b+0x30>
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff ff47 	bl	8008fb0 <_Balloc>
 8009122:	b940      	cbnz	r0, 8009136 <__s2b+0x36>
 8009124:	4602      	mov	r2, r0
 8009126:	21d3      	movs	r1, #211	@ 0xd3
 8009128:	4b18      	ldr	r3, [pc, #96]	@ (800918c <__s2b+0x8c>)
 800912a:	4819      	ldr	r0, [pc, #100]	@ (8009190 <__s2b+0x90>)
 800912c:	f000 fcba 	bl	8009aa4 <__assert_func>
 8009130:	0052      	lsls	r2, r2, #1
 8009132:	3101      	adds	r1, #1
 8009134:	e7f0      	b.n	8009118 <__s2b+0x18>
 8009136:	9b08      	ldr	r3, [sp, #32]
 8009138:	2d09      	cmp	r5, #9
 800913a:	6143      	str	r3, [r0, #20]
 800913c:	f04f 0301 	mov.w	r3, #1
 8009140:	6103      	str	r3, [r0, #16]
 8009142:	dd16      	ble.n	8009172 <__s2b+0x72>
 8009144:	f104 0909 	add.w	r9, r4, #9
 8009148:	46c8      	mov	r8, r9
 800914a:	442c      	add	r4, r5
 800914c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009150:	4601      	mov	r1, r0
 8009152:	220a      	movs	r2, #10
 8009154:	4630      	mov	r0, r6
 8009156:	3b30      	subs	r3, #48	@ 0x30
 8009158:	f7ff ff8c 	bl	8009074 <__multadd>
 800915c:	45a0      	cmp	r8, r4
 800915e:	d1f5      	bne.n	800914c <__s2b+0x4c>
 8009160:	f1a5 0408 	sub.w	r4, r5, #8
 8009164:	444c      	add	r4, r9
 8009166:	1b2d      	subs	r5, r5, r4
 8009168:	1963      	adds	r3, r4, r5
 800916a:	42bb      	cmp	r3, r7
 800916c:	db04      	blt.n	8009178 <__s2b+0x78>
 800916e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009172:	2509      	movs	r5, #9
 8009174:	340a      	adds	r4, #10
 8009176:	e7f6      	b.n	8009166 <__s2b+0x66>
 8009178:	f814 3b01 	ldrb.w	r3, [r4], #1
 800917c:	4601      	mov	r1, r0
 800917e:	220a      	movs	r2, #10
 8009180:	4630      	mov	r0, r6
 8009182:	3b30      	subs	r3, #48	@ 0x30
 8009184:	f7ff ff76 	bl	8009074 <__multadd>
 8009188:	e7ee      	b.n	8009168 <__s2b+0x68>
 800918a:	bf00      	nop
 800918c:	0800c635 	.word	0x0800c635
 8009190:	0800c6b7 	.word	0x0800c6b7

08009194 <__hi0bits>:
 8009194:	4603      	mov	r3, r0
 8009196:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800919a:	bf3a      	itte	cc
 800919c:	0403      	lslcc	r3, r0, #16
 800919e:	2010      	movcc	r0, #16
 80091a0:	2000      	movcs	r0, #0
 80091a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091a6:	bf3c      	itt	cc
 80091a8:	021b      	lslcc	r3, r3, #8
 80091aa:	3008      	addcc	r0, #8
 80091ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091b0:	bf3c      	itt	cc
 80091b2:	011b      	lslcc	r3, r3, #4
 80091b4:	3004      	addcc	r0, #4
 80091b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ba:	bf3c      	itt	cc
 80091bc:	009b      	lslcc	r3, r3, #2
 80091be:	3002      	addcc	r0, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	db05      	blt.n	80091d0 <__hi0bits+0x3c>
 80091c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091c8:	f100 0001 	add.w	r0, r0, #1
 80091cc:	bf08      	it	eq
 80091ce:	2020      	moveq	r0, #32
 80091d0:	4770      	bx	lr

080091d2 <__lo0bits>:
 80091d2:	6803      	ldr	r3, [r0, #0]
 80091d4:	4602      	mov	r2, r0
 80091d6:	f013 0007 	ands.w	r0, r3, #7
 80091da:	d00b      	beq.n	80091f4 <__lo0bits+0x22>
 80091dc:	07d9      	lsls	r1, r3, #31
 80091de:	d421      	bmi.n	8009224 <__lo0bits+0x52>
 80091e0:	0798      	lsls	r0, r3, #30
 80091e2:	bf49      	itett	mi
 80091e4:	085b      	lsrmi	r3, r3, #1
 80091e6:	089b      	lsrpl	r3, r3, #2
 80091e8:	2001      	movmi	r0, #1
 80091ea:	6013      	strmi	r3, [r2, #0]
 80091ec:	bf5c      	itt	pl
 80091ee:	2002      	movpl	r0, #2
 80091f0:	6013      	strpl	r3, [r2, #0]
 80091f2:	4770      	bx	lr
 80091f4:	b299      	uxth	r1, r3
 80091f6:	b909      	cbnz	r1, 80091fc <__lo0bits+0x2a>
 80091f8:	2010      	movs	r0, #16
 80091fa:	0c1b      	lsrs	r3, r3, #16
 80091fc:	b2d9      	uxtb	r1, r3
 80091fe:	b909      	cbnz	r1, 8009204 <__lo0bits+0x32>
 8009200:	3008      	adds	r0, #8
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	0719      	lsls	r1, r3, #28
 8009206:	bf04      	itt	eq
 8009208:	091b      	lsreq	r3, r3, #4
 800920a:	3004      	addeq	r0, #4
 800920c:	0799      	lsls	r1, r3, #30
 800920e:	bf04      	itt	eq
 8009210:	089b      	lsreq	r3, r3, #2
 8009212:	3002      	addeq	r0, #2
 8009214:	07d9      	lsls	r1, r3, #31
 8009216:	d403      	bmi.n	8009220 <__lo0bits+0x4e>
 8009218:	085b      	lsrs	r3, r3, #1
 800921a:	f100 0001 	add.w	r0, r0, #1
 800921e:	d003      	beq.n	8009228 <__lo0bits+0x56>
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	4770      	bx	lr
 8009224:	2000      	movs	r0, #0
 8009226:	4770      	bx	lr
 8009228:	2020      	movs	r0, #32
 800922a:	4770      	bx	lr

0800922c <__i2b>:
 800922c:	b510      	push	{r4, lr}
 800922e:	460c      	mov	r4, r1
 8009230:	2101      	movs	r1, #1
 8009232:	f7ff febd 	bl	8008fb0 <_Balloc>
 8009236:	4602      	mov	r2, r0
 8009238:	b928      	cbnz	r0, 8009246 <__i2b+0x1a>
 800923a:	f240 1145 	movw	r1, #325	@ 0x145
 800923e:	4b04      	ldr	r3, [pc, #16]	@ (8009250 <__i2b+0x24>)
 8009240:	4804      	ldr	r0, [pc, #16]	@ (8009254 <__i2b+0x28>)
 8009242:	f000 fc2f 	bl	8009aa4 <__assert_func>
 8009246:	2301      	movs	r3, #1
 8009248:	6144      	str	r4, [r0, #20]
 800924a:	6103      	str	r3, [r0, #16]
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	0800c635 	.word	0x0800c635
 8009254:	0800c6b7 	.word	0x0800c6b7

08009258 <__multiply>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	4614      	mov	r4, r2
 800925e:	690a      	ldr	r2, [r1, #16]
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	460f      	mov	r7, r1
 8009264:	429a      	cmp	r2, r3
 8009266:	bfa2      	ittt	ge
 8009268:	4623      	movge	r3, r4
 800926a:	460c      	movge	r4, r1
 800926c:	461f      	movge	r7, r3
 800926e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009272:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009276:	68a3      	ldr	r3, [r4, #8]
 8009278:	6861      	ldr	r1, [r4, #4]
 800927a:	eb0a 0609 	add.w	r6, sl, r9
 800927e:	42b3      	cmp	r3, r6
 8009280:	b085      	sub	sp, #20
 8009282:	bfb8      	it	lt
 8009284:	3101      	addlt	r1, #1
 8009286:	f7ff fe93 	bl	8008fb0 <_Balloc>
 800928a:	b930      	cbnz	r0, 800929a <__multiply+0x42>
 800928c:	4602      	mov	r2, r0
 800928e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009292:	4b43      	ldr	r3, [pc, #268]	@ (80093a0 <__multiply+0x148>)
 8009294:	4843      	ldr	r0, [pc, #268]	@ (80093a4 <__multiply+0x14c>)
 8009296:	f000 fc05 	bl	8009aa4 <__assert_func>
 800929a:	f100 0514 	add.w	r5, r0, #20
 800929e:	462b      	mov	r3, r5
 80092a0:	2200      	movs	r2, #0
 80092a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092a6:	4543      	cmp	r3, r8
 80092a8:	d321      	bcc.n	80092ee <__multiply+0x96>
 80092aa:	f107 0114 	add.w	r1, r7, #20
 80092ae:	f104 0214 	add.w	r2, r4, #20
 80092b2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80092b6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80092ba:	9302      	str	r3, [sp, #8]
 80092bc:	1b13      	subs	r3, r2, r4
 80092be:	3b15      	subs	r3, #21
 80092c0:	f023 0303 	bic.w	r3, r3, #3
 80092c4:	3304      	adds	r3, #4
 80092c6:	f104 0715 	add.w	r7, r4, #21
 80092ca:	42ba      	cmp	r2, r7
 80092cc:	bf38      	it	cc
 80092ce:	2304      	movcc	r3, #4
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	9103      	str	r1, [sp, #12]
 80092d6:	428b      	cmp	r3, r1
 80092d8:	d80c      	bhi.n	80092f4 <__multiply+0x9c>
 80092da:	2e00      	cmp	r6, #0
 80092dc:	dd03      	ble.n	80092e6 <__multiply+0x8e>
 80092de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d05a      	beq.n	800939c <__multiply+0x144>
 80092e6:	6106      	str	r6, [r0, #16]
 80092e8:	b005      	add	sp, #20
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ee:	f843 2b04 	str.w	r2, [r3], #4
 80092f2:	e7d8      	b.n	80092a6 <__multiply+0x4e>
 80092f4:	f8b1 a000 	ldrh.w	sl, [r1]
 80092f8:	f1ba 0f00 	cmp.w	sl, #0
 80092fc:	d023      	beq.n	8009346 <__multiply+0xee>
 80092fe:	46a9      	mov	r9, r5
 8009300:	f04f 0c00 	mov.w	ip, #0
 8009304:	f104 0e14 	add.w	lr, r4, #20
 8009308:	f85e 7b04 	ldr.w	r7, [lr], #4
 800930c:	f8d9 3000 	ldr.w	r3, [r9]
 8009310:	fa1f fb87 	uxth.w	fp, r7
 8009314:	b29b      	uxth	r3, r3
 8009316:	fb0a 330b 	mla	r3, sl, fp, r3
 800931a:	4463      	add	r3, ip
 800931c:	f8d9 c000 	ldr.w	ip, [r9]
 8009320:	0c3f      	lsrs	r7, r7, #16
 8009322:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009326:	fb0a c707 	mla	r7, sl, r7, ip
 800932a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800932e:	b29b      	uxth	r3, r3
 8009330:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009334:	4572      	cmp	r2, lr
 8009336:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800933a:	f849 3b04 	str.w	r3, [r9], #4
 800933e:	d8e3      	bhi.n	8009308 <__multiply+0xb0>
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	f845 c003 	str.w	ip, [r5, r3]
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	3104      	adds	r1, #4
 800934a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800934e:	f1b9 0f00 	cmp.w	r9, #0
 8009352:	d021      	beq.n	8009398 <__multiply+0x140>
 8009354:	46ae      	mov	lr, r5
 8009356:	f04f 0a00 	mov.w	sl, #0
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	f104 0c14 	add.w	ip, r4, #20
 8009360:	f8bc b000 	ldrh.w	fp, [ip]
 8009364:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009368:	b29b      	uxth	r3, r3
 800936a:	fb09 770b 	mla	r7, r9, fp, r7
 800936e:	4457      	add	r7, sl
 8009370:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009374:	f84e 3b04 	str.w	r3, [lr], #4
 8009378:	f85c 3b04 	ldr.w	r3, [ip], #4
 800937c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009380:	f8be 3000 	ldrh.w	r3, [lr]
 8009384:	4562      	cmp	r2, ip
 8009386:	fb09 330a 	mla	r3, r9, sl, r3
 800938a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800938e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009392:	d8e5      	bhi.n	8009360 <__multiply+0x108>
 8009394:	9f01      	ldr	r7, [sp, #4]
 8009396:	51eb      	str	r3, [r5, r7]
 8009398:	3504      	adds	r5, #4
 800939a:	e79a      	b.n	80092d2 <__multiply+0x7a>
 800939c:	3e01      	subs	r6, #1
 800939e:	e79c      	b.n	80092da <__multiply+0x82>
 80093a0:	0800c635 	.word	0x0800c635
 80093a4:	0800c6b7 	.word	0x0800c6b7

080093a8 <__pow5mult>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	4615      	mov	r5, r2
 80093ae:	f012 0203 	ands.w	r2, r2, #3
 80093b2:	4607      	mov	r7, r0
 80093b4:	460e      	mov	r6, r1
 80093b6:	d007      	beq.n	80093c8 <__pow5mult+0x20>
 80093b8:	4c25      	ldr	r4, [pc, #148]	@ (8009450 <__pow5mult+0xa8>)
 80093ba:	3a01      	subs	r2, #1
 80093bc:	2300      	movs	r3, #0
 80093be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093c2:	f7ff fe57 	bl	8009074 <__multadd>
 80093c6:	4606      	mov	r6, r0
 80093c8:	10ad      	asrs	r5, r5, #2
 80093ca:	d03d      	beq.n	8009448 <__pow5mult+0xa0>
 80093cc:	69fc      	ldr	r4, [r7, #28]
 80093ce:	b97c      	cbnz	r4, 80093f0 <__pow5mult+0x48>
 80093d0:	2010      	movs	r0, #16
 80093d2:	f7ff fc7d 	bl	8008cd0 <malloc>
 80093d6:	4602      	mov	r2, r0
 80093d8:	61f8      	str	r0, [r7, #28]
 80093da:	b928      	cbnz	r0, 80093e8 <__pow5mult+0x40>
 80093dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009454 <__pow5mult+0xac>)
 80093e2:	481d      	ldr	r0, [pc, #116]	@ (8009458 <__pow5mult+0xb0>)
 80093e4:	f000 fb5e 	bl	8009aa4 <__assert_func>
 80093e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ec:	6004      	str	r4, [r0, #0]
 80093ee:	60c4      	str	r4, [r0, #12]
 80093f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093f8:	b94c      	cbnz	r4, 800940e <__pow5mult+0x66>
 80093fa:	f240 2171 	movw	r1, #625	@ 0x271
 80093fe:	4638      	mov	r0, r7
 8009400:	f7ff ff14 	bl	800922c <__i2b>
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	f8c8 0008 	str.w	r0, [r8, #8]
 800940c:	6003      	str	r3, [r0, #0]
 800940e:	f04f 0900 	mov.w	r9, #0
 8009412:	07eb      	lsls	r3, r5, #31
 8009414:	d50a      	bpl.n	800942c <__pow5mult+0x84>
 8009416:	4631      	mov	r1, r6
 8009418:	4622      	mov	r2, r4
 800941a:	4638      	mov	r0, r7
 800941c:	f7ff ff1c 	bl	8009258 <__multiply>
 8009420:	4680      	mov	r8, r0
 8009422:	4631      	mov	r1, r6
 8009424:	4638      	mov	r0, r7
 8009426:	f7ff fe03 	bl	8009030 <_Bfree>
 800942a:	4646      	mov	r6, r8
 800942c:	106d      	asrs	r5, r5, #1
 800942e:	d00b      	beq.n	8009448 <__pow5mult+0xa0>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	b938      	cbnz	r0, 8009444 <__pow5mult+0x9c>
 8009434:	4622      	mov	r2, r4
 8009436:	4621      	mov	r1, r4
 8009438:	4638      	mov	r0, r7
 800943a:	f7ff ff0d 	bl	8009258 <__multiply>
 800943e:	6020      	str	r0, [r4, #0]
 8009440:	f8c0 9000 	str.w	r9, [r0]
 8009444:	4604      	mov	r4, r0
 8009446:	e7e4      	b.n	8009412 <__pow5mult+0x6a>
 8009448:	4630      	mov	r0, r6
 800944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944e:	bf00      	nop
 8009450:	0800c710 	.word	0x0800c710
 8009454:	0800c5c6 	.word	0x0800c5c6
 8009458:	0800c6b7 	.word	0x0800c6b7

0800945c <__lshift>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	460c      	mov	r4, r1
 8009462:	4607      	mov	r7, r0
 8009464:	4691      	mov	r9, r2
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	6849      	ldr	r1, [r1, #4]
 800946a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009474:	f108 0601 	add.w	r6, r8, #1
 8009478:	42b3      	cmp	r3, r6
 800947a:	db0b      	blt.n	8009494 <__lshift+0x38>
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff fd97 	bl	8008fb0 <_Balloc>
 8009482:	4605      	mov	r5, r0
 8009484:	b948      	cbnz	r0, 800949a <__lshift+0x3e>
 8009486:	4602      	mov	r2, r0
 8009488:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800948c:	4b27      	ldr	r3, [pc, #156]	@ (800952c <__lshift+0xd0>)
 800948e:	4828      	ldr	r0, [pc, #160]	@ (8009530 <__lshift+0xd4>)
 8009490:	f000 fb08 	bl	8009aa4 <__assert_func>
 8009494:	3101      	adds	r1, #1
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	e7ee      	b.n	8009478 <__lshift+0x1c>
 800949a:	2300      	movs	r3, #0
 800949c:	f100 0114 	add.w	r1, r0, #20
 80094a0:	f100 0210 	add.w	r2, r0, #16
 80094a4:	4618      	mov	r0, r3
 80094a6:	4553      	cmp	r3, sl
 80094a8:	db33      	blt.n	8009512 <__lshift+0xb6>
 80094aa:	6920      	ldr	r0, [r4, #16]
 80094ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094b0:	f104 0314 	add.w	r3, r4, #20
 80094b4:	f019 091f 	ands.w	r9, r9, #31
 80094b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094c0:	d02b      	beq.n	800951a <__lshift+0xbe>
 80094c2:	468a      	mov	sl, r1
 80094c4:	2200      	movs	r2, #0
 80094c6:	f1c9 0e20 	rsb	lr, r9, #32
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	fa00 f009 	lsl.w	r0, r0, r9
 80094d0:	4310      	orrs	r0, r2
 80094d2:	f84a 0b04 	str.w	r0, [sl], #4
 80094d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094da:	459c      	cmp	ip, r3
 80094dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80094e0:	d8f3      	bhi.n	80094ca <__lshift+0x6e>
 80094e2:	ebac 0304 	sub.w	r3, ip, r4
 80094e6:	3b15      	subs	r3, #21
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	3304      	adds	r3, #4
 80094ee:	f104 0015 	add.w	r0, r4, #21
 80094f2:	4584      	cmp	ip, r0
 80094f4:	bf38      	it	cc
 80094f6:	2304      	movcc	r3, #4
 80094f8:	50ca      	str	r2, [r1, r3]
 80094fa:	b10a      	cbz	r2, 8009500 <__lshift+0xa4>
 80094fc:	f108 0602 	add.w	r6, r8, #2
 8009500:	3e01      	subs	r6, #1
 8009502:	4638      	mov	r0, r7
 8009504:	4621      	mov	r1, r4
 8009506:	612e      	str	r6, [r5, #16]
 8009508:	f7ff fd92 	bl	8009030 <_Bfree>
 800950c:	4628      	mov	r0, r5
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	f842 0f04 	str.w	r0, [r2, #4]!
 8009516:	3301      	adds	r3, #1
 8009518:	e7c5      	b.n	80094a6 <__lshift+0x4a>
 800951a:	3904      	subs	r1, #4
 800951c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009520:	459c      	cmp	ip, r3
 8009522:	f841 2f04 	str.w	r2, [r1, #4]!
 8009526:	d8f9      	bhi.n	800951c <__lshift+0xc0>
 8009528:	e7ea      	b.n	8009500 <__lshift+0xa4>
 800952a:	bf00      	nop
 800952c:	0800c635 	.word	0x0800c635
 8009530:	0800c6b7 	.word	0x0800c6b7

08009534 <__mcmp>:
 8009534:	4603      	mov	r3, r0
 8009536:	690a      	ldr	r2, [r1, #16]
 8009538:	6900      	ldr	r0, [r0, #16]
 800953a:	b530      	push	{r4, r5, lr}
 800953c:	1a80      	subs	r0, r0, r2
 800953e:	d10e      	bne.n	800955e <__mcmp+0x2a>
 8009540:	3314      	adds	r3, #20
 8009542:	3114      	adds	r1, #20
 8009544:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009548:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800954c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009550:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009554:	4295      	cmp	r5, r2
 8009556:	d003      	beq.n	8009560 <__mcmp+0x2c>
 8009558:	d205      	bcs.n	8009566 <__mcmp+0x32>
 800955a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	42a3      	cmp	r3, r4
 8009562:	d3f3      	bcc.n	800954c <__mcmp+0x18>
 8009564:	e7fb      	b.n	800955e <__mcmp+0x2a>
 8009566:	2001      	movs	r0, #1
 8009568:	e7f9      	b.n	800955e <__mcmp+0x2a>
	...

0800956c <__mdiff>:
 800956c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	4689      	mov	r9, r1
 8009572:	4606      	mov	r6, r0
 8009574:	4611      	mov	r1, r2
 8009576:	4648      	mov	r0, r9
 8009578:	4614      	mov	r4, r2
 800957a:	f7ff ffdb 	bl	8009534 <__mcmp>
 800957e:	1e05      	subs	r5, r0, #0
 8009580:	d112      	bne.n	80095a8 <__mdiff+0x3c>
 8009582:	4629      	mov	r1, r5
 8009584:	4630      	mov	r0, r6
 8009586:	f7ff fd13 	bl	8008fb0 <_Balloc>
 800958a:	4602      	mov	r2, r0
 800958c:	b928      	cbnz	r0, 800959a <__mdiff+0x2e>
 800958e:	f240 2137 	movw	r1, #567	@ 0x237
 8009592:	4b3e      	ldr	r3, [pc, #248]	@ (800968c <__mdiff+0x120>)
 8009594:	483e      	ldr	r0, [pc, #248]	@ (8009690 <__mdiff+0x124>)
 8009596:	f000 fa85 	bl	8009aa4 <__assert_func>
 800959a:	2301      	movs	r3, #1
 800959c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095a0:	4610      	mov	r0, r2
 80095a2:	b003      	add	sp, #12
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	bfbc      	itt	lt
 80095aa:	464b      	movlt	r3, r9
 80095ac:	46a1      	movlt	r9, r4
 80095ae:	4630      	mov	r0, r6
 80095b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095b4:	bfba      	itte	lt
 80095b6:	461c      	movlt	r4, r3
 80095b8:	2501      	movlt	r5, #1
 80095ba:	2500      	movge	r5, #0
 80095bc:	f7ff fcf8 	bl	8008fb0 <_Balloc>
 80095c0:	4602      	mov	r2, r0
 80095c2:	b918      	cbnz	r0, 80095cc <__mdiff+0x60>
 80095c4:	f240 2145 	movw	r1, #581	@ 0x245
 80095c8:	4b30      	ldr	r3, [pc, #192]	@ (800968c <__mdiff+0x120>)
 80095ca:	e7e3      	b.n	8009594 <__mdiff+0x28>
 80095cc:	f100 0b14 	add.w	fp, r0, #20
 80095d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095d4:	f109 0310 	add.w	r3, r9, #16
 80095d8:	60c5      	str	r5, [r0, #12]
 80095da:	f04f 0c00 	mov.w	ip, #0
 80095de:	f109 0514 	add.w	r5, r9, #20
 80095e2:	46d9      	mov	r9, fp
 80095e4:	6926      	ldr	r6, [r4, #16]
 80095e6:	f104 0e14 	add.w	lr, r4, #20
 80095ea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095ee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095fe:	b281      	uxth	r1, r0
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	fa1f f38a 	uxth.w	r3, sl
 8009606:	1a5b      	subs	r3, r3, r1
 8009608:	0c00      	lsrs	r0, r0, #16
 800960a:	4463      	add	r3, ip
 800960c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009610:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009614:	b29b      	uxth	r3, r3
 8009616:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800961a:	4576      	cmp	r6, lr
 800961c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009620:	f849 3b04 	str.w	r3, [r9], #4
 8009624:	d8e6      	bhi.n	80095f4 <__mdiff+0x88>
 8009626:	1b33      	subs	r3, r6, r4
 8009628:	3b15      	subs	r3, #21
 800962a:	f023 0303 	bic.w	r3, r3, #3
 800962e:	3415      	adds	r4, #21
 8009630:	3304      	adds	r3, #4
 8009632:	42a6      	cmp	r6, r4
 8009634:	bf38      	it	cc
 8009636:	2304      	movcc	r3, #4
 8009638:	441d      	add	r5, r3
 800963a:	445b      	add	r3, fp
 800963c:	461e      	mov	r6, r3
 800963e:	462c      	mov	r4, r5
 8009640:	4544      	cmp	r4, r8
 8009642:	d30e      	bcc.n	8009662 <__mdiff+0xf6>
 8009644:	f108 0103 	add.w	r1, r8, #3
 8009648:	1b49      	subs	r1, r1, r5
 800964a:	f021 0103 	bic.w	r1, r1, #3
 800964e:	3d03      	subs	r5, #3
 8009650:	45a8      	cmp	r8, r5
 8009652:	bf38      	it	cc
 8009654:	2100      	movcc	r1, #0
 8009656:	440b      	add	r3, r1
 8009658:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800965c:	b199      	cbz	r1, 8009686 <__mdiff+0x11a>
 800965e:	6117      	str	r7, [r2, #16]
 8009660:	e79e      	b.n	80095a0 <__mdiff+0x34>
 8009662:	46e6      	mov	lr, ip
 8009664:	f854 1b04 	ldr.w	r1, [r4], #4
 8009668:	fa1f fc81 	uxth.w	ip, r1
 800966c:	44f4      	add	ip, lr
 800966e:	0c08      	lsrs	r0, r1, #16
 8009670:	4471      	add	r1, lr
 8009672:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009676:	b289      	uxth	r1, r1
 8009678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800967c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009680:	f846 1b04 	str.w	r1, [r6], #4
 8009684:	e7dc      	b.n	8009640 <__mdiff+0xd4>
 8009686:	3f01      	subs	r7, #1
 8009688:	e7e6      	b.n	8009658 <__mdiff+0xec>
 800968a:	bf00      	nop
 800968c:	0800c635 	.word	0x0800c635
 8009690:	0800c6b7 	.word	0x0800c6b7

08009694 <__ulp>:
 8009694:	4b0e      	ldr	r3, [pc, #56]	@ (80096d0 <__ulp+0x3c>)
 8009696:	400b      	ands	r3, r1
 8009698:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800969c:	2b00      	cmp	r3, #0
 800969e:	dc08      	bgt.n	80096b2 <__ulp+0x1e>
 80096a0:	425b      	negs	r3, r3
 80096a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80096a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096aa:	da04      	bge.n	80096b6 <__ulp+0x22>
 80096ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80096b0:	4113      	asrs	r3, r2
 80096b2:	2200      	movs	r2, #0
 80096b4:	e008      	b.n	80096c8 <__ulp+0x34>
 80096b6:	f1a2 0314 	sub.w	r3, r2, #20
 80096ba:	2b1e      	cmp	r3, #30
 80096bc:	bfd6      	itet	le
 80096be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80096c2:	2201      	movgt	r2, #1
 80096c4:	40da      	lsrle	r2, r3
 80096c6:	2300      	movs	r3, #0
 80096c8:	4619      	mov	r1, r3
 80096ca:	4610      	mov	r0, r2
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	7ff00000 	.word	0x7ff00000

080096d4 <__b2d>:
 80096d4:	6902      	ldr	r2, [r0, #16]
 80096d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d8:	f100 0614 	add.w	r6, r0, #20
 80096dc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80096e0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80096e4:	4f1e      	ldr	r7, [pc, #120]	@ (8009760 <__b2d+0x8c>)
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7ff fd54 	bl	8009194 <__hi0bits>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f1c0 0020 	rsb	r0, r0, #32
 80096f2:	2b0a      	cmp	r3, #10
 80096f4:	f1a2 0504 	sub.w	r5, r2, #4
 80096f8:	6008      	str	r0, [r1, #0]
 80096fa:	dc12      	bgt.n	8009722 <__b2d+0x4e>
 80096fc:	42ae      	cmp	r6, r5
 80096fe:	bf2c      	ite	cs
 8009700:	2200      	movcs	r2, #0
 8009702:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009706:	f1c3 0c0b 	rsb	ip, r3, #11
 800970a:	3315      	adds	r3, #21
 800970c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009710:	fa04 f303 	lsl.w	r3, r4, r3
 8009714:	fa22 f20c 	lsr.w	r2, r2, ip
 8009718:	ea4e 0107 	orr.w	r1, lr, r7
 800971c:	431a      	orrs	r2, r3
 800971e:	4610      	mov	r0, r2
 8009720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009722:	42ae      	cmp	r6, r5
 8009724:	bf36      	itet	cc
 8009726:	f1a2 0508 	subcc.w	r5, r2, #8
 800972a:	2200      	movcs	r2, #0
 800972c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009730:	3b0b      	subs	r3, #11
 8009732:	d012      	beq.n	800975a <__b2d+0x86>
 8009734:	f1c3 0720 	rsb	r7, r3, #32
 8009738:	fa22 f107 	lsr.w	r1, r2, r7
 800973c:	409c      	lsls	r4, r3
 800973e:	430c      	orrs	r4, r1
 8009740:	42b5      	cmp	r5, r6
 8009742:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009746:	bf94      	ite	ls
 8009748:	2400      	movls	r4, #0
 800974a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800974e:	409a      	lsls	r2, r3
 8009750:	40fc      	lsrs	r4, r7
 8009752:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009756:	4322      	orrs	r2, r4
 8009758:	e7e1      	b.n	800971e <__b2d+0x4a>
 800975a:	ea44 0107 	orr.w	r1, r4, r7
 800975e:	e7de      	b.n	800971e <__b2d+0x4a>
 8009760:	3ff00000 	.word	0x3ff00000

08009764 <__d2b>:
 8009764:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009768:	2101      	movs	r1, #1
 800976a:	4690      	mov	r8, r2
 800976c:	4699      	mov	r9, r3
 800976e:	9e08      	ldr	r6, [sp, #32]
 8009770:	f7ff fc1e 	bl	8008fb0 <_Balloc>
 8009774:	4604      	mov	r4, r0
 8009776:	b930      	cbnz	r0, 8009786 <__d2b+0x22>
 8009778:	4602      	mov	r2, r0
 800977a:	f240 310f 	movw	r1, #783	@ 0x30f
 800977e:	4b23      	ldr	r3, [pc, #140]	@ (800980c <__d2b+0xa8>)
 8009780:	4823      	ldr	r0, [pc, #140]	@ (8009810 <__d2b+0xac>)
 8009782:	f000 f98f 	bl	8009aa4 <__assert_func>
 8009786:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800978a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800978e:	b10d      	cbz	r5, 8009794 <__d2b+0x30>
 8009790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	f1b8 0300 	subs.w	r3, r8, #0
 800979a:	d024      	beq.n	80097e6 <__d2b+0x82>
 800979c:	4668      	mov	r0, sp
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	f7ff fd17 	bl	80091d2 <__lo0bits>
 80097a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097a8:	b1d8      	cbz	r0, 80097e2 <__d2b+0x7e>
 80097aa:	f1c0 0320 	rsb	r3, r0, #32
 80097ae:	fa02 f303 	lsl.w	r3, r2, r3
 80097b2:	430b      	orrs	r3, r1
 80097b4:	40c2      	lsrs	r2, r0
 80097b6:	6163      	str	r3, [r4, #20]
 80097b8:	9201      	str	r2, [sp, #4]
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bf0c      	ite	eq
 80097c0:	2201      	moveq	r2, #1
 80097c2:	2202      	movne	r2, #2
 80097c4:	61a3      	str	r3, [r4, #24]
 80097c6:	6122      	str	r2, [r4, #16]
 80097c8:	b1ad      	cbz	r5, 80097f6 <__d2b+0x92>
 80097ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097ce:	4405      	add	r5, r0
 80097d0:	6035      	str	r5, [r6, #0]
 80097d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d8:	6018      	str	r0, [r3, #0]
 80097da:	4620      	mov	r0, r4
 80097dc:	b002      	add	sp, #8
 80097de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80097e2:	6161      	str	r1, [r4, #20]
 80097e4:	e7e9      	b.n	80097ba <__d2b+0x56>
 80097e6:	a801      	add	r0, sp, #4
 80097e8:	f7ff fcf3 	bl	80091d2 <__lo0bits>
 80097ec:	9b01      	ldr	r3, [sp, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	6163      	str	r3, [r4, #20]
 80097f2:	3020      	adds	r0, #32
 80097f4:	e7e7      	b.n	80097c6 <__d2b+0x62>
 80097f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097fe:	6030      	str	r0, [r6, #0]
 8009800:	6918      	ldr	r0, [r3, #16]
 8009802:	f7ff fcc7 	bl	8009194 <__hi0bits>
 8009806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800980a:	e7e4      	b.n	80097d6 <__d2b+0x72>
 800980c:	0800c635 	.word	0x0800c635
 8009810:	0800c6b7 	.word	0x0800c6b7

08009814 <__ratio>:
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	b085      	sub	sp, #20
 800981a:	e9cd 1000 	strd	r1, r0, [sp]
 800981e:	a902      	add	r1, sp, #8
 8009820:	f7ff ff58 	bl	80096d4 <__b2d>
 8009824:	468b      	mov	fp, r1
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	9800      	ldr	r0, [sp, #0]
 800982c:	a903      	add	r1, sp, #12
 800982e:	f7ff ff51 	bl	80096d4 <__b2d>
 8009832:	460d      	mov	r5, r1
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	4689      	mov	r9, r1
 8009838:	6919      	ldr	r1, [r3, #16]
 800983a:	9b00      	ldr	r3, [sp, #0]
 800983c:	4604      	mov	r4, r0
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	4630      	mov	r0, r6
 8009842:	1ac9      	subs	r1, r1, r3
 8009844:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009848:	1a9b      	subs	r3, r3, r2
 800984a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800984e:	2b00      	cmp	r3, #0
 8009850:	bfcd      	iteet	gt
 8009852:	463a      	movgt	r2, r7
 8009854:	462a      	movle	r2, r5
 8009856:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800985a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800985e:	bfd8      	it	le
 8009860:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009864:	464b      	mov	r3, r9
 8009866:	4622      	mov	r2, r4
 8009868:	4659      	mov	r1, fp
 800986a:	f7f6 ff5f 	bl	800072c <__aeabi_ddiv>
 800986e:	b005      	add	sp, #20
 8009870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009874 <__copybits>:
 8009874:	3901      	subs	r1, #1
 8009876:	b570      	push	{r4, r5, r6, lr}
 8009878:	1149      	asrs	r1, r1, #5
 800987a:	6914      	ldr	r4, [r2, #16]
 800987c:	3101      	adds	r1, #1
 800987e:	f102 0314 	add.w	r3, r2, #20
 8009882:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009886:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800988a:	1f05      	subs	r5, r0, #4
 800988c:	42a3      	cmp	r3, r4
 800988e:	d30c      	bcc.n	80098aa <__copybits+0x36>
 8009890:	1aa3      	subs	r3, r4, r2
 8009892:	3b11      	subs	r3, #17
 8009894:	f023 0303 	bic.w	r3, r3, #3
 8009898:	3211      	adds	r2, #17
 800989a:	42a2      	cmp	r2, r4
 800989c:	bf88      	it	hi
 800989e:	2300      	movhi	r3, #0
 80098a0:	4418      	add	r0, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	4288      	cmp	r0, r1
 80098a6:	d305      	bcc.n	80098b4 <__copybits+0x40>
 80098a8:	bd70      	pop	{r4, r5, r6, pc}
 80098aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80098ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80098b2:	e7eb      	b.n	800988c <__copybits+0x18>
 80098b4:	f840 3b04 	str.w	r3, [r0], #4
 80098b8:	e7f4      	b.n	80098a4 <__copybits+0x30>

080098ba <__any_on>:
 80098ba:	f100 0214 	add.w	r2, r0, #20
 80098be:	6900      	ldr	r0, [r0, #16]
 80098c0:	114b      	asrs	r3, r1, #5
 80098c2:	4298      	cmp	r0, r3
 80098c4:	b510      	push	{r4, lr}
 80098c6:	db11      	blt.n	80098ec <__any_on+0x32>
 80098c8:	dd0a      	ble.n	80098e0 <__any_on+0x26>
 80098ca:	f011 011f 	ands.w	r1, r1, #31
 80098ce:	d007      	beq.n	80098e0 <__any_on+0x26>
 80098d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098d4:	fa24 f001 	lsr.w	r0, r4, r1
 80098d8:	fa00 f101 	lsl.w	r1, r0, r1
 80098dc:	428c      	cmp	r4, r1
 80098de:	d10b      	bne.n	80098f8 <__any_on+0x3e>
 80098e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d803      	bhi.n	80098f0 <__any_on+0x36>
 80098e8:	2000      	movs	r0, #0
 80098ea:	bd10      	pop	{r4, pc}
 80098ec:	4603      	mov	r3, r0
 80098ee:	e7f7      	b.n	80098e0 <__any_on+0x26>
 80098f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d0f5      	beq.n	80098e4 <__any_on+0x2a>
 80098f8:	2001      	movs	r0, #1
 80098fa:	e7f6      	b.n	80098ea <__any_on+0x30>

080098fc <__sread>:
 80098fc:	b510      	push	{r4, lr}
 80098fe:	460c      	mov	r4, r1
 8009900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009904:	f000 f89a 	bl	8009a3c <_read_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	bfab      	itete	ge
 800990c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800990e:	89a3      	ldrhlt	r3, [r4, #12]
 8009910:	181b      	addge	r3, r3, r0
 8009912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009916:	bfac      	ite	ge
 8009918:	6563      	strge	r3, [r4, #84]	@ 0x54
 800991a:	81a3      	strhlt	r3, [r4, #12]
 800991c:	bd10      	pop	{r4, pc}

0800991e <__swrite>:
 800991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009922:	461f      	mov	r7, r3
 8009924:	898b      	ldrh	r3, [r1, #12]
 8009926:	4605      	mov	r5, r0
 8009928:	05db      	lsls	r3, r3, #23
 800992a:	460c      	mov	r4, r1
 800992c:	4616      	mov	r6, r2
 800992e:	d505      	bpl.n	800993c <__swrite+0x1e>
 8009930:	2302      	movs	r3, #2
 8009932:	2200      	movs	r2, #0
 8009934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009938:	f000 f86e 	bl	8009a18 <_lseek_r>
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	4632      	mov	r2, r6
 8009940:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	4628      	mov	r0, r5
 8009948:	463b      	mov	r3, r7
 800994a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800994e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009952:	f000 b895 	b.w	8009a80 <_write_r>

08009956 <__sseek>:
 8009956:	b510      	push	{r4, lr}
 8009958:	460c      	mov	r4, r1
 800995a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995e:	f000 f85b 	bl	8009a18 <_lseek_r>
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	bf15      	itete	ne
 8009968:	6560      	strne	r0, [r4, #84]	@ 0x54
 800996a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800996e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009972:	81a3      	strheq	r3, [r4, #12]
 8009974:	bf18      	it	ne
 8009976:	81a3      	strhne	r3, [r4, #12]
 8009978:	bd10      	pop	{r4, pc}

0800997a <__sclose>:
 800997a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997e:	f000 b83b 	b.w	80099f8 <_close_r>

08009982 <_realloc_r>:
 8009982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	4680      	mov	r8, r0
 8009988:	4615      	mov	r5, r2
 800998a:	460c      	mov	r4, r1
 800998c:	b921      	cbnz	r1, 8009998 <_realloc_r+0x16>
 800998e:	4611      	mov	r1, r2
 8009990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009994:	f7ff b9c6 	b.w	8008d24 <_malloc_r>
 8009998:	b92a      	cbnz	r2, 80099a6 <_realloc_r+0x24>
 800999a:	f000 f8b5 	bl	8009b08 <_free_r>
 800999e:	2400      	movs	r4, #0
 80099a0:	4620      	mov	r0, r4
 80099a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a6:	f000 f8f7 	bl	8009b98 <_malloc_usable_size_r>
 80099aa:	4285      	cmp	r5, r0
 80099ac:	4606      	mov	r6, r0
 80099ae:	d802      	bhi.n	80099b6 <_realloc_r+0x34>
 80099b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80099b4:	d8f4      	bhi.n	80099a0 <_realloc_r+0x1e>
 80099b6:	4629      	mov	r1, r5
 80099b8:	4640      	mov	r0, r8
 80099ba:	f7ff f9b3 	bl	8008d24 <_malloc_r>
 80099be:	4607      	mov	r7, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d0ec      	beq.n	800999e <_realloc_r+0x1c>
 80099c4:	42b5      	cmp	r5, r6
 80099c6:	462a      	mov	r2, r5
 80099c8:	4621      	mov	r1, r4
 80099ca:	bf28      	it	cs
 80099cc:	4632      	movcs	r2, r6
 80099ce:	f7fd fe86 	bl	80076de <memcpy>
 80099d2:	4621      	mov	r1, r4
 80099d4:	4640      	mov	r0, r8
 80099d6:	f000 f897 	bl	8009b08 <_free_r>
 80099da:	463c      	mov	r4, r7
 80099dc:	e7e0      	b.n	80099a0 <_realloc_r+0x1e>

080099de <__ascii_wctomb>:
 80099de:	4603      	mov	r3, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	b141      	cbz	r1, 80099f6 <__ascii_wctomb+0x18>
 80099e4:	2aff      	cmp	r2, #255	@ 0xff
 80099e6:	d904      	bls.n	80099f2 <__ascii_wctomb+0x14>
 80099e8:	228a      	movs	r2, #138	@ 0x8a
 80099ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	4770      	bx	lr
 80099f2:	2001      	movs	r0, #1
 80099f4:	700a      	strb	r2, [r1, #0]
 80099f6:	4770      	bx	lr

080099f8 <_close_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	2300      	movs	r3, #0
 80099fc:	4d05      	ldr	r5, [pc, #20]	@ (8009a14 <_close_r+0x1c>)
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	602b      	str	r3, [r5, #0]
 8009a04:	f7f9 fccb 	bl	800339e <_close>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_close_r+0x1a>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_close_r+0x1a>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	20000900 	.word	0x20000900

08009a18 <_lseek_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	4611      	mov	r1, r2
 8009a20:	2200      	movs	r2, #0
 8009a22:	4d05      	ldr	r5, [pc, #20]	@ (8009a38 <_lseek_r+0x20>)
 8009a24:	602a      	str	r2, [r5, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	f7f9 fcdd 	bl	80033e6 <_lseek>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_lseek_r+0x1e>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_lseek_r+0x1e>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000900 	.word	0x20000900

08009a3c <_read_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	2200      	movs	r2, #0
 8009a46:	4d05      	ldr	r5, [pc, #20]	@ (8009a5c <_read_r+0x20>)
 8009a48:	602a      	str	r2, [r5, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f7f9 fc6e 	bl	800332c <_read>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_read_r+0x1e>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_read_r+0x1e>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	20000900 	.word	0x20000900

08009a60 <_sbrk_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	2300      	movs	r3, #0
 8009a64:	4d05      	ldr	r5, [pc, #20]	@ (8009a7c <_sbrk_r+0x1c>)
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f9 fcc8 	bl	8003400 <_sbrk>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_sbrk_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_sbrk_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20000900 	.word	0x20000900

08009a80 <_write_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	4611      	mov	r1, r2
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4d05      	ldr	r5, [pc, #20]	@ (8009aa0 <_write_r+0x20>)
 8009a8c:	602a      	str	r2, [r5, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f7f9 fc69 	bl	8003366 <_write>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_write_r+0x1e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_write_r+0x1e>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20000900 	.word	0x20000900

08009aa4 <__assert_func>:
 8009aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aa6:	4614      	mov	r4, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4b09      	ldr	r3, [pc, #36]	@ (8009ad0 <__assert_func+0x2c>)
 8009aac:	4605      	mov	r5, r0
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68d8      	ldr	r0, [r3, #12]
 8009ab2:	b954      	cbnz	r4, 8009aca <__assert_func+0x26>
 8009ab4:	4b07      	ldr	r3, [pc, #28]	@ (8009ad4 <__assert_func+0x30>)
 8009ab6:	461c      	mov	r4, r3
 8009ab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009abc:	9100      	str	r1, [sp, #0]
 8009abe:	462b      	mov	r3, r5
 8009ac0:	4905      	ldr	r1, [pc, #20]	@ (8009ad8 <__assert_func+0x34>)
 8009ac2:	f000 f871 	bl	8009ba8 <fiprintf>
 8009ac6:	f000 f881 	bl	8009bcc <abort>
 8009aca:	4b04      	ldr	r3, [pc, #16]	@ (8009adc <__assert_func+0x38>)
 8009acc:	e7f4      	b.n	8009ab8 <__assert_func+0x14>
 8009ace:	bf00      	nop
 8009ad0:	200001ac 	.word	0x200001ac
 8009ad4:	0800c84b 	.word	0x0800c84b
 8009ad8:	0800c81d 	.word	0x0800c81d
 8009adc:	0800c810 	.word	0x0800c810

08009ae0 <_calloc_r>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	fba1 5402 	umull	r5, r4, r1, r2
 8009ae6:	b93c      	cbnz	r4, 8009af8 <_calloc_r+0x18>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7ff f91b 	bl	8008d24 <_malloc_r>
 8009aee:	4606      	mov	r6, r0
 8009af0:	b928      	cbnz	r0, 8009afe <_calloc_r+0x1e>
 8009af2:	2600      	movs	r6, #0
 8009af4:	4630      	mov	r0, r6
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	220c      	movs	r2, #12
 8009afa:	6002      	str	r2, [r0, #0]
 8009afc:	e7f9      	b.n	8009af2 <_calloc_r+0x12>
 8009afe:	462a      	mov	r2, r5
 8009b00:	4621      	mov	r1, r4
 8009b02:	f7fd fda5 	bl	8007650 <memset>
 8009b06:	e7f5      	b.n	8009af4 <_calloc_r+0x14>

08009b08 <_free_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d040      	beq.n	8009b92 <_free_r+0x8a>
 8009b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b14:	1f0c      	subs	r4, r1, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	18e4      	addlt	r4, r4, r3
 8009b1c:	f7ff fa3c 	bl	8008f98 <__malloc_lock>
 8009b20:	4a1c      	ldr	r2, [pc, #112]	@ (8009b94 <_free_r+0x8c>)
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	b933      	cbnz	r3, 8009b34 <_free_r+0x2c>
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	6014      	str	r4, [r2, #0]
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b30:	f7ff ba38 	b.w	8008fa4 <__malloc_unlock>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d908      	bls.n	8009b4a <_free_r+0x42>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	1821      	adds	r1, r4, r0
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf01      	itttt	eq
 8009b40:	6819      	ldreq	r1, [r3, #0]
 8009b42:	685b      	ldreq	r3, [r3, #4]
 8009b44:	1809      	addeq	r1, r1, r0
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	e7ed      	b.n	8009b26 <_free_r+0x1e>
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	b10b      	cbz	r3, 8009b54 <_free_r+0x4c>
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	d9fa      	bls.n	8009b4a <_free_r+0x42>
 8009b54:	6811      	ldr	r1, [r2, #0]
 8009b56:	1850      	adds	r0, r2, r1
 8009b58:	42a0      	cmp	r0, r4
 8009b5a:	d10b      	bne.n	8009b74 <_free_r+0x6c>
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	4401      	add	r1, r0
 8009b60:	1850      	adds	r0, r2, r1
 8009b62:	4283      	cmp	r3, r0
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	d1e0      	bne.n	8009b2a <_free_r+0x22>
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	4408      	add	r0, r1
 8009b6e:	6010      	str	r0, [r2, #0]
 8009b70:	6053      	str	r3, [r2, #4]
 8009b72:	e7da      	b.n	8009b2a <_free_r+0x22>
 8009b74:	d902      	bls.n	8009b7c <_free_r+0x74>
 8009b76:	230c      	movs	r3, #12
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	e7d6      	b.n	8009b2a <_free_r+0x22>
 8009b7c:	6820      	ldr	r0, [r4, #0]
 8009b7e:	1821      	adds	r1, r4, r0
 8009b80:	428b      	cmp	r3, r1
 8009b82:	bf01      	itttt	eq
 8009b84:	6819      	ldreq	r1, [r3, #0]
 8009b86:	685b      	ldreq	r3, [r3, #4]
 8009b88:	1809      	addeq	r1, r1, r0
 8009b8a:	6021      	streq	r1, [r4, #0]
 8009b8c:	6063      	str	r3, [r4, #4]
 8009b8e:	6054      	str	r4, [r2, #4]
 8009b90:	e7cb      	b.n	8009b2a <_free_r+0x22>
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	200008fc 	.word	0x200008fc

08009b98 <_malloc_usable_size_r>:
 8009b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b9c:	1f18      	subs	r0, r3, #4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfbc      	itt	lt
 8009ba2:	580b      	ldrlt	r3, [r1, r0]
 8009ba4:	18c0      	addlt	r0, r0, r3
 8009ba6:	4770      	bx	lr

08009ba8 <fiprintf>:
 8009ba8:	b40e      	push	{r1, r2, r3}
 8009baa:	b503      	push	{r0, r1, lr}
 8009bac:	4601      	mov	r1, r0
 8009bae:	ab03      	add	r3, sp, #12
 8009bb0:	4805      	ldr	r0, [pc, #20]	@ (8009bc8 <fiprintf+0x20>)
 8009bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb6:	6800      	ldr	r0, [r0, #0]
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	f000 f835 	bl	8009c28 <_vfiprintf_r>
 8009bbe:	b002      	add	sp, #8
 8009bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc4:	b003      	add	sp, #12
 8009bc6:	4770      	bx	lr
 8009bc8:	200001ac 	.word	0x200001ac

08009bcc <abort>:
 8009bcc:	2006      	movs	r0, #6
 8009bce:	b508      	push	{r3, lr}
 8009bd0:	f000 fa82 	bl	800a0d8 <raise>
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	f7f9 fb9e 	bl	8003316 <_exit>

08009bda <__sfputc_r>:
 8009bda:	6893      	ldr	r3, [r2, #8]
 8009bdc:	b410      	push	{r4}
 8009bde:	3b01      	subs	r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	6093      	str	r3, [r2, #8]
 8009be4:	da07      	bge.n	8009bf6 <__sfputc_r+0x1c>
 8009be6:	6994      	ldr	r4, [r2, #24]
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	db01      	blt.n	8009bf0 <__sfputc_r+0x16>
 8009bec:	290a      	cmp	r1, #10
 8009bee:	d102      	bne.n	8009bf6 <__sfputc_r+0x1c>
 8009bf0:	bc10      	pop	{r4}
 8009bf2:	f000 b931 	b.w	8009e58 <__swbuf_r>
 8009bf6:	6813      	ldr	r3, [r2, #0]
 8009bf8:	1c58      	adds	r0, r3, #1
 8009bfa:	6010      	str	r0, [r2, #0]
 8009bfc:	7019      	strb	r1, [r3, #0]
 8009bfe:	4608      	mov	r0, r1
 8009c00:	bc10      	pop	{r4}
 8009c02:	4770      	bx	lr

08009c04 <__sfputs_r>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	4606      	mov	r6, r0
 8009c08:	460f      	mov	r7, r1
 8009c0a:	4614      	mov	r4, r2
 8009c0c:	18d5      	adds	r5, r2, r3
 8009c0e:	42ac      	cmp	r4, r5
 8009c10:	d101      	bne.n	8009c16 <__sfputs_r+0x12>
 8009c12:	2000      	movs	r0, #0
 8009c14:	e007      	b.n	8009c26 <__sfputs_r+0x22>
 8009c16:	463a      	mov	r2, r7
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c1e:	f7ff ffdc 	bl	8009bda <__sfputc_r>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	d1f3      	bne.n	8009c0e <__sfputs_r+0xa>
 8009c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c28 <_vfiprintf_r>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	4614      	mov	r4, r2
 8009c30:	4698      	mov	r8, r3
 8009c32:	4606      	mov	r6, r0
 8009c34:	b09d      	sub	sp, #116	@ 0x74
 8009c36:	b118      	cbz	r0, 8009c40 <_vfiprintf_r+0x18>
 8009c38:	6a03      	ldr	r3, [r0, #32]
 8009c3a:	b90b      	cbnz	r3, 8009c40 <_vfiprintf_r+0x18>
 8009c3c:	f7fc fe2a 	bl	8006894 <__sinit>
 8009c40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c42:	07d9      	lsls	r1, r3, #31
 8009c44:	d405      	bmi.n	8009c52 <_vfiprintf_r+0x2a>
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	059a      	lsls	r2, r3, #22
 8009c4a:	d402      	bmi.n	8009c52 <_vfiprintf_r+0x2a>
 8009c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c4e:	f7fd fd36 	bl	80076be <__retarget_lock_acquire_recursive>
 8009c52:	89ab      	ldrh	r3, [r5, #12]
 8009c54:	071b      	lsls	r3, r3, #28
 8009c56:	d501      	bpl.n	8009c5c <_vfiprintf_r+0x34>
 8009c58:	692b      	ldr	r3, [r5, #16]
 8009c5a:	b99b      	cbnz	r3, 8009c84 <_vfiprintf_r+0x5c>
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f000 f938 	bl	8009ed4 <__swsetup_r>
 8009c64:	b170      	cbz	r0, 8009c84 <_vfiprintf_r+0x5c>
 8009c66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c68:	07dc      	lsls	r4, r3, #31
 8009c6a:	d504      	bpl.n	8009c76 <_vfiprintf_r+0x4e>
 8009c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c70:	b01d      	add	sp, #116	@ 0x74
 8009c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	0598      	lsls	r0, r3, #22
 8009c7a:	d4f7      	bmi.n	8009c6c <_vfiprintf_r+0x44>
 8009c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c7e:	f7fd fd1f 	bl	80076c0 <__retarget_lock_release_recursive>
 8009c82:	e7f3      	b.n	8009c6c <_vfiprintf_r+0x44>
 8009c84:	2300      	movs	r3, #0
 8009c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c88:	2320      	movs	r3, #32
 8009c8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c8e:	2330      	movs	r3, #48	@ 0x30
 8009c90:	f04f 0901 	mov.w	r9, #1
 8009c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c98:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009e44 <_vfiprintf_r+0x21c>
 8009c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	469a      	mov	sl, r3
 8009ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ca8:	b10a      	cbz	r2, 8009cae <_vfiprintf_r+0x86>
 8009caa:	2a25      	cmp	r2, #37	@ 0x25
 8009cac:	d1f9      	bne.n	8009ca2 <_vfiprintf_r+0x7a>
 8009cae:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb2:	d00b      	beq.n	8009ccc <_vfiprintf_r+0xa4>
 8009cb4:	465b      	mov	r3, fp
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7ff ffa2 	bl	8009c04 <__sfputs_r>
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f000 80a7 	beq.w	8009e14 <_vfiprintf_r+0x1ec>
 8009cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cc8:	445a      	add	r2, fp
 8009cca:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 809f 	beq.w	8009e14 <_vfiprintf_r+0x1ec>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce0:	f10a 0a01 	add.w	sl, sl, #1
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	9307      	str	r3, [sp, #28]
 8009ce8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cec:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cee:	4654      	mov	r4, sl
 8009cf0:	2205      	movs	r2, #5
 8009cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf6:	4853      	ldr	r0, [pc, #332]	@ (8009e44 <_vfiprintf_r+0x21c>)
 8009cf8:	f7fd fce3 	bl	80076c2 <memchr>
 8009cfc:	9a04      	ldr	r2, [sp, #16]
 8009cfe:	b9d8      	cbnz	r0, 8009d38 <_vfiprintf_r+0x110>
 8009d00:	06d1      	lsls	r1, r2, #27
 8009d02:	bf44      	itt	mi
 8009d04:	2320      	movmi	r3, #32
 8009d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d0a:	0713      	lsls	r3, r2, #28
 8009d0c:	bf44      	itt	mi
 8009d0e:	232b      	movmi	r3, #43	@ 0x2b
 8009d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d14:	f89a 3000 	ldrb.w	r3, [sl]
 8009d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d1a:	d015      	beq.n	8009d48 <_vfiprintf_r+0x120>
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	2000      	movs	r0, #0
 8009d20:	f04f 0c0a 	mov.w	ip, #10
 8009d24:	9a07      	ldr	r2, [sp, #28]
 8009d26:	4621      	mov	r1, r4
 8009d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d2c:	3b30      	subs	r3, #48	@ 0x30
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	d94b      	bls.n	8009dca <_vfiprintf_r+0x1a2>
 8009d32:	b1b0      	cbz	r0, 8009d62 <_vfiprintf_r+0x13a>
 8009d34:	9207      	str	r2, [sp, #28]
 8009d36:	e014      	b.n	8009d62 <_vfiprintf_r+0x13a>
 8009d38:	eba0 0308 	sub.w	r3, r0, r8
 8009d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d40:	4313      	orrs	r3, r2
 8009d42:	46a2      	mov	sl, r4
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	e7d2      	b.n	8009cee <_vfiprintf_r+0xc6>
 8009d48:	9b03      	ldr	r3, [sp, #12]
 8009d4a:	1d19      	adds	r1, r3, #4
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	9103      	str	r1, [sp, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	bfbb      	ittet	lt
 8009d54:	425b      	neglt	r3, r3
 8009d56:	f042 0202 	orrlt.w	r2, r2, #2
 8009d5a:	9307      	strge	r3, [sp, #28]
 8009d5c:	9307      	strlt	r3, [sp, #28]
 8009d5e:	bfb8      	it	lt
 8009d60:	9204      	strlt	r2, [sp, #16]
 8009d62:	7823      	ldrb	r3, [r4, #0]
 8009d64:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d66:	d10a      	bne.n	8009d7e <_vfiprintf_r+0x156>
 8009d68:	7863      	ldrb	r3, [r4, #1]
 8009d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d6c:	d132      	bne.n	8009dd4 <_vfiprintf_r+0x1ac>
 8009d6e:	9b03      	ldr	r3, [sp, #12]
 8009d70:	3402      	adds	r4, #2
 8009d72:	1d1a      	adds	r2, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9203      	str	r2, [sp, #12]
 8009d78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d7c:	9305      	str	r3, [sp, #20]
 8009d7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009e48 <_vfiprintf_r+0x220>
 8009d82:	2203      	movs	r2, #3
 8009d84:	4650      	mov	r0, sl
 8009d86:	7821      	ldrb	r1, [r4, #0]
 8009d88:	f7fd fc9b 	bl	80076c2 <memchr>
 8009d8c:	b138      	cbz	r0, 8009d9e <_vfiprintf_r+0x176>
 8009d8e:	2240      	movs	r2, #64	@ 0x40
 8009d90:	9b04      	ldr	r3, [sp, #16]
 8009d92:	eba0 000a 	sub.w	r0, r0, sl
 8009d96:	4082      	lsls	r2, r0
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	3401      	adds	r4, #1
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da2:	2206      	movs	r2, #6
 8009da4:	4829      	ldr	r0, [pc, #164]	@ (8009e4c <_vfiprintf_r+0x224>)
 8009da6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009daa:	f7fd fc8a 	bl	80076c2 <memchr>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d03f      	beq.n	8009e32 <_vfiprintf_r+0x20a>
 8009db2:	4b27      	ldr	r3, [pc, #156]	@ (8009e50 <_vfiprintf_r+0x228>)
 8009db4:	bb1b      	cbnz	r3, 8009dfe <_vfiprintf_r+0x1d6>
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	3307      	adds	r3, #7
 8009dba:	f023 0307 	bic.w	r3, r3, #7
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	9303      	str	r3, [sp, #12]
 8009dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc4:	443b      	add	r3, r7
 8009dc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dc8:	e76a      	b.n	8009ca0 <_vfiprintf_r+0x78>
 8009dca:	460c      	mov	r4, r1
 8009dcc:	2001      	movs	r0, #1
 8009dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd2:	e7a8      	b.n	8009d26 <_vfiprintf_r+0xfe>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f04f 0c0a 	mov.w	ip, #10
 8009dda:	4619      	mov	r1, r3
 8009ddc:	3401      	adds	r4, #1
 8009dde:	9305      	str	r3, [sp, #20]
 8009de0:	4620      	mov	r0, r4
 8009de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de6:	3a30      	subs	r2, #48	@ 0x30
 8009de8:	2a09      	cmp	r2, #9
 8009dea:	d903      	bls.n	8009df4 <_vfiprintf_r+0x1cc>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0c6      	beq.n	8009d7e <_vfiprintf_r+0x156>
 8009df0:	9105      	str	r1, [sp, #20]
 8009df2:	e7c4      	b.n	8009d7e <_vfiprintf_r+0x156>
 8009df4:	4604      	mov	r4, r0
 8009df6:	2301      	movs	r3, #1
 8009df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dfc:	e7f0      	b.n	8009de0 <_vfiprintf_r+0x1b8>
 8009dfe:	ab03      	add	r3, sp, #12
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	462a      	mov	r2, r5
 8009e04:	4630      	mov	r0, r6
 8009e06:	4b13      	ldr	r3, [pc, #76]	@ (8009e54 <_vfiprintf_r+0x22c>)
 8009e08:	a904      	add	r1, sp, #16
 8009e0a:	f7fb fec9 	bl	8005ba0 <_printf_float>
 8009e0e:	4607      	mov	r7, r0
 8009e10:	1c78      	adds	r0, r7, #1
 8009e12:	d1d6      	bne.n	8009dc2 <_vfiprintf_r+0x19a>
 8009e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e16:	07d9      	lsls	r1, r3, #31
 8009e18:	d405      	bmi.n	8009e26 <_vfiprintf_r+0x1fe>
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	059a      	lsls	r2, r3, #22
 8009e1e:	d402      	bmi.n	8009e26 <_vfiprintf_r+0x1fe>
 8009e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e22:	f7fd fc4d 	bl	80076c0 <__retarget_lock_release_recursive>
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	065b      	lsls	r3, r3, #25
 8009e2a:	f53f af1f 	bmi.w	8009c6c <_vfiprintf_r+0x44>
 8009e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e30:	e71e      	b.n	8009c70 <_vfiprintf_r+0x48>
 8009e32:	ab03      	add	r3, sp, #12
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	462a      	mov	r2, r5
 8009e38:	4630      	mov	r0, r6
 8009e3a:	4b06      	ldr	r3, [pc, #24]	@ (8009e54 <_vfiprintf_r+0x22c>)
 8009e3c:	a904      	add	r1, sp, #16
 8009e3e:	f7fc f94d 	bl	80060dc <_printf_i>
 8009e42:	e7e4      	b.n	8009e0e <_vfiprintf_r+0x1e6>
 8009e44:	0800c6a6 	.word	0x0800c6a6
 8009e48:	0800c6ac 	.word	0x0800c6ac
 8009e4c:	0800c6b0 	.word	0x0800c6b0
 8009e50:	08005ba1 	.word	0x08005ba1
 8009e54:	08009c05 	.word	0x08009c05

08009e58 <__swbuf_r>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	460e      	mov	r6, r1
 8009e5c:	4614      	mov	r4, r2
 8009e5e:	4605      	mov	r5, r0
 8009e60:	b118      	cbz	r0, 8009e6a <__swbuf_r+0x12>
 8009e62:	6a03      	ldr	r3, [r0, #32]
 8009e64:	b90b      	cbnz	r3, 8009e6a <__swbuf_r+0x12>
 8009e66:	f7fc fd15 	bl	8006894 <__sinit>
 8009e6a:	69a3      	ldr	r3, [r4, #24]
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	071a      	lsls	r2, r3, #28
 8009e72:	d501      	bpl.n	8009e78 <__swbuf_r+0x20>
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	b943      	cbnz	r3, 8009e8a <__swbuf_r+0x32>
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 f82a 	bl	8009ed4 <__swsetup_r>
 8009e80:	b118      	cbz	r0, 8009e8a <__swbuf_r+0x32>
 8009e82:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009e86:	4638      	mov	r0, r7
 8009e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	b2f6      	uxtb	r6, r6
 8009e90:	1a98      	subs	r0, r3, r2
 8009e92:	6963      	ldr	r3, [r4, #20]
 8009e94:	4637      	mov	r7, r6
 8009e96:	4283      	cmp	r3, r0
 8009e98:	dc05      	bgt.n	8009ea6 <__swbuf_r+0x4e>
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f7ff f853 	bl	8008f48 <_fflush_r>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d1ed      	bne.n	8009e82 <__swbuf_r+0x2a>
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	60a3      	str	r3, [r4, #8]
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	6022      	str	r2, [r4, #0]
 8009eb2:	701e      	strb	r6, [r3, #0]
 8009eb4:	6962      	ldr	r2, [r4, #20]
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d004      	beq.n	8009ec6 <__swbuf_r+0x6e>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	07db      	lsls	r3, r3, #31
 8009ec0:	d5e1      	bpl.n	8009e86 <__swbuf_r+0x2e>
 8009ec2:	2e0a      	cmp	r6, #10
 8009ec4:	d1df      	bne.n	8009e86 <__swbuf_r+0x2e>
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f7ff f83d 	bl	8008f48 <_fflush_r>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d0d9      	beq.n	8009e86 <__swbuf_r+0x2e>
 8009ed2:	e7d6      	b.n	8009e82 <__swbuf_r+0x2a>

08009ed4 <__swsetup_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4b29      	ldr	r3, [pc, #164]	@ (8009f7c <__swsetup_r+0xa8>)
 8009ed8:	4605      	mov	r5, r0
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	460c      	mov	r4, r1
 8009ede:	b118      	cbz	r0, 8009ee8 <__swsetup_r+0x14>
 8009ee0:	6a03      	ldr	r3, [r0, #32]
 8009ee2:	b90b      	cbnz	r3, 8009ee8 <__swsetup_r+0x14>
 8009ee4:	f7fc fcd6 	bl	8006894 <__sinit>
 8009ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eec:	0719      	lsls	r1, r3, #28
 8009eee:	d422      	bmi.n	8009f36 <__swsetup_r+0x62>
 8009ef0:	06da      	lsls	r2, r3, #27
 8009ef2:	d407      	bmi.n	8009f04 <__swsetup_r+0x30>
 8009ef4:	2209      	movs	r2, #9
 8009ef6:	602a      	str	r2, [r5, #0]
 8009ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	e033      	b.n	8009f6c <__swsetup_r+0x98>
 8009f04:	0758      	lsls	r0, r3, #29
 8009f06:	d512      	bpl.n	8009f2e <__swsetup_r+0x5a>
 8009f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f0a:	b141      	cbz	r1, 8009f1e <__swsetup_r+0x4a>
 8009f0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f10:	4299      	cmp	r1, r3
 8009f12:	d002      	beq.n	8009f1a <__swsetup_r+0x46>
 8009f14:	4628      	mov	r0, r5
 8009f16:	f7ff fdf7 	bl	8009b08 <_free_r>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	2300      	movs	r3, #0
 8009f28:	6063      	str	r3, [r4, #4]
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f043 0308 	orr.w	r3, r3, #8
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	6923      	ldr	r3, [r4, #16]
 8009f38:	b94b      	cbnz	r3, 8009f4e <__swsetup_r+0x7a>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f44:	d003      	beq.n	8009f4e <__swsetup_r+0x7a>
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 f83e 	bl	8009fca <__smakebuf_r>
 8009f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f52:	f013 0201 	ands.w	r2, r3, #1
 8009f56:	d00a      	beq.n	8009f6e <__swsetup_r+0x9a>
 8009f58:	2200      	movs	r2, #0
 8009f5a:	60a2      	str	r2, [r4, #8]
 8009f5c:	6962      	ldr	r2, [r4, #20]
 8009f5e:	4252      	negs	r2, r2
 8009f60:	61a2      	str	r2, [r4, #24]
 8009f62:	6922      	ldr	r2, [r4, #16]
 8009f64:	b942      	cbnz	r2, 8009f78 <__swsetup_r+0xa4>
 8009f66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f6a:	d1c5      	bne.n	8009ef8 <__swsetup_r+0x24>
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	0799      	lsls	r1, r3, #30
 8009f70:	bf58      	it	pl
 8009f72:	6962      	ldrpl	r2, [r4, #20]
 8009f74:	60a2      	str	r2, [r4, #8]
 8009f76:	e7f4      	b.n	8009f62 <__swsetup_r+0x8e>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	e7f7      	b.n	8009f6c <__swsetup_r+0x98>
 8009f7c:	200001ac 	.word	0x200001ac

08009f80 <__swhatbuf_r>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	460c      	mov	r4, r1
 8009f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f88:	4615      	mov	r5, r2
 8009f8a:	2900      	cmp	r1, #0
 8009f8c:	461e      	mov	r6, r3
 8009f8e:	b096      	sub	sp, #88	@ 0x58
 8009f90:	da0c      	bge.n	8009fac <__swhatbuf_r+0x2c>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	2100      	movs	r1, #0
 8009f96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f9a:	bf14      	ite	ne
 8009f9c:	2340      	movne	r3, #64	@ 0x40
 8009f9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	6031      	str	r1, [r6, #0]
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	b016      	add	sp, #88	@ 0x58
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	466a      	mov	r2, sp
 8009fae:	f000 f849 	bl	800a044 <_fstat_r>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	dbed      	blt.n	8009f92 <__swhatbuf_r+0x12>
 8009fb6:	9901      	ldr	r1, [sp, #4]
 8009fb8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fbc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fc0:	4259      	negs	r1, r3
 8009fc2:	4159      	adcs	r1, r3
 8009fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fc8:	e7eb      	b.n	8009fa2 <__swhatbuf_r+0x22>

08009fca <__smakebuf_r>:
 8009fca:	898b      	ldrh	r3, [r1, #12]
 8009fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fce:	079d      	lsls	r5, r3, #30
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	d507      	bpl.n	8009fe6 <__smakebuf_r+0x1c>
 8009fd6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	6123      	str	r3, [r4, #16]
 8009fde:	2301      	movs	r3, #1
 8009fe0:	6163      	str	r3, [r4, #20]
 8009fe2:	b003      	add	sp, #12
 8009fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe6:	466a      	mov	r2, sp
 8009fe8:	ab01      	add	r3, sp, #4
 8009fea:	f7ff ffc9 	bl	8009f80 <__swhatbuf_r>
 8009fee:	9f00      	ldr	r7, [sp, #0]
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7fe fe95 	bl	8008d24 <_malloc_r>
 8009ffa:	b948      	cbnz	r0, 800a010 <__smakebuf_r+0x46>
 8009ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a000:	059a      	lsls	r2, r3, #22
 800a002:	d4ee      	bmi.n	8009fe2 <__smakebuf_r+0x18>
 800a004:	f023 0303 	bic.w	r3, r3, #3
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	e7e2      	b.n	8009fd6 <__smakebuf_r+0xc>
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	6020      	str	r0, [r4, #0]
 800a020:	b15b      	cbz	r3, 800a03a <__smakebuf_r+0x70>
 800a022:	4630      	mov	r0, r6
 800a024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a028:	f000 f81e 	bl	800a068 <_isatty_r>
 800a02c:	b128      	cbz	r0, 800a03a <__smakebuf_r+0x70>
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f023 0303 	bic.w	r3, r3, #3
 800a034:	f043 0301 	orr.w	r3, r3, #1
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	431d      	orrs	r5, r3
 800a03e:	81a5      	strh	r5, [r4, #12]
 800a040:	e7cf      	b.n	8009fe2 <__smakebuf_r+0x18>
	...

0800a044 <_fstat_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	2300      	movs	r3, #0
 800a048:	4d06      	ldr	r5, [pc, #24]	@ (800a064 <_fstat_r+0x20>)
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	f7f9 f9af 	bl	80033b4 <_fstat>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	d102      	bne.n	800a060 <_fstat_r+0x1c>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b103      	cbz	r3, 800a060 <_fstat_r+0x1c>
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	bd38      	pop	{r3, r4, r5, pc}
 800a062:	bf00      	nop
 800a064:	20000900 	.word	0x20000900

0800a068 <_isatty_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	2300      	movs	r3, #0
 800a06c:	4d05      	ldr	r5, [pc, #20]	@ (800a084 <_isatty_r+0x1c>)
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	f7f9 f9ad 	bl	80033d2 <_isatty>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d102      	bne.n	800a082 <_isatty_r+0x1a>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b103      	cbz	r3, 800a082 <_isatty_r+0x1a>
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	20000900 	.word	0x20000900

0800a088 <_raise_r>:
 800a088:	291f      	cmp	r1, #31
 800a08a:	b538      	push	{r3, r4, r5, lr}
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	d904      	bls.n	800a09c <_raise_r+0x14>
 800a092:	2316      	movs	r3, #22
 800a094:	6003      	str	r3, [r0, #0]
 800a096:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a09e:	b112      	cbz	r2, 800a0a6 <_raise_r+0x1e>
 800a0a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0a4:	b94b      	cbnz	r3, 800a0ba <_raise_r+0x32>
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 f830 	bl	800a10c <_getpid_r>
 800a0ac:	4622      	mov	r2, r4
 800a0ae:	4601      	mov	r1, r0
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0b6:	f000 b817 	b.w	800a0e8 <_kill_r>
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d00a      	beq.n	800a0d4 <_raise_r+0x4c>
 800a0be:	1c59      	adds	r1, r3, #1
 800a0c0:	d103      	bne.n	800a0ca <_raise_r+0x42>
 800a0c2:	2316      	movs	r3, #22
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	e7e7      	b.n	800a09a <_raise_r+0x12>
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0d2:	4798      	blx	r3
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	e7e0      	b.n	800a09a <_raise_r+0x12>

0800a0d8 <raise>:
 800a0d8:	4b02      	ldr	r3, [pc, #8]	@ (800a0e4 <raise+0xc>)
 800a0da:	4601      	mov	r1, r0
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	f7ff bfd3 	b.w	800a088 <_raise_r>
 800a0e2:	bf00      	nop
 800a0e4:	200001ac 	.word	0x200001ac

0800a0e8 <_kill_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4d06      	ldr	r5, [pc, #24]	@ (800a108 <_kill_r+0x20>)
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	f7f9 f8fe 	bl	80032f6 <_kill>
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	d102      	bne.n	800a104 <_kill_r+0x1c>
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	b103      	cbz	r3, 800a104 <_kill_r+0x1c>
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	bd38      	pop	{r3, r4, r5, pc}
 800a106:	bf00      	nop
 800a108:	20000900 	.word	0x20000900

0800a10c <_getpid_r>:
 800a10c:	f7f9 b8ec 	b.w	80032e8 <_getpid>

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
